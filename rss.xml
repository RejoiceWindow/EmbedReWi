<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://em.rewi.xyz/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://em.rewi.xyz/rss.xml" rel="self" type="application/rss+xml"/>
    <title>EmbedReWi</title>
    <link>https://em.rewi.xyz/</link>
    <description>嵌入式怿窗</description>
    <language>zh-CN</language>
    <pubDate>Tue, 27 May 2025 01:10:20 GMT</pubDate>
    <lastBuildDate>Tue, 27 May 2025 01:10:20 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>OS</category>
    <category>hardware</category>
    <category>project</category>
    <category>protocol</category>
    <category>reference</category>
    <category>MathWorks</category>
    <category>tools</category>
    <category>test</category>
    <category>Linux</category>
    <category>interview</category>
    <category>C</category>
    <category>MCU</category>
    <category>C++</category>
    <item>
      <title>Radxa CM3 核心板</title>
      <link>https://em.rewi.xyz/OS/Radxa/Radxa%20CM3.html</link>
      <guid>https://em.rewi.xyz/OS/Radxa/Radxa%20CM3.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">Radxa CM3 核心板</source>
      <description>https://docs.radxa.com/compute-module/cm3/getting-started/introduction</description>
      <category>OS</category>
      <pubDate>Mon, 26 May 2025 11:12:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><a href="https://docs.radxa.com/compute-module/cm3/getting-started/introduction" target="_blank" rel="noopener noreferrer">https://docs.radxa.com/compute-module/cm3/getting-started/introduction</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>GPS</title>
      <link>https://em.rewi.xyz/hardware/GPS.html</link>
      <guid>https://em.rewi.xyz/hardware/GPS.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">GPS</source>
      <description>https://doc.embedfire.com/module/module_tutorial/zh/latest/Module_Manual/port_class/gps.html</description>
      <category>hardware</category>
      <pubDate>Sun, 25 May 2025 09:15:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><a href="https://doc.embedfire.com/module/module_tutorial/zh/latest/Module_Manual/port_class/gps.html" target="_blank" rel="noopener noreferrer">https://doc.embedfire.com/module/module_tutorial/zh/latest/Module_Manual/port_class/gps.html</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>NRF24L01</title>
      <link>https://em.rewi.xyz/hardware/NRF24L01.html</link>
      <guid>https://em.rewi.xyz/hardware/NRF24L01.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">NRF24L01</source>
      <description>NRF24L01 是一款由 Nordic Semiconductor 公司开发的低功耗单片无线收发器芯片，工作在 2.4 GHz~2.5 GHz ISM 频段，广泛应用于短距离无线通信场景。以下是其核心特性与功能的综合解析： 1. 基本特性 工作频段：支持全球通用的 2.4 GHz ISM 频段，无需许可证即可使用。 封装与功耗： 采用 QFN20 4...</description>
      <category>hardware</category>
      <pubDate>Thu, 08 May 2025 14:52:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>NRF24L01 是一款由 <strong>Nordic Semiconductor</strong> 公司开发的<strong>低功耗单片无线收发器芯片</strong>，工作在 <strong>2.4 GHz~2.5 GHz ISM 频段</strong>，广泛应用于短距离无线通信场景。以下是其核心特性与功能的综合解析：</p>
]]></content:encoded>
    </item>
    <item>
      <title>ZigBee</title>
      <link>https://em.rewi.xyz/hardware/ZigBee.html</link>
      <guid>https://em.rewi.xyz/hardware/ZigBee.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">ZigBee</source>
      <description>ZigBee 是一种低功耗、短距离、低速率的无线通信技术，专为物联网（IoT）和传感器网络设计，广泛应用于智能家居、工业自动化、医疗设备监控等领域。以下是其关键特点和应用场景的总结： 核心特点 低功耗 采用休眠模式与短时唤醒机制，电池供电设备可运行数月甚至数年，适合长期部署的传感器。 自组织网络 支持**网状网络（Mesh）**结构，节点自动组网并动态...</description>
      <category>hardware</category>
      <pubDate>Thu, 22 May 2025 08:33:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>ZigBee 是一种<strong>低功耗、短距离、低速率的无线通信技术</strong>，专为物联网（IoT）和传感器网络设计，广泛应用于智能家居、工业自动化、医疗设备监控等领域。以下是其关键特点和应用场景的总结：</p>
]]></content:encoded>
    </item>
    <item>
      <title>DFMEA</title>
      <link>https://em.rewi.xyz/project/DFMEA.html</link>
      <guid>https://em.rewi.xyz/project/DFMEA.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">DFMEA</source>
      <description>DFMEA（Design Failure Mode and Effects Analysis，设计失效模式及影响分析）是一种系统化的预防性质量工具，用于在产品设计阶段识别潜在的失效模式、评估其影响、分析失效原因，并制定改进措施以降低风险，从而确保设计的可靠性和安全性。它是FMEA（失效模式及影响分析）在设计领域的核心应用。 DFMEA分析的核心步骤 定...</description>
      <category>project</category>
      <pubDate>Thu, 08 May 2025 18:26:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>DFMEA（Design Failure Mode and Effects Analysis，<strong>设计失效模式及影响分析</strong>）是一种系统化的预防性质量工具，用于在产品设计阶段<strong>识别潜在的失效模式</strong>、<strong>评估其影响</strong>、<strong>分析失效原因</strong>，并制定改进措施以降低风险，从而确保设计的可靠性和安全性。它是FMEA（失效模式及影响分析）在设计领域的核心应用。</p>
]]></content:encoded>
    </item>
    <item>
      <title>HID</title>
      <link>https://em.rewi.xyz/protocol/HID.html</link>
      <guid>https://em.rewi.xyz/protocol/HID.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">HID</source>
      <description>HID（Human Interface Device，人机接口设备）</description>
      <category>protocol</category>
      <pubDate>Thu, 08 May 2025 14:22:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>HID（Human Interface Device，人机接口设备）是计算机领域中用于人与计算机交互的一类设备，通常遵循特定的通信协议以实现即插即用功能。以下是详细解析：</p>
<h2>核心概念</h2>
<ol>
<li>
<p><strong>定义</strong>：</p>
<ul>
<li>HID 是 <strong>USB标准</strong> 中的一个设备类别，涵盖直接与人交互的输入/输出设备，如键盘、鼠标、触摸屏等。</li>
<li>这些设备通过标准协议与主机通信，操作系统内置通用驱动，无需额外安装。</li>
</ul>
</li>
<li>
<p><strong>典型设备</strong>：</p>
<ul>
<li><strong>输入设备</strong>：键盘、鼠标、游戏手柄、绘图板。</li>
<li><strong>控制设备</strong>：遥控器、条码扫描器。</li>
<li><strong>其他交互工具</strong>：触摸屏、传感器（如陀螺仪）。</li>
</ul>
</li>
<li>
<p><strong>技术特性</strong>：</p>
<ul>
<li><strong>即插即用</strong>：遵循USB HID规范，操作系统自动识别。</li>
<li><strong>低延迟</strong>：设计注重实时响应，如键盘按键即时反馈。</li>
<li><strong>灵活配置</strong>：支持自定义功能（如宏按键）通过标准接口实现。</li>
</ul>
</li>
</ol>
<h2>扩展应用</h2>
<ul>
<li><strong>非USB场景</strong>：蓝牙HID（如无线键鼠）、红外设备（部分遥控器）。</li>
<li><strong>安全领域</strong>：门禁卡读卡器可能采用HID协议简化集成。</li>
</ul>
<h2>与其他术语的区分</h2>
<ul>
<li><strong>HID ≠ 硬件ID</strong>：后者为硬件唯一标识符（Hardware ID），缩写通常为HWID。</li>
<li><strong>HID类规范</strong>：属于USB-IF制定的标准，区别于其他设备类（如大容量存储设备）。</li>
</ul>
<h2>示例场景</h2>
<p>插入USB游戏手柄时，系统识别为HID设备，调用内置驱动映射按钮，用户无需手动安装驱动即可使用。</p>
<p><strong>总结</strong>：HID的核心是简化人机交互设备的兼容性，通过标准化协议提升用户体验，覆盖广泛的外设类型。</p>
]]></content:encoded>
    </item>
    <item>
      <title>USB</title>
      <link>https://em.rewi.xyz/protocol/USB.html</link>
      <guid>https://em.rewi.xyz/protocol/USB.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">USB</source>
      <description>USB（Universal Serial Bus，通用串行总线）</description>
      <category>protocol</category>
      <pubDate>Thu, 08 May 2025 14:38:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>USB **主设备（Host）<strong>和</strong>从设备（Device）**是USB通信架构中的两类核心角色，它们定义了数据传输的控制权与功能分工。以下是详细解析：</p>
]]></content:encoded>
    </item>
    <item>
      <title>WebRTC</title>
      <link>https://em.rewi.xyz/protocol/WebRTC.html</link>
      <guid>https://em.rewi.xyz/protocol/WebRTC.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">WebRTC</source>
      <description>WebRTC（Web Real-Time Communication）</description>
      <category>protocol</category>
      <pubDate>Wed, 07 May 2025 13:55:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>WebRTC（Web Real-Time Communication）</strong> 是一种由 <strong>Google</strong> 推动并开源的实时通信技术，允许浏览器、移动设备和应用程序之间直接进行<strong>音视频通话</strong>、<strong>数据传输</strong>，而无需安装插件或第三方软件。它已成为构建实时互动应用（如视频会议、在线教育、直播等）的核心技术标准。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Django</title>
      <link>https://em.rewi.xyz/reference/Django.html</link>
      <guid>https://em.rewi.xyz/reference/Django.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">Django</source>
      <description>Django(HTTP)</description>
      <category>reference</category>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>Django</strong> 是一个基于 <strong>Python</strong> 的开源 <strong>全栈 Web 框架</strong>，以“快速开发”和“简洁实用”为核心理念，帮助开发者高效构建安全、可扩展的 Web 应用。以下是其核心要点：</p>
]]></content:encoded>
    </item>
    <item>
      <title>串行解串器</title>
      <link>https://em.rewi.xyz/reference/SerDes.html</link>
      <guid>https://em.rewi.xyz/reference/SerDes.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">串行解串器</source>
      <description>FPD-Link IV 与 GMSL 核心技术对比 1. 技术背景与开发者 2. 传输性能对比 3. 应用场景差异 4. 技术特性与优势 5. 兼容性与生态系统 总结：如何选择？ 选FPD-Link IV： 需求：高清显示屏驱动（如中控屏、HUD）、低功耗布线、多屏同步。 场景：车内娱乐系统、仪表盘视频传输。 选GMSL： 需求：多摄像头/传感器原始数...</description>
      <category>reference</category>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2><strong>FPD-Link IV 与 GMSL 核心技术对比</strong></h2>
<h3><strong>1. 技术背景与开发者</strong></h3>
<p>| <strong>特性</strong>         | <strong>FPD-Link IV</strong>                          | <strong>GMSL (Gigabit Multimedia Serial Link)</strong>       |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>20250515</title>
      <link>https://em.rewi.xyz/interview/15daySprint/20250515.html</link>
      <guid>https://em.rewi.xyz/interview/15daySprint/20250515.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">20250515</source>
      <description>总计23H 经历描述 6 点前起床，8 点左右吃早餐，8点前到公司 换个衣服，9点开始上班 午饭、午休 一整天都在调试点阵屏，而且是自己摸索 直到晚上效果仍然不是很理想 18点以后，和同事聚餐到22点多 23点后，洗澡，整理 优点 早起 没打瞌睡 分析问题还算敏捷 喝了一杯很重酒味的酒，没有醉意 缺点 效率不高，一整天点阵屏都没点出目标效果 时间安排不...</description>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>总计<code>23</code>H</h2>
<p>| 序号 | 事项 | 耗时 | 时间段 | 情况 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>20250516</title>
      <link>https://em.rewi.xyz/interview/15daySprint/20250516.html</link>
      <guid>https://em.rewi.xyz/interview/15daySprint/20250516.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">20250516</source>
      <description>总计23H 经历描述 为了学习单片机的LVGL，弄了一整天 晚上有人来工作，到凌晨，然后熬夜一发不可收拾到第二天6点 优点 缺点 改进</description>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>总计<code>23</code>H</h2>
<p>| 序号 | 事项 | 耗时 | 时间段 | 情况 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>20250517</title>
      <link>https://em.rewi.xyz/interview/15daySprint/20250517.html</link>
      <guid>https://em.rewi.xyz/interview/15daySprint/20250517.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">20250517</source>
      <description>总计23H 经历描述 感觉精神还行，又调试了一整天LVGL，始终不得其法 20点去领取快递，并稍微早睡 优点 缺点 改进</description>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>总计<code>23</code>H</h2>
<p>| 序号 | 事项 | 耗时 | 时间段 | 情况 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>20250518</title>
      <link>https://em.rewi.xyz/interview/15daySprint/20250518.html</link>
      <guid>https://em.rewi.xyz/interview/15daySprint/20250518.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">20250518</source>
      <description>总计23H 经历描述 5点多就醒了，洗个衣服准备迎接赴约 8点打车公司出发，一直无所行动并休息，易被人员干扰 午饭过后继续休息 又尝试调试LVGL到23:00 01点睡觉 优点 缺点 改进</description>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>总计<code>23</code>H</h2>
<p>| 序号 | 事项 | 耗时 | 时间段 | 情况 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>20250518</title>
      <link>https://em.rewi.xyz/interview/15daySprint/20250519.html</link>
      <guid>https://em.rewi.xyz/interview/15daySprint/20250519.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">20250518</source>
      <description>总计23H 经历描述 6点多就醒了。起床，洗衣服 弄到7点多，吃早晨，走路到公司 继续尝试调试LVGL 9点开始编辑文档 然后因为公司产品问题开会一上午 下午尝试STM32文件系统 接近晚饭上级询问另一个功能进度，没有演示成功 花了两小时演示RS850功能成功 然后继续尝试文件系统到23:00，发现盘符STM32只支持&amp;quot;0:&amp;quot;(数字),LVGL 仅支持...</description>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>总计<code>23</code>H</h2>
<p>| 序号 | 事项 | 耗时 | 时间段 | 情况 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>20250520</title>
      <link>https://em.rewi.xyz/interview/15daySprint/20250520.html</link>
      <guid>https://em.rewi.xyz/interview/15daySprint/20250520.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">20250520</source>
      <description>总计23H 经历描述 6点多就醒了。起床，洗衣服 弄到8点多，花一小时去图书馆 手机频繁卡顿，电脑几个按键用不了，汗水一直往外冒 打车回住处，吃东西，午休，回消息，又快到16:00了才开始 优点 缺点 改进</description>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>总计<code>23</code>H</h2>
<p>| 序号 | 事项 | 耗时 | 时间段 | 情况 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>20250521</title>
      <link>https://em.rewi.xyz/interview/15daySprint/20250521.html</link>
      <guid>https://em.rewi.xyz/interview/15daySprint/20250521.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">20250521</source>
      <description>总计23H 经历描述 6点多就醒了。起床，洗衣服 8点多到公司，8:30 开始继续完善文档 完善了一点，实在不知如何是好，开始学习FatFS，然后打瞌睡 开会点阵屏、开始修改演示程序，开始演示 下午例会，然后一搞又到了16:00，然后又处理长城的问题 然后又到了19:00，实在搞不了，收拾东西拿回住处 洗个澡，刷一会剧。 21点多，开始写回复父亲的中午...</description>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>总计<code>23</code>H</h2>
<p>| 序号 | 事项 | 耗时 | 时间段 | 情况 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>20250522</title>
      <link>https://em.rewi.xyz/interview/15daySprint/20250522.html</link>
      <guid>https://em.rewi.xyz/interview/15daySprint/20250522.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">20250522</source>
      <description>总计23H 经历描述 6点多起床，7点多洗完衣服，出发公司，8:30 开始编辑文档 早上学习FatFs 下午刷9个吸顶屏软件，之后打瞌睡，之后指导调试 晚上STM32试错3小时，各种忽略，原地踏步 优点 缺点 改进</description>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>总计<code>23</code>H</h2>
<p>| 序号 | 事项 | 耗时 | 时间段 | 情况 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>20250523</title>
      <link>https://em.rewi.xyz/interview/15daySprint/20250523.html</link>
      <guid>https://em.rewi.xyz/interview/15daySprint/20250523.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">20250523</source>
      <description>总计23H 经历描述 6点多起床，7点多洗完衣服，出发公司，8:30 开始编辑文档 优点 缺点 改进</description>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>总计<code>23</code>H</h2>
<p>| 序号 | 事项 | 耗时 | 时间段 | 情况 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>20250524</title>
      <link>https://em.rewi.xyz/interview/15daySprint/20250524.html</link>
      <guid>https://em.rewi.xyz/interview/15daySprint/20250524.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">20250524</source>
      <description>总计23H 经历描述 睡晚了，9点多起床，10点多吃早餐，11点多去公司，吃完午饭， 开始编写脚本处理长城的问题，直到17点多，走路回住处，18点多到，买了西瓜和汤圆 20点多吃完，洗澡洗衣服，21点多睡觉 优点 缺点 改进</description>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>总计<code>23</code>H</h2>
<p>| 序号 | 事项 | 耗时 | 时间段 | 情况 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>20250525</title>
      <link>https://em.rewi.xyz/interview/15daySprint/20250525.html</link>
      <guid>https://em.rewi.xyz/interview/15daySprint/20250525.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">20250525</source>
      <description>总计23H 经历描述 5点醒了继续睡，8点多起床洗脸，9点开始编辑文档，10点开始出发接人 11点买个零时午休，15点出发逛商场，做陶艺 22点洗澡洗衣，23点回消息，1点睡觉 优点 缺点 改进</description>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>总计<code>23</code>H</h2>
<p>| 序号 | 事项 | 耗时 | 时间段 | 情况 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>20250526</title>
      <link>https://em.rewi.xyz/interview/15daySprint/20250526.html</link>
      <guid>https://em.rewi.xyz/interview/15daySprint/20250526.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">20250526</source>
      <description>总计23H 经历描述 7点多起床，回消息，8点多出发，9点工作开始 优点 缺点 改进</description>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>总计<code>23</code>H</h2>
<p>| 序号 | 事项 | 耗时 | 时间段 | 情况 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>FreeRTOS</title>
      <link>https://em.rewi.xyz/OS/FreeRTOS/</link>
      <guid>https://em.rewi.xyz/OS/FreeRTOS/</guid>
      <source url="https://em.rewi.xyz/rss.xml">FreeRTOS</source>
      <description>FreeRTOS 是 RTOS 的一个类别，设计得足够小，可以在微控制器上运行， 但其用途并不局限于微控制器应用程序。</description>
      <category>OS</category>
      <pubDate>Sun, 25 May 2025 01:18:33 GMT</pubDate>
      <content:encoded><![CDATA[<p>官方文档：<a href="https://www.freertos.org/a00126.html" target="_blank" rel="noopener noreferrer">https://www.freertos.org/a00126.html</a><br>
FreeRTOS<br>
<a href="https://zhuanlan.zhihu.com/p/550466920" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/550466920</a><br>
韦东山freeRTOS系列教程之【第七章】互斥量(mutex)<br>
<a href="https://blog.csdn.net/thisway_diy/article/details/121509241" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/thisway_diy/article/details/121509241</a></p>
<p>野火资料下载：<br>
<a href="http://products.embedfire.com" target="_blank" rel="noopener noreferrer">http://products.embedfire.com</a><br>
野火STM32F429教学视频：<br>
<a href="https://www.bilibili.com/video/BV1Ws411c7A8?p=1" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1Ws411c7A8?p=1</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>OpenCV</title>
      <link>https://em.rewi.xyz/advance/OpenCV.html</link>
      <guid>https://em.rewi.xyz/advance/OpenCV.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">OpenCV</source>
      <description>OpenCV（Open Source Computer Vision Library）是一个开源的跨平台计算机视觉和机器学习库，旨在为开发者提供丰富的工具和算法，用于处理图像和视频数据、实现实时视觉分析及构建智能应用。以下是其核心知识点详解： 一、OpenCV 的核心特性 1. 基本定义 定位：OpenCV 提供 2500+ 优化算法，涵盖图像处理、物...</description>
      <category>MathWorks</category>
      <pubDate>Sat, 03 May 2025 16:23:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>OpenCV（<strong>Open Source Computer Vision Library</strong>）是一个开源的跨平台计算机视觉和机器学习库，旨在为开发者提供丰富的工具和算法，用于处理图像和视频数据、实现实时视觉分析及构建智能应用。以下是其核心知识点详解：</p>
]]></content:encoded>
    </item>
    <item>
      <title>FSR</title>
      <link>https://em.rewi.xyz/hardware/FSR.html</link>
      <guid>https://em.rewi.xyz/hardware/FSR.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">FSR</source>
      <description>FSR(Force Sensing Resistor)是Interlink Electronics 公司生产的一款重量轻，体积小，感测精度高，超薄型电阻式压力传感器。这款压力传感器是将施加在FSR传感器薄膜区域的压力转换成电阻值的变化，从而获得压力信息。压力越大，电阻越低。其允许用在压力0g-10kg的场合。 以下是薄膜压力传感器的参数：</description>
      <category>hardware</category>
      <pubDate>Tue, 06 May 2025 05:37:26 GMT</pubDate>
      <content:encoded><![CDATA[<p>FSR(Force Sensing Resistor)是Interlink Electronics 公司生产的一款重量轻，体积小，感测精度高，超薄型电阻式压力传感器。这款压力传感器是将施加在FSR传感器薄膜区域的压力转换成电阻值的变化，从而获得压力信息。压力越大，电阻越低。其允许用在压力0g-10kg的场合。</p>
<p>以下是薄膜压力传感器的参数：</p>
<p>|<sub>|</sub>|<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>MPU-6050</title>
      <link>https://em.rewi.xyz/hardware/MPU-6050.html</link>
      <guid>https://em.rewi.xyz/hardware/MPU-6050.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">MPU-6050</source>
      <description>MPU-6050 是一款由 TDK InvenSense 公司推出的 6 轴运动处理传感器模块，集成了 3 轴加速度计和 3 轴陀螺仪，广泛用于测量物体的运动状态（如加速度、角速度），并通过 I²C 或 SPI 接口与微控制器通信。以下是其核心知识点详解： 一、核心功能与参数 1. 传感器类型 3 轴加速度计： 测量物体在 X、Y、Z 轴上的 线性加速...</description>
      <category>hardware</category>
      <pubDate>Tue, 06 May 2025 05:37:26 GMT</pubDate>
      <content:encoded><![CDATA[<p>MPU-6050 是一款由 <strong>TDK InvenSense</strong> 公司推出的 <strong>6 轴运动处理传感器模块</strong>，集成了 <strong>3 轴加速度计</strong>和 <strong>3 轴陀螺仪</strong>，广泛用于测量物体的运动状态（如加速度、角速度），并通过 <strong>I²C 或 SPI 接口</strong>与微控制器通信。以下是其核心知识点详解：</p>
]]></content:encoded>
    </item>
    <item>
      <title>ASPICE</title>
      <link>https://em.rewi.xyz/project/ASPICE.html</link>
      <guid>https://em.rewi.xyz/project/ASPICE.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">ASPICE</source>
      <description>ASPICE（Automotive Software Process Improvement and Capability Determination，汽车软件过程改进及能力评定）是汽车行业广泛采用的过程评估和改进标准，旨在提升软件开发的质量、效率及合规性，尤其适用于高安全要求的汽车电子系统。以下是其核心要点解析： 1. 定义与目标 基本定位： ASP...</description>
      <category>project</category>
      <pubDate>Sat, 03 May 2025 15:50:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>ASPICE（Automotive Software Process Improvement and Capability Determination，汽车软件过程改进及能力评定）是汽车行业广泛采用的过程评估和改进标准，旨在提升软件开发的质量、效率及合规性，尤其适用于高安全要求的汽车电子系统。以下是其核心要点解析：</p>
]]></content:encoded>
    </item>
    <item>
      <title>DTC</title>
      <link>https://em.rewi.xyz/project/DTC.html</link>
      <guid>https://em.rewi.xyz/project/DTC.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">DTC</source>
      <description>一、DTC诊断的定义 DTC（Diagnostic Trouble Code，诊断故障代码） 是现代汽车电子控制单元（ECU）用于记录和报告车辆故障的标准化代码系统。当车辆传感器、执行器或电路出现异常时，ECU会生成特定DTC，帮助技术人员快速定位问题，类似于人体的“疾病症状编码”。 二、DTC的工作原理 故障检测机制 ECU实时监控各子系统（如发动机...</description>
      <category>project</category>
      <pubDate>Sat, 03 May 2025 17:26:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2><strong>一、DTC诊断的定义</strong></h2>
<p><strong>DTC（Diagnostic Trouble Code，诊断故障代码）</strong> 是现代汽车电子控制单元（ECU）用于记录和报告车辆故障的标准化代码系统。当车辆传感器、执行器或电路出现异常时，ECU会生成特定DTC，帮助技术人员快速定位问题，类似于人体的“疾病症状编码”。</p>
]]></content:encoded>
    </item>
    <item>
      <title>UART</title>
      <link>https://em.rewi.xyz/protocol/UART.html</link>
      <guid>https://em.rewi.xyz/protocol/UART.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">UART</source>
      <description>UART（Universal Asynchronous Receiver/Transmitter，通用异步收发器）是一种异步串行通信协议，广泛用于电子设备之间的简单、可靠数据传输。它通过两根信号线（发送端 TX 和接收端 RX）实现全双工通信，无需时钟信号同步，适用于短距离、中低速场景。以下是其核心知识点详解： 一、核心特性与工作原理 1. 通信特点 ...</description>
      <category>protocol</category>
      <pubDate>Sat, 03 May 2025 16:06:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>UART（Universal Asynchronous Receiver/Transmitter，通用异步收发器）是一种<strong>异步串行通信协议</strong>，广泛用于电子设备之间的简单、可靠数据传输。它通过两根信号线（发送端 TX 和接收端 RX）实现全双工通信，无需时钟信号同步，适用于短距离、中低速场景。以下是其核心知识点详解：</p>
]]></content:encoded>
    </item>
    <item>
      <title>ADB</title>
      <link>https://em.rewi.xyz/tools/ADB.html</link>
      <guid>https://em.rewi.xyz/tools/ADB.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">ADB</source>
      <description>1. ADB 定义与作用 全称：Android Debug Bridge（安卓调试桥），是 Android SDK 中的核心工具，用于连接 PC 与 Android 设备（模拟器或真机），实现设备管理、调试及自动化操作。 核心功能： 设备管理：查看设备状态（adb devices）、重启设备（adb reboot）。 应用管理：安装（adb insta...</description>
      <category>tools</category>
      <pubDate>Sat, 03 May 2025 14:43:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2><strong>1. ADB 定义与作用</strong></h2>
<ul>
<li><strong>全称</strong>：Android Debug Bridge（安卓调试桥），是 Android SDK 中的核心工具，用于连接 PC 与 Android 设备（模拟器或真机），实现设备管理、调试及自动化操作。</li>
<li><strong>核心功能</strong>：
<ul>
<li><strong>设备管理</strong>：查看设备状态（<code>adb devices</code>）、重启设备（<code>adb reboot</code>）。</li>
<li><strong>应用管理</strong>：安装（<code>adb install</code>）、卸载应用（<code>adb uninstall</code>）、清除数据（<code>adb shell pm clear</code>）。</li>
<li><strong>文件传输</strong>：PC 与设备间上传/下载文件（<code>adb push/pull</code>）。</li>
<li><strong>日志分析</strong>：抓取系统及应用日志（<code>adb logcat</code>）。</li>
<li><strong>Shell 操作</strong>：进入设备命令行（<code>adb shell</code>），执行 Linux 命令。</li>
<li><strong>性能监控</strong>：查看内存（<code>adb shell dumpsys meminfo</code>）、CPU（<code>adb shell top</code>）、电池信息等。</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Bitbucket</title>
      <link>https://em.rewi.xyz/tools/Bitbucket.html</link>
      <guid>https://em.rewi.xyz/tools/Bitbucket.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">Bitbucket</source>
      <description>Bitbucket 是由 Atlassian 公司开发的 企业级代码托管与协作平台，支持 Git 和 Mercurial 版本控制系统，专注于团队协作与 DevOps 流程集成。以下是其核心功能及与其他平台的对比解析： 一、Bitbucket 的核心功能 1. 代码托管与版本控制 Git 与 Mercurial 支持：灵活选择版本控制系统，满足不同团队...</description>
      <category>tools</category>
      <pubDate>Sat, 03 May 2025 14:50:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Bitbucket 是由 Atlassian 公司开发的 <strong>企业级代码托管与协作平台</strong>，支持 Git 和 Mercurial 版本控制系统，专注于团队协作与 DevOps 流程集成。以下是其核心功能及与其他平台的对比解析：</p>
]]></content:encoded>
    </item>
    <item>
      <title>Docker</title>
      <link>https://em.rewi.xyz/tools/Docker.html</link>
      <guid>https://em.rewi.xyz/tools/Docker.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">Docker</source>
      <description>1. Docker 基础概念 定义：Docker 是一个开源的应用容器化平台，允许开发者将应用及其依赖打包到一个轻量级、可移植的容器中，实现一次构建，随处运行。 核心组件： Docker 引擎（Docker Engine）：包含守护进程（dockerd）、REST API 和 CLI（docker），负责容器生命周期管理。 镜像（Image）：只读模板...</description>
      <category>tools</category>
      <pubDate>Sat, 03 May 2025 14:50:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2><strong>1. Docker 基础概念</strong></h2>
<ul>
<li>
<p><strong>定义</strong>：Docker 是一个开源的应用容器化平台，允许开发者将应用及其依赖打包到一个轻量级、可移植的容器中，实现<strong>一次构建，随处运行</strong>。</p>
</li>
<li>
<p><strong>核心组件</strong>：</p>
<ul>
<li><strong>Docker 引擎</strong>（Docker Engine）：包含守护进程（<code>dockerd</code>）、REST API 和 CLI（<code>docker</code>），负责容器生命周期管理。</li>
<li><strong>镜像（Image）</strong>：只读模板，包含运行应用所需的代码、库和环境配置（如 <code>Dockerfile</code> 定义）。</li>
<li><strong>容器（Container）</strong>：镜像的运行实例，具有独立的文件系统、网络和进程空间。</li>
<li><strong>仓库（Registry）</strong>：存储和分发镜像的服务，如 Docker Hub、阿里云镜像仓库。</li>
</ul>
</li>
<li>
<p><strong>Docker vs 虚拟机</strong>：</p>
<p>| <strong>特性</strong>         | <strong>Docker 容器</strong>                | <strong>虚拟机（VM）</strong>                |<br>
|</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Jenkins</title>
      <link>https://em.rewi.xyz/tools/Jenkins.html</link>
      <guid>https://em.rewi.xyz/tools/Jenkins.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">Jenkins</source>
      <description>Jenkins 是一款开源的持续集成（CI）和持续交付（CD）工具，主要用于自动化软件开发中的构建、测试和部署流程。它由 Java 编写，支持跨平台运行，并通过插件生态与多种开发工具集成，成为 DevOps 领域的核心工具之一。以下是其核心知识点解析： 1. 核心定义与功能 基本定位 Jenkins 是一个自动化服务器，通过监控代码仓库的变更，触发预设...</description>
      <category>tools</category>
      <pubDate>Sat, 03 May 2025 15:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Jenkins 是一款<strong>开源的持续集成（CI）和持续交付（CD）工具</strong>，主要用于自动化软件开发中的构建、测试和部署流程。它由 Java 编写，支持跨平台运行，并通过插件生态与多种开发工具集成，成为 DevOps 领域的核心工具之一。以下是其核心知识点解析：</p>
]]></content:encoded>
    </item>
    <item>
      <title>Jira</title>
      <link>https://em.rewi.xyz/tools/Jira.html</link>
      <guid>https://em.rewi.xyz/tools/Jira.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">Jira</source>
      <description>Jira 是由澳大利亚软件公司 Atlassian 开发的一款 项目管理与问题跟踪工具，最初专注于软件开发领域的缺陷追踪，后扩展为支持全流程项目管理的平台。其核心价值在于帮助团队高效协作、跟踪任务进度，并通过灵活的自定义功能适应不同行业和项目管理方法。以下是其核心功能、应用场景及优缺点的详细解析： 1. 核心功能与特性 (1) 任务与问题跟踪 支持创建...</description>
      <category>tools</category>
      <pubDate>Sat, 03 May 2025 15:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Jira 是由澳大利亚软件公司 <strong>Atlassian</strong> 开发的一款 <strong>项目管理与问题跟踪工具</strong>，最初专注于软件开发领域的缺陷追踪，后扩展为支持全流程项目管理的平台。其核心价值在于帮助团队高效协作、跟踪任务进度，并通过灵活的自定义功能适应不同行业和项目管理方法。以下是其核心功能、应用场景及优缺点的详细解析：</p>
]]></content:encoded>
    </item>
    <item>
      <title>Polyspace</title>
      <link>https://em.rewi.xyz/tools/Polyspace.html</link>
      <guid>https://em.rewi.xyz/tools/Polyspace.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">Polyspace</source>
      <description>Polyspace 是由 MathWorks 公司开发的一款静态代码分析与形式化验证工具，专注于检测和预防软件中的运行时错误（Run-time Errors），尤其适用于高可靠性要求的嵌入式系统和安全关键领域（如航空航天、汽车、医疗设备等）。其核心价值在于通过数学方法验证代码的安全性，无需实际运行程序即可发现潜在缺陷。以下是其核心特性和应用场景的详细解...</description>
      <category>tools</category>
      <pubDate>Sat, 03 May 2025 15:03:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Polyspace 是由 MathWorks 公司开发的一款<strong>静态代码分析与形式化验证工具</strong>，专注于检测和预防软件中的运行时错误（Run-time Errors），尤其适用于高可靠性要求的嵌入式系统和安全关键领域（如航空航天、汽车、医疗设备等）。其核心价值在于通过数学方法验证代码的安全性，无需实际运行程序即可发现潜在缺陷。以下是其核心特性和应用场景的详细解析：</p>
]]></content:encoded>
    </item>
    <item>
      <title>需求管理工具</title>
      <link>https://em.rewi.xyz/tools/%E9%9C%80%E6%B1%82%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html</link>
      <guid>https://em.rewi.xyz/tools/%E9%9C%80%E6%B1%82%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">需求管理工具</source>
      <description>Perforce、IBM、Atlassian 是三家在软件行业具有重要影响力的公司，它们各自以其特定的产品和服务闻名。 Perforce：Perforce是一家提供版本控制系统和协作工具的公司。它的同名产品Perforce是一种广泛用于软件开发的版本控制工具，特别适合需要处理大型代码库和二进制文件的团队。除了核心的版本控制功能外，Perforce还提供...</description>
      <category>tools</category>
      <pubDate>Sat, 03 May 2025 15:53:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Perforce、IBM、Atlassian 是三家在软件行业具有重要影响力的公司，它们各自以其特定的产品和服务闻名。</p>
<ol>
<li>
<p><strong>Perforce</strong>：Perforce是一家提供版本控制系统和协作工具的公司。它的同名产品Perforce是一种广泛用于软件开发的版本控制工具，特别适合需要处理大型代码库和二进制文件的团队。除了核心的版本控制功能外，Perforce还提供了许多其他开发工具和服务，例如Helix Core、Helix Swarm等，旨在帮助团队更高效地进行协作和代码管理。</p>
</li>
<li>
<p><strong>IBM（国际商业机器公司）</strong>：IBM是一家总部位于美国纽约阿蒙克的跨国科技企业集团。成立于1911年的IBM，在计算机硬件、软件、IT服务和咨询等领域都有着深厚的积累。IBM发明了众多关键技术，包括但不限于磁盘驱动器、自动柜员机（ATM）、硬盘驱动器、通用产品代码（UPC条码）、SQL编程语言、关系型数据库管理系统（RDBMS）、Fortran编程语言等。IBM Watson是其著名的人工智能平台之一。</p>
</li>
<li>
<p><strong>Atlassian</strong>：Atlassian是一家澳大利亚软件公司，主要为软件开发者和项目管理团队提供专业工具。它最著名的产品包括Jira（问题追踪和项目管理工具）、Confluence（文档管理和团队协作工具）、Bitbucket（代码托管服务）以及Trello（轻量级的任务管理工具）。Atlassian的产品设计旨在促进团队之间的合作与沟通，提高工作效率。</p>
</li>
</ol>
<p>这三家公司通过各自的专业领域对全球的技术发展做出了贡献，并持续影响着软件开发、信息技术和企业解决方案的发展方向。</p>
]]></content:encoded>
    </item>
    <item>
      <title>DV实验</title>
      <link>https://em.rewi.xyz/%E6%B5%8B%E8%AF%95/DV%E5%AE%9E%E9%AA%8C.html</link>
      <guid>https://em.rewi.xyz/%E6%B5%8B%E8%AF%95/DV%E5%AE%9E%E9%AA%8C.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">DV实验</source>
      <description>DV实验详解：设计验证的核心环节 一、DV实验的定义 DV（Design Verification，设计验证）实验 是产品开发过程中验证设计方案是否符合预设技术要求和标准的系统性测试阶段。其核心目的是确保产品设计在量产前的可靠性、安全性和功能性，覆盖硬件、软件及系统集成，广泛应用于汽车、电子、航空航天等领域。 二、DV实验的目的 验证设计合理性：确认产...</description>
      <category>test</category>
      <pubDate>Sun, 04 May 2025 16:34:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2><strong>DV实验详解：设计验证的核心环节</strong></h2>
]]></content:encoded>
    </item>
    <item>
      <title>Altium Designer</title>
      <link>https://em.rewi.xyz/hardware/AltiumDesigner.html</link>
      <guid>https://em.rewi.xyz/hardware/AltiumDesigner.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">Altium Designer</source>
      <description>Altium Designer 画原理图</description>
      <category>hardware</category>
      <pubDate>Sat, 03 May 2025 03:29:51 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>Altium（前称Protel International Limited）是一家专注于电子设计自动化（EDA）领域的软件公司，成立于1985年，总部位于澳大利亚塔斯马尼亚岛的霍巴特，后迁至美国加利福尼亚州。其核心产品为<strong>Altium Designer</strong>，一款广泛应用于印刷电路板（PCB）设计的专业工具，同时近年来通过云平台<strong>Altium 365</strong>进一步扩展了协作与全流程管理能力。</p>
</div>
<h2>核心信息解析</h2>
<ol>
<li>
<p><strong>公司背景与定位</strong></p>
<ul>
<li>Altium最初以Protel系列软件起家，专注于为PCB设计提供辅助工具。其DOS版本的Protel在1980年代被广泛接受，随后逐步扩展至原理图设计、自动布线、信号完整性分析等领域。</li>
<li>2024年，Altium被日本半导体巨头瑞萨电子以91亿澳元全资收购，成为其子公司，旨在整合EDA工具与半导体设计能力。</li>
</ul>
</li>
<li>
<p><strong>核心产品与技术</strong></p>
<ul>
<li><strong>Altium Designer</strong>：
<ul>
<li>支持3D PCB建模、自动化布线、多板装配设计、实时BOM管理等功能，提供从原理图到制造文档的一体化设计环境。</li>
<li>最新版本（如Altium Designer 22）新增云端协作、多团队文件共享、智能供应链集成等特性。</li>
</ul>
</li>
<li><strong>Altium 365</strong>：
<ul>
<li>云平台实现设计流程的数字化协作，支持元器件管理、版本控制及与制造商的直接对接，提升设计效率。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>技术演进与市场地位</strong></p>
<ul>
<li><strong>历史版本</strong>：从1985年的DOS版Protel到2006年首推3D PCB设计的Altium Designer 6.0，再到集成ECAD/MCAD的2008年版本，技术持续迭代。</li>
<li><strong>市场覆盖</strong>：在中国，约73%的工程师和80%的电子工程专业学生使用其工具（尽管正版率仅3%），成为行业教育及企业招聘的标配。</li>
<li><strong>财务与战略</strong>：收入中75%来自订阅模式，目标在2025年实现5亿美元营收及10万订阅用户；2021年剥离嵌入式软件部门，专注云转型。</li>
</ul>
</li>
<li>
<p><strong>行业影响与收购意义</strong></p>
<ul>
<li>瑞萨电子的收购将Altium的EDA工具与其半导体设计能力结合，加速从芯片到PCB的系统级创新，尤其在汽车电子、AI硬件等领域。</li>
<li>Altium的加入使瑞萨能够提供“设计-制造-测试”全链条服务，强化其在全球半导体产业链中的竞争力。</li>
</ul>
</li>
</ol>
<h2>总结</h2>
<p>Altium是PCB设计领域的标杆企业，其工具链覆盖硬件设计全流程，技术积累深厚。通过云平台和战略收购，Altium正从传统EDA工具商转型为支持智能系统设计的数字化平台服务商，未来在半导体与电子行业的整合中将持续扮演关键角色。</p>
<h2>参考资料</h2>
<ul>
<li><a href="https://blog.csdn.net/qq_29350001/article/details/78903424" target="_blank" rel="noopener noreferrer">Altium Designer -- PCB布线面试题（转）</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>FPD-Link</title>
      <link>https://em.rewi.xyz/protocol/FPD-Link.html</link>
      <guid>https://em.rewi.xyz/protocol/FPD-Link.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">FPD-Link</source>
      <description>FPD-Link IV</description>
      <category>protocol</category>
      <pubDate>Sat, 03 May 2025 10:48:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>FPD-Link IV 是由德州仪器（Texas Instruments, TI）开发的一种高速串行器/解串器（SerDes）接口技术，专为汽车电子系统设计，旨在实现高带宽视频、音频和数据传输，同时支持复杂拓扑结构和恶劣电磁环境下的稳定通信。以下是其核心特性及应用的详细解析：</p>
]]></content:encoded>
    </item>
    <item>
      <title>Simulink</title>
      <link>https://em.rewi.xyz/%E6%B5%8B%E8%AF%95/Shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E5%8C%96.html</link>
      <guid>https://em.rewi.xyz/%E6%B5%8B%E8%AF%95/Shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E5%8C%96.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">Simulink</source>
      <description>在嵌入式开发领域，Shell脚本自动化是提升效率、简化重复性任务的关键技术，尤其适用于系统配置、测试流程、部署维护等场景。以下从技术要点、应用场景及简历优化角度解析其核心价值： 一、Shell脚本自动化的技术要点 1. 核心能力 流程控制：通过 if/else、case、for/while 实现条件判断与循环。 命令组合：调用系统工具（grep、awk...</description>
      <category>test</category>
      <pubDate>Tue, 29 Apr 2025 13:40:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>在嵌入式开发领域，<strong>Shell脚本自动化</strong>是提升效率、简化重复性任务的关键技术，尤其适用于系统配置、测试流程、部署维护等场景。以下从技术要点、应用场景及简历优化角度解析其核心价值：</p>
]]></content:encoded>
    </item>
    <item>
      <title>USB驱动</title>
      <link>https://em.rewi.xyz/OS/Linux/USB%E9%A9%B1%E5%8A%A8.html</link>
      <guid>https://em.rewi.xyz/OS/Linux/USB%E9%A9%B1%E5%8A%A8.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">USB驱动</source>
      <description>相关信息 USB（通用串行总线）驱动用于支持通过 USB 接口连接的设备（如键盘、摄像头等）。在 Linux 中，USB 驱动分为主机控制器驱动（管理 USB 总线）和设备驱动（管理具体设备）。 开发流程 设备 ID 注册 通过 udev 规则设置设备的 vendor_id 和 product_id，确保内核能识别设备并加载对应驱动。 驱动框架搭建 定...</description>
      <category>OS</category>
      <category>Linux</category>
      <pubDate>Tue, 28 Feb 2023 19:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>USB（通用串行总线）驱动用于支持通过 USB 接口连接的设备（如键盘、摄像头等）。在 Linux 中，USB 驱动分为主机控制器驱动（管理 USB 总线）和设备驱动（管理具体设备）。</p>
</div>
<h2>开发流程</h2>
<h3>设备 ID 注册</h3>
<p>通过 udev 规则设置设备的 vendor_id 和 product_id，确保内核能识别设备并加载对应驱动。</p>
<h3>驱动框架搭建</h3>
<p>定义 usb_driver 结构体，包含 .probe()、.disconnect() 等回调函数。</p>
<p>使用 usb_register() 注册驱动到内核7。</p>
<h3>数据传输实现</h3>
<p>通过 usb_bulk_msg() 或 usb_control_msg() 实现设备读写操作。</p>
<h3>中断处理</h3>
<p>注册中断处理函数以响应设备事件（如数据传输完成）。</p>
<h3>模块加载与测试</h3>
<p>编译为 .ko 模块，通过 insmod 加载并验证功能。</p>
<h2>参考资料</h2>
<ul>
<li><a href="https://www.dbs724.com/148143.html" target="_blank" rel="noopener noreferrer">https://www.dbs724.com/148143.html</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>磁盘操作</title>
      <link>https://em.rewi.xyz/OS/Linux/%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C.html</link>
      <guid>https://em.rewi.xyz/OS/Linux/%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">磁盘操作</source>
      <description>一、linux 制作分区img文件+官方系统镜像扩容 提示 可在Linux虚拟机操作，不使用共享文件夹速度快很多 共享文件夹参考：共享文件夹 sudo mount -t cifs -o username=rewi,password= //10.162.130.10/share ~/share https://blog.csdn.net/leacock1...</description>
      <category>OS</category>
      <pubDate>Thu, 01 May 2025 15:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>一、linux 制作分区img文件+官方系统镜像扩容</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>可在Linux虚拟机操作，不使用共享文件夹速度快很多<br>
共享文件夹参考：共享文件夹<br>
sudo mount -t cifs -o username=rewi,password= <a href="//10.162.130.10/share" target="_blank" rel="noopener noreferrer">//10.162.130.10/share</a> ~/share</p>
</div>
<p><a href="https://blog.csdn.net/leacock1991/article/details/113575966" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/leacock1991/article/details/113575966</a><br>
<a href="https://blog.csdn.net/talkxin/article/details/50456282" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/talkxin/article/details/50456282</a></p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p><a href="https://cloud.tencent.com/developer/article/1175328" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/developer/article/1175328</a><br>
不要用fdsik处理gpt分区，也不要用gdisk处理mbr分区</p>
</div>
<h3>1. 查看官方镜像分区情况</h3>
<p>需要在官网下载一个烧录用的镜像文件，如：重命名后的radxa-cm3-io-ubuntu-server-gpt.img</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看 img 文件情况</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> fdisk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -l</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> radxa-cm3-io-ubuntu-server-gpt.img</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> parted</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> radxa-cm3-io-ubuntu-server-gpt.img</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> print</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>Linux001</figcaption></figure>
<h3>2. 一般官方镜像空间较小，需要扩容</h3>
<h4>2.1 拷贝或者直接重命名 一份官方镜像</h4>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 将 rsync 换成 cp 也可 </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rsync</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -vauP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> radxa-cm3-io-ubuntu-server-gpt.img</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rk3566-cm3Ubuntu.img</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>命令 加上<code>time</code> 可查看时间<br>
</p>
<h4>2.2 在核心板，查看待备份系统的磁盘使用</h4>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">df</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -h</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><figcaption>Linux003</figcaption></figure>
<h4>2.3 新镜像增加大小</h4>
<p><a href="https://blog.csdn.net/wxwpxh/article/details/50532586" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/wxwpxh/article/details/50532586</a><br>
<a href="https://wiki.radxa.com/Rock3/dev/Debian" target="_blank" rel="noopener noreferrer">https://wiki.radxa.com/Rock3/dev/Debian</a><br>
<a href="https://www.cnblogs.com/machangwei-8/p/10353628.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/machangwei-8/p/10353628.html</a><br>
<a href="https://mlog.club/article/3546393" target="_blank" rel="noopener noreferrer">https://mlog.club/article/3546393</a><br>
<a href="https://blog.csdn.net/zhanghaiyang9999/article/details/82952112" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/zhanghaiyang9999/article/details/82952112</a></p>
<p>要比使用情况大一点，如：比5G大1G ~ 6G</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 快速创建镜像 如：6G --&gt; 文件系统空间未检测真实大小？？</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo dd if=/dev/zero of=rk3566-cm3Ubuntu.img seek=6G bs=1 count=1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 就是在文件后面追加 5G 大小 --&gt; 现在大小 = 原大小+5G</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> if=/dev/zero</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> of=rk3566-cm3Ubuntu.img</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> bs=1MiB</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> conv=notrunc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> oflag=append</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> count=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5120</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>Linux004</figcaption></figure>
<figure><figcaption>Linux005</figcaption></figure>
<h4>2.4 给新镜像文件系统分区增加空间</h4>
<ul>
<li>修正分区表信息<br>
<a href="https://mlog.club/article/2581532" target="_blank" rel="noopener noreferrer">https://mlog.club/article/2581532</a><br>
<a href="https://mlog.club/article/2824620" target="_blank" rel="noopener noreferrer">https://mlog.club/article/2824620</a></li>
</ul>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo sfdisk -d rk3566-cm3Ubuntu.img &gt; PT_img.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> gdisk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rk3566-cm3Ubuntu.img</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo sfdisk -d rk3566-cm3Ubuntu.img &gt; PT_img.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> gdisk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rk3566-cm3Ubuntu.img</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># output Text</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">rewi@rewi-ubuntu:~/share$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> gdisk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rk3566-cm3Ubuntu.img</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">GPT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> fdisk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (gdisk) version 1.0.3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Warning!</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Problem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> closing</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> file!</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Partition</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> table</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> scan:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  MBR:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> protective</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  BSD:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> not</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> present</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  APM:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> not</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> present</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  GPT:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> present</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Found</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> valid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GPT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> protective</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> MBR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">using</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GPT.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (? </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> help</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">): p</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Disk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rk3566-cm3Ubuntu.img:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 14392010</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sectors,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 6.9</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GiB</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Sector</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (logical): 512 bytes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Disk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> identifier</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (GUID): 9AF3DD72-EBB1-4852-99EE-854B425B8432</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Partition</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> table</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> holds</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> up</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> to</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 128</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> entries</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Main</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> partition</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> table</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> begins</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sector</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> and</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ends</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sector</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 33</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">First</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> usable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sector</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 34,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> last</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> usable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sector</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> is</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3906216</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Partitions</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> will</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> be</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> aligned</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 2048-sector</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> boundaries</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Total</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> free</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> space</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> is</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 32734</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sectors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (16.0 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">MiB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Number</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  Start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (sector)    End (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)  Size       Code  Name</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">   1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">           32768</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">         1081343</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">   512.0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> MiB</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">   EF00</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  boot</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">   2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">         1081344</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">         3906216</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">   1.3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GiB</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">     8300</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  rootfs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (? </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> help</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">): v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Problem:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> The</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> secondary</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> header's self-pointer indicates that it doesn't</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> reside</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> end</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> disk.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> If</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> you've added a disk to a RAID array, use the 'e'</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">option on the experts'</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> menu</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> adjust</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> secondary</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> header's and partition</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">table's</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> locations.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Identified</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> problems!</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (? </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> help</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">): w</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Warning!</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Secondary</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> header</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> placed</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> too</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> early</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> disk!</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Do</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> you</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> want</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> to</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">correct</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> this</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> problem?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (Y/N): Y</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Have</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> moved</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> second</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> header</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> and</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> partition</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> table</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> correct</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> location.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Final</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> checks</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> complete.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> About</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> write</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GPT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> data.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> THIS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> WILL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> OVERWRITE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> EXISTING</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">PARTITIONS!!</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Do</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> you</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> want</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> proceed?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (Y/N): Y</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">OK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">writing</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> new</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GUID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> partition</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> table</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (GPT) to rk3566-cm3Ubuntu.img.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Warning:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> The</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kernel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> still</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> using</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> old</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> partition</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> table.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">The</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> new</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> table</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> will</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> be</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> used</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> next</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> reboot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> or</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> after</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> you</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> partprobe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">or</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kpartx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">The</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> operation</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> has</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> completed</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> successfully.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">rewi@rewi-ubuntu:~/share$</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://blog.csdn.net/s1429583654/article/details/127407015" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/s1429583654/article/details/127407015</a></p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 刷新分区表</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> partprobe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rk3566-cm3Ubuntu.img</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>Linux006</figcaption></figure>
<ul>
<li>将剩余空间给分区2<br>
<a href="https://blog.csdn.net/qq_45443704/article/details/122136074" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_45443704/article/details/122136074</a><br>
❌最终大小，-1 表示磁盘大小迁移1MB（也就是磁盘大小-1MB）<br>
✔️留出1G未分配空间</li>
</ul>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> parted</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rk3566-cm3Ubuntu.img</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><figcaption>Linux007</figcaption></figure>
<h4>2.5 查看新镜像分区情况</h4>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> parted</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rk3566-cm3Ubuntu.img</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> print</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo fdisk -l rk3566-cm3Ubuntu.img</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>Linux008</figcaption></figure>
<h3>3.（重要）文件系统大小调整</h3>
<h4>3.1 将分区和 loop设备建立联系</h4>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># dosfstools：fat32分区格式化工具</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># dump：dump &amp; restore 备份工具</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># parted &amp; kpartx：虚拟磁盘工具</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dosfstools</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dump</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> parted</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kpartx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">loopdevice</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> losetup </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">-f</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rk3566-cm3Ubuntu.img`</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">device</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kpartx </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">-va</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> $loopdevice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> sed</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -E</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 's/.*(loop[0-9])p.*/\1/g' </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> head</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">device</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/dev/mapper/</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">device</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">partBoot</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">device</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">p1"</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">partRoot</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">device</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">p2"</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> losetup</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -l</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># lsblk</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br>
</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">####3.2 挂载分区</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">https://blog.csdn.net/Zhang_Pro/article/details/128517982</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 选择一个目录</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/share</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 建立挂载点</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rootfs</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 挂载</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mount</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /dev/mapper/loop30p2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rootfs/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">![Linux011](</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">./images/Linux011.png</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">```</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">bash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">3.3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 查看挂载情况</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">```</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">bash</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">![Linux012](</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">./images/Linux012.png</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">####3.4 发现容量异常，解决办法</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">```</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">bash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">https://blog.csdn.net/Linux_kiss/article/details/120859937</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">https://www.cnblogs.com/hgzero/p/14193427.html</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">https://blog.csdn.net/wj78080458/article/details/83851147</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> resize2fs </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">-p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /dev/mapper/loop30p2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">df</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -Th</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">!</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[Linux013](</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">./images/Linux013.png</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">!</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[Linux014](</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">./images/Linux014.png</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">####3.5 卸载分区</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">```</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">bash</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 挂载点</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> umount</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /dev/mapper/loop30p2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 虚拟磁盘</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kpartx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -d</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> $loopdevice</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> losetup</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -d</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> $loopdevice</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">![Linux015](</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">./images/Linux015.png</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">二、使用新img文件备份系统</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">此部分在待备份的操作系统中操作，速度也很快</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 新增硬盘或直接备份</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">挂载一个保存镜像的磁盘（方便复制出来）:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> U盘或者使用PC共享文件夹：共享文件夹</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">如果核心板空间足够则不需要，备份好了通过网络传到电脑保存效果一样</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">在需要的位置创建文件夹，用于挂载镜像，如：share</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> share</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo mount -t cifs -o username=rewi,password= //10.162.130.10/share ~/share</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/share</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 将分区和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> loop设备建立联系</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 方法一</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># parted &amp; kpartx：虚拟磁盘工具</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> parted</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kpartx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">loopdevice</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> losetup </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">-f</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rk3566-cm3Ubuntu.img`</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">device</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kpartx </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">-va</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> $loopdevice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> sed</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -E</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 's/.*(loop[0-9])p.*/\1/g' </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> head</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">device</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/dev/mapper/</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">device</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">partBoot</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">device</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">p1"</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">partRoot</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">device</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">p2"</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> losetup</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -l</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># lsblk</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">![Linux016](</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">./images/Linux016.png</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 方法二</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">···bash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> （跳过）方法二</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> 查看</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> img</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 文件情况</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> fdisk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -l</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rk3566-cm3Ubuntu.img</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">可知一共有两个区，以及各区相关信息。由于一共有两个区后面需要和两个loop设置建立联系。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">注意记录下：</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 扇区大小</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 512</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 字节</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ，各分区起止扇区编号rk3566-cm3Ubuntu.img1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">32768</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  1081343</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  1048576</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">和rk3566-cm3Ubuntu.img2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">1081344</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 12580959</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 11499616</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">![Linux017](</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">./images/Linux017.png</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">这里需要进行一点计算</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">16777216</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 32768</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 512</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ；</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 536870912</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1048576</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 512</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> （1081343</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2048</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 1）</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 512</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> （注意：</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> +1）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># -o （起始扇区 * 扇区大小）--sizelimit （扇区数量 * 扇区大小） 字节</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> losetup</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -f</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -o</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 16777216</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --sizelimit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 536870912</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rk3566-cm3Ubuntu.img</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> losetup</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -f</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -o</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 553648128</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  rk3566-cm3Ubuntu.img</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看是否成功</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> losetup</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -l</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># lsblk</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">![Linux018](</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">./images/Linux018.png</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> （可能导致UUID不匹配，跳过）格式化分区</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 方法一</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#boot分区用fat32进行格式化</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo mkfs.vfat $partBoot</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo mkfs.ext4 $partRoot</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 方法二</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo mkfs.fat /dev/loop5</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sudo mkfs.ext4 /dev/loop32</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> （跳过）检查</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">https://www.cnblogs.com/pyng/p/11820112.html</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> fsck.ext4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -C0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /dev/loop1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>内存对齐</title>
      <link>https://em.rewi.xyz/advance/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html</link>
      <guid>https://em.rewi.xyz/advance/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">内存对齐</source>
      <description>内存对齐的意义 内存对齐指的是数据在内存中的存放地址按照一定的规则进行排列，通常这个规则是基于数据类型的大小。 内存对齐是计算机系统中数据在内存中的存储方式遵循特定地址倍数规则的机制。 内存对齐的主要意义在于提高内存访问效率和确保硬件能够正确读取数据。 其核心意义在于： 硬件性能优化 现代 CPU 从内存中读取数据时，通常以对齐的字长（如 4 字节、8...</description>
      <category>hardware</category>
      <pubDate>Wed, 30 Apr 2025 10:43:00 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">内存对齐的意义</p>
<p><strong>内存对齐</strong>指的是数据在内存中的存放地址按照一定的规则进行排列，通常这个规则是基于数据类型的大小。<br>
内存对齐是计算机系统中数据在内存中的存储方式遵循特定地址倍数规则的机制。<br>
内存对齐的主要意义在于提高内存访问效率和确保硬件能够正确读取数据。<br>
其核心意义在于：</p>
<ol>
<li>
<p><strong>硬件性能优化</strong><br>
现代 CPU 从内存中读取数据时，通常以<strong>对齐的字长</strong>（如 4 字节、8 字节）为单位进行操作。</p>
<ul>
<li><strong>对齐访问</strong>：若数据地址是字长的整数倍（如 <code>0x00</code>, <code>0x04</code>, <code>0x08</code>），CPU 可通过单次内存操作完成读取。</li>
<li><strong>非对齐访问</strong>：若数据地址不符合对齐规则（如 <code>0x03</code>），CPU 可能需要多次访问内存并拼接数据，显著降低性能，甚至在某些架构（如 ARM）中触发硬件异常。</li>
</ul>
</li>
<li>
<p><strong>指令集兼容性</strong><br>
部分指令（如 SIMD 指令 <code>SSE</code>、<code>AVX</code>）要求数据必须对齐到特定边界（如 16 字节、32 字节），否则无法执行。</p>
</li>
<li>
<p><strong>缓存效率</strong><br>
对齐数据更可能落入同一缓存行（Cache Line），减少缓存未命中（Cache Miss），提升缓存局部性（Cache Locality）。</p>
</li>
<li>
<p><strong>跨平台一致性</strong><br>
不同硬件（如 x86、ARM）对非对齐访问的容忍度不同，对齐可确保代码在不同平台的行为一致。</p>
</li>
<li>
<p><strong>避免错误</strong>：<br>
某些硬件架构（如SPARC）要求数据必须对齐，否则会导致硬件异常。即使对于那些不强制要求数据对齐的架构（如x86），未对齐的访问也会导致性能下降，因为它可能需要两次内存访问来获取完整的数据。</p>
</li>
</ol>
</div>
<h2><strong>内存对齐的实现方式</strong></h2>
<p>实现内存对齐的方式主要依赖于编译器的行为以及编程语言的支持。以下是一些常见的实现方法：</p>
<h3><strong>1. 编译器自动对齐</strong></h3>
<p>现代编译器通常会自动为变量和结构体成员进行适当的对齐。例如，在C/C++中，当你定义一个结构体时，编译器会根据每个成员的数据类型自动插入填充字节以确保每个成员都符合其自然对齐的要求。</p>
<p>编译器在编译代码时，默认会根据目标平台的对齐规则调整数据布局。例如在 C/C++ 中：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Example {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // 1 字节</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">       // 4 字节（通常对齐到 4 字节地址）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> c;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 8 字节（通常对齐到 8 字节地址）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器会自动插入<strong>填充字节（Padding）</strong> 来满足对齐要求。上述结构体的实际内存布局可能为：</p>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>| a | 填充3字节 | b (4字节) | 填充4字节 | c (8字节) |</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>总大小可能为 <strong>16 字节</strong>（而非 <code>1+4+8=13</code> 字节）。</p>
]]></content:encoded>
    </item>
    <item>
      <title>深圳市夏瑞科技-深圳市夏瑞智能</title>
      <link>https://em.rewi.xyz/interview/12-%E6%B7%B1%E5%9C%B3%E5%B8%82%E5%A4%8F%E7%91%9E%E7%A7%91%E6%8A%80.html</link>
      <guid>https://em.rewi.xyz/interview/12-%E6%B7%B1%E5%9C%B3%E5%B8%82%E5%A4%8F%E7%91%9E%E7%A7%91%E6%8A%80.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">深圳市夏瑞科技-深圳市夏瑞智能</source>
      <description>自我介绍 内存对齐的概念，结构体占用多少字节？ 内存对齐是指为了提高访问速度，数据在内存中的存放地址是按照一定的规则进行排列的。不同的数据类型有不同的对齐要求。 结构体占用的字节数不仅取决于其成员变量的大小，还受到内存对齐的影响。 线程与进程的区别？ 进程：操作系统资源分配的基本单位，拥有独立的内存空间。 线程：程序执行的基本单位，是进程内的一个执行路...</description>
      <category>interview</category>
      <pubDate>Wed, 30 Apr 2025 07:40:50 GMT</pubDate>
      <content:encoded><![CDATA[<h2>自我介绍</h2>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>放弃模板，想到什么说什么，丢弃背诵的感觉</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h2>内存对齐的概念，结构体占用多少字节？</h2>
<ul>
<li><strong>内存对齐</strong>是指为了提高访问速度，数据在内存中的存放地址是按照一定的规则进行排列的。不同的数据类型有不同的对齐要求。</li>
<li>结构体占用的字节数不仅取决于其成员变量的大小，还受到内存对齐的影响。</li>
</ul>
<h2>线程与进程的区别？</h2>
<ul>
<li><strong>进程</strong>：操作系统资源分配的基本单位，拥有独立的内存空间。</li>
<li><strong>线程</strong>：程序执行的基本单位，是进程内的一个执行路径，共享所属进程的资源。</li>
</ul>
<h2>面向对象三要素？</h2>
<ul>
<li>封装、继承、多态。</li>
</ul>
<h2>对公司有什么了解的或者期望的？看下有没有合作的可能</h2>
<ul>
<li>回答应基于对公司背景、产品或服务的研究，表达出希望加入并贡献自己力量的愿望。</li>
</ul>
<h2>TCP三次握手、四次挥手？</h2>
<ul>
<li>三次握手用于建立连接，确保双方都准备好进行通信。</li>
<li>四次挥手则用于关闭连接，确保双方都能安全地结束会话。</li>
</ul>
<h2>ODB接口听说过没有？</h2>
<ul>
<li>可能是指OBD（On-Board Diagnostics），车辆自诊断系统接口，常用于读取汽车故障码等信息。注意题目中提到的单位错误。</li>
</ul>
<h2>有没有视频相关的经验？音视频、摄像头</h2>
<ul>
<li>根据个人经验回答，重点在于处理音视频流的经验。</li>
</ul>
<h2>有写过触摸屏的驱动吗？还是只是触摸屏驱动已经好了，直接用数据，还是点阵数据？</h2>
<ul>
<li>解释是否参与了触摸屏驱动的开发，或是如何使用已有的驱动和数据。</li>
</ul>
<h2>触摸了，它主要发的什么数据给你，是几个手指，是左划右滑这些是什么样的？</h2>
<ul>
<li>描述触摸事件的数据结构，比如触点坐标、动作类型等。</li>
</ul>
<h2>IC给出的数据是要你去解析，还是驱动已经解析好了?</h2>
<ul>
<li>讨论IC输出的数据形式以及解析工作的负责方。</li>
</ul>
<h2>解析的算法是谁给你的？</h2>
<ul>
<li>指明算法来源，注意题目中的误解情况说明。</li>
</ul>
<h2>树莓派用的什么数据库？</h2>
<ul>
<li>树莓派可以使用多种数据库，如SQLite、MySQL等，具体取决于项目需求。</li>
</ul>
<h2>远程监控，视频监控，是显示出来，还是保存，还是再做别的处理？</h2>
<ul>
<li>解释远程监控系统的不同功能模块，包括实时显示、录像存储、行为分析等。</li>
</ul>
<h2>给我讲讲谷歌protobuf吧？</h2>
<ul>
<li>Protobuf是一种高效的结构化数据存储格式，可用于序列化对象，适合用于数据交换和存储。</li>
</ul>
<h2>它本身是一种什么，是协议吗？</h2>
<ul>
<li>Protobuf不是网络协议，而是一种语言中立、平台无关、可扩展的序列化结构数据的方式。</li>
</ul>
<h2>SerDes（串行解串器）是你自己写的驱动还是只是用的？</h2>
<ul>
<li>解释SerDes的用途及驱动使用的具体情况。</li>
</ul>
<p>--<br>
以下是将你提供的 JSON 数据结构转换为 <strong>Markdown</strong> 的格式，保留了层级关系和部分注释说明：</p>
]]></content:encoded>
    </item>
    <item>
      <title>DevOps</title>
      <link>https://em.rewi.xyz/project/DevOps.html</link>
      <guid>https://em.rewi.xyz/project/DevOps.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">DevOps</source>
      <description>DevOps</description>
      <category>project</category>
      <pubDate>Wed, 30 Apr 2025 07:40:50 GMT</pubDate>
      <content:encoded><![CDATA[<h2>相关软件</h2>
<p>Ubuntu 22.04.3 LTS (Jammy Jellyfish) 64位<br>
安装JAVA环境：javase8<br>
Docker<br>
portainer<br>
MysqL 8.0 : 默认端口号：3306<br>
Jira : 默认端口号：8080</p>
<h2><strong>1. 定义与核心理念</strong></h2>
<ul>
<li>
<p><strong>定义</strong>：<br>
<strong>DevOps</strong>（Development + Operations）是一套<strong>软件开发与运维协作的方法论</strong>，旨在通过<strong>自动化工具、文化变革和流程优化</strong>，缩短软件交付周期，提升系统可靠性与团队协作效率。其核心是<strong>打破开发（Dev）与运维（Ops）的壁垒</strong>，实现从代码编写到生产部署的无缝衔接。</p>
</li>
<li>
<p><strong>核心理念</strong>：</p>
<ul>
<li><strong>持续交付</strong>（Continuous Delivery）：快速、频繁地发布高质量软件。</li>
<li><strong>自动化一切</strong>（Automation）：减少人工干预，提升流程效率。</li>
<li><strong>协作文化</strong>（Collaboration）：开发、运维、测试团队共享责任与目标。</li>
<li><strong>反馈驱动</strong>（Feedback）：通过监控与日志快速定位问题，持续改进。</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>做过的小工具</title>
      <link>https://em.rewi.xyz/project/%E5%81%9A%E8%BF%87%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7.html</link>
      <guid>https://em.rewi.xyz/project/%E5%81%9A%E8%BF%87%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">做过的小工具</source>
      <description>做过的小工具</description>
      <category>project</category>
      <category>tools</category>
      <pubDate>Wed, 30 Apr 2025 07:40:50 GMT</pubDate>
      <content:encoded><![CDATA[<h2>测试上位机BOEVXAPyTester软件--PyQt5</h2>
<h2>温度记录程序--PyQt5~~~2022年</h2>
<p>背景：实验室需要记录温度变化情况。后续导出数据到EXCEL中，用于绘制温度变化曲线并分析。<br>
方案：使用公司设计的测试板，STM32将显示屏的温度获取到，传到SOC，记录到数据库中。<br>
技术点：MCU与SOC通信数据格式使用的是Protobuf，通信协议使用的是UART，数据库使用的是Sqlite。 使用PyQt5 在实验的显示屏上显示温度数据。<br>
自己设计了数据表，一个保存程序错误信息，另一个保存温度数据。<br>
串口重连机制，反复启动程序防止数据库被覆盖机制。</p>
<p>| hex_temp | dec_temp | brightness | create_time |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>Simulink</title>
      <link>https://em.rewi.xyz/advance/Simulink.html</link>
      <guid>https://em.rewi.xyz/advance/Simulink.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">Simulink</source>
      <description>相关信息 Simulink 是 MathWorks 公司开发的一款图形化建模和仿真环境，广泛应用于控制系统、信号处理、通信系统和嵌入式系统的设计与验证。它是 MATLAB 的扩展工具，通过提供一个直观的图形界面，允许用户以拖放的方式创建模型，进行系统设计、仿真和代码生成。 这是一个结构化的功能描述树，看起来像是一个软件工具（如 Simulink 或类似...</description>
      <category>MathWorks</category>
      <pubDate>Tue, 29 Apr 2025 13:40:00 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>Simulink 是 MathWorks 公司开发的一款图形化建模和仿真环境，广泛应用于控制系统、信号处理、通信系统和嵌入式系统的设计与验证。它是 MATLAB 的扩展工具，通过提供一个直观的图形界面，允许用户以拖放的方式创建模型，进行系统设计、仿真和代码生成。</p>
</div>
<p>这是一个结构化的功能描述树，看起来像是一个软件工具（如 <strong>Simulink</strong> 或类似的建模与仿真平台）的功能模块展示。以下是对该结构的可视化整理和解释：</p>
]]></content:encoded>
    </item>
    <item>
      <title>TP6806（OSD、OSG）</title>
      <link>https://em.rewi.xyz/hardware/TP6806.html</link>
      <guid>https://em.rewi.xyz/hardware/TP6806.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">TP6806（OSD、OSG）</source>
      <description>TP6806（OSD、OSG）</description>
      <category>hardware</category>
      <pubDate>Tue, 29 Apr 2025 14:20:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><a href="https://cv4d9788cn.feishu.cn/wiki/wikcnIPPLbSzyQDXKaVy1ByUpAh" target="_blank" rel="noopener noreferrer">点击查看相关文档</a>：<strong>TP6806（OSD、OSG）--按键菜单修改</strong></p>
<h2>概述</h2>
<p>TP6806 是一种与车载显示相关的芯片，具体用于实现 <strong>OSD（On-Screen Display，屏幕显示）</strong> 和 <strong>OSG（On-Screen Graphics，屏幕图形）</strong> 功能。</p>
<h2>TP6806 芯片</h2>
<h3>简介</h3>
<p>TP6806 是一种专用集成电路（ASIC），通常用于车载娱乐系统、导航系统和其他需要显示图形和文本的应用中。它的主要功能包括生成和处理屏幕上的图形和文本信息，并将这些信息叠加到视频信号上。</p>
<h3>功能</h3>
<ul>
<li><strong>图形生成</strong>：支持生成各种图形元素，如线条、矩形、圆形、多边形等。</li>
<li><strong>文本显示</strong>：支持显示各种字体和字符集，能够在屏幕上显示清晰的文本信息。</li>
<li><strong>视频叠加</strong>：能够将生成的图形和文本信息叠加到视频信号上，实现图像和信息的同步显示。</li>
<li><strong>图像处理</strong>：支持基本的图像处理功能，如缩放、旋转、裁剪等，以适应不同的显示需求。</li>
<li><strong>接口支持</strong>：提供多种接口以便与主控芯片和显示屏连接，确保数据传输的稳定性和可靠性。</li>
</ul>
<h3>应用场景</h3>
<ul>
<li><strong>车载导航系统</strong>：用于显示地图、导航指示和其他相关信息。</li>
<li><strong>车载娱乐系统</strong>：用于显示多媒体内容、游戏和其他互动界面。</li>
<li><strong>仪表盘显示</strong>：用于显示各种车辆状态信息，如速度、油量、发动机状态等。</li>
</ul>
<h2>OSD（On-Screen Display）</h2>
<p>OSD（屏幕显示）是一种在屏幕上显示信息的技术，通常用于显示菜单、设置、状态信息等。</p>
<h3>在车载系统中的应用</h3>
<ul>
<li><strong>菜单系统</strong>：用于设置和调整各种参数，如音量、亮度、对比度等。</li>
<li><strong>状态信息</strong>：显示当前系统状态，如电池电量、信号强度、时间等。</li>
<li><strong>导航提示</strong>：显示导航系统的提示信息，如下一步转向指示、路名等。</li>
</ul>
<h2>OSG（On-Screen Graphics）</h2>
<p>OSG（屏幕图形）是在屏幕上显示复杂图形和动画的技术，通常用于增强用户界面和提供更丰富的信息。</p>
<h3>OSG在车载系统中的应用</h3>
<ul>
<li><strong>导航地图</strong>：显示详细的地图信息，包括道路、标志、兴趣点等。</li>
<li><strong>图形界面</strong>：提供图形化的用户界面，增加用户交互的直观性和易用性。</li>
<li><strong>娱乐系统</strong>：显示视频、游戏和其他多媒体内容的图形效果。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>WiFi模块</title>
      <link>https://em.rewi.xyz/hardware/WiFi%E6%A8%A1%E5%9D%97.html</link>
      <guid>https://em.rewi.xyz/hardware/WiFi%E6%A8%A1%E5%9D%97.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">WiFi模块</source>
      <description>WiFi模块</description>
      <category>hardware</category>
      <pubDate>Tue, 29 Apr 2025 07:17:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2>ESP32-S3</h2>
<h2>ESP8266</h2>
]]></content:encoded>
    </item>
    <item>
      <title>CAN-FD</title>
      <link>https://em.rewi.xyz/protocol/CAN-FD.html</link>
      <guid>https://em.rewi.xyz/protocol/CAN-FD.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">CAN-FD</source>
      <description>CAN FD（Controller Area Network with Flexible Data Rate）</description>
      <category>protocol</category>
      <pubDate>Tue, 29 Apr 2025 14:58:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2><strong>协议简介</strong></h2>
<p><strong>CAN FD（Controller Area Network with Flexible Data Rate）</strong> 。</p>
<p>CAN FD（Controller Area Network Flexible Data-Rate）是传统CAN（Controller Area Network）协议的改进版本，主要特点是提高了数据传输速率和数据帧的容量。</p>
<p>提供了更高的带宽和更大的数据传输灵活性。</p>
<p>随着汽车电子功能的不断丰富，对数据传输带宽的需求日益增加。传统 <strong>CAN 总线</strong>由于其数据长度和速率限制，逐渐无法满足现代车载网络的高性能要求。</p>
<p>为此，推出了 <strong>CAN FD</strong>（全称：<em>CAN with Flexible Data rate</em>），它是对经典 CAN 协议的重大升级，保留了原有 CAN 的核心特性，同时在以下方面进行了增强：</p>
<ul>
<li>提高了通信带宽</li>
<li>支持更长的数据负载</li>
</ul>
<p>🔸 <strong>标准化历程</strong>：</p>
<ul>
<li>2011 年开始开发</li>
<li>2015 年被正式纳入国际标准 <strong>ISO 11898-1</strong></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>CAN</title>
      <link>https://em.rewi.xyz/protocol/CAN.html</link>
      <guid>https://em.rewi.xyz/protocol/CAN.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">CAN</source>
      <description>Controller Area Network</description>
      <category>protocol</category>
      <pubDate>Tue, 29 Apr 2025 14:58:00 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>CAN，全称为“Controller Area Network”，即控制器局域网，是一种串行数据通信协议。<br>
最初，CAN 被设计作为汽车环境中的微控制器通讯，在车载各电子控制装置 ECU 之间交换信息，形成汽车电子控制网络。比如：发动机管理系统、变速箱控制器、仪表装备、电子主干系统中，均嵌入 CAN 控制装置。</p>
<p>CAN 最初出现在 80 年代末的汽车工业中，由德国 Bosch 公司最先提出。当时，由于消费者对于汽车功能的要求越来越多， 而这些功能的实现大多是基于电子操作的， 这就使得电子装置之间的通讯越来越复杂，同时意味着需要更多的连接信号线。提出 CAN 总线的最初动机就是为了解决现代汽车中庞大的电子控制装置之间的通讯，减少不断增加的信号线。于是，他们设计了一个单一的网络总线， 所有的外围器件可以被挂接在该总线上。1993 年，CAN 已成为国际标准 ISO11898(高速应用)和 ISO11519（低速应用）。</p>
</div>
<h2><strong>概述</strong></h2>
<p>CAN 总线是一种<strong>无同步时钟信号线</strong>的异步串行通信技术，要求通信设备之间遵循相同的波特率规则才能正常通信。</p>
]]></content:encoded>
    </item>
    <item>
      <title>HTTP</title>
      <link>https://em.rewi.xyz/protocol/HTTP.html</link>
      <guid>https://em.rewi.xyz/protocol/HTTP.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">HTTP</source>
      <description>HTTP（Hypertext Transfer Protocol，超文本传输协议）</description>
      <category>protocol</category>
      <pubDate>Tue, 29 Apr 2025 14:46:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2><strong>一、HTTP 基础概念</strong></h2>
<ol>
<li>
<p><strong>定义与作用</strong><br>
HTTP（Hypertext Transfer Protocol，超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的<strong>应用层协议</strong>，基于 TCP/IP，默认端口为 80。其主要功能是定义客户端与服务器之间的通信格式，支持请求-响应模式，且无状态（依赖 Cookie 扩展状态管理）。</p>
</li>
<li>
<p><strong>核心特点</strong></p>
<ul>
<li><strong>无连接性</strong>（HTTP/1.0 后通过 Keep-Alive 支持长连接）</li>
<li><strong>无状态性</strong>（需借助 Session/Cookie 维护状态）</li>
<li><strong>明文传输</strong>（HTTPS 通过 SSL/TLS 加密）。</li>
</ul>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>LIN</title>
      <link>https://em.rewi.xyz/protocol/LIN.html</link>
      <guid>https://em.rewi.xyz/protocol/LIN.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">LIN</source>
      <description>Local Interconnect Network</description>
      <category>protocol</category>
      <pubDate>Tue, 29 Apr 2025 15:03:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>LIN（Local Interconnect Network）</strong> 。</p>
<h2><strong>总线简介</strong></h2>
<p><strong>LIN 总线</strong>全称为 <em>Local Interconnect Network</em>，是一种专为汽车设计的低成本串行通信网络。它主要用于补充 CAN 总线网络，适用于对带宽和实时性要求不高的场合，如车门控制、方向盘、座椅调节、空调系统、照明设备、湿度传感器以及交流发电机等。</p>
<h3>主要特点</h3>
<ul>
<li><strong>成本效益高</strong>：LIN 系统的成本显著低于 CAN。</li>
<li><strong>最大传输速率</strong>：20 Kbps。</li>
<li><strong>推荐通信速率</strong>：
<ul>
<li>低速：2400 bps</li>
<li>中速：9600 bps</li>
<li>高速：19200 bps</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>MQTT</title>
      <link>https://em.rewi.xyz/protocol/MQTT.html</link>
      <guid>https://em.rewi.xyz/protocol/MQTT.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">MQTT</source>
      <description>EMQX、MQTT</description>
      <category>protocol</category>
      <pubDate>Tue, 29 Apr 2025 14:48:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>MQTT（Message Queuing Telemetry Transport）</h2>
<p>MQTT 是一种轻量级的、基于发布/订阅模式的消息传输协议，专为低带宽、不稳定网络环境设计，广泛应用于物联网（IoT）设备间的通信。它有以下几个特点：</p>
<ol>
<li>
<p><strong>轻量级和高效</strong>：</p>
<ul>
<li>MQTT 消息头部非常小，通常在 2 字节左右，非常适合低带宽网络。</li>
</ul>
</li>
<li>
<p><strong>发布/订阅模式</strong>：</p>
<ul>
<li>设备（客户端）可以发布消息到特定主题（topic），也可以订阅一个或多个主题，服务器（Broker）负责转发消息。</li>
</ul>
</li>
<li>
<p><strong>可靠性</strong>：</p>
<ul>
<li>提供三种服务质量（QoS）级别：QoS 0（最多一次），QoS 1（至少一次），QoS 2（仅一次），以满足不同的可靠性需求。</li>
</ul>
</li>
<li>
<p><strong>持久化会话</strong>：</p>
<ul>
<li>支持持久化会话，客户端可以在重新连接时恢复未完成的消息传输。</li>
</ul>
</li>
<li>
<p><strong>简便的实现</strong>：</p>
<ul>
<li>协议设计简洁，容易实现和嵌入到资源受限的设备中。</li>
</ul>
</li>
</ol>
<h2>EMQX（Erlang MQTT Broker）</h2>
<p>EMQX 是一个开源的、高可扩展性的 MQTT 消息服务器（Broker），用 Erlang/OTP 语言开发。它是业界性能和稳定性最优秀的 MQTT Broker 之一，具有以下特点：</p>
<ol>
<li>
<p><strong>高并发</strong>：</p>
<ul>
<li>由于 Erlang/OTP 的高并发特性，EMQX 可以处理数百万个 MQTT 连接。</li>
</ul>
</li>
<li>
<p><strong>高可用性和容错</strong>：</p>
<ul>
<li>支持分布式部署，可以在节点之间进行负载均衡，并且具有强大的容错能力。</li>
</ul>
</li>
<li>
<p><strong>多协议支持</strong>：</p>
<ul>
<li>除了 MQTT，EMQX 还支持 WebSocket、HTTP、CoAP 等多种协议，方便不同类型的客户端接入。</li>
</ul>
</li>
<li>
<p><strong>丰富的插件系统</strong>：</p>
<ul>
<li>提供了丰富的插件，如认证、授权、监控、数据持久化等，用户可以根据需求进行扩展。</li>
</ul>
</li>
<li>
<p><strong>集成和扩展性</strong>：</p>
<ul>
<li>支持与多种数据库、消息队列（如 Redis、Kafka、RabbitMQ）和云服务（如 AWS、Azure、Aliyun）集成，方便构建复杂的 IoT 系统。</li>
</ul>
</li>
</ol>
<h2>示例</h2>
<p><strong>使用 MQTT 协议的简单示例</strong></p>
<p>发布者（Publisher）：</p>
<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> paho.mqtt.client </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> mqtt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">broker_address </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "test.mosquitto.org"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">client </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> mqtt.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">Client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Publisher"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">client.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(broker_address)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">client.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">publish</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"house/sensor1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hello MQTT"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">client.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">disconnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>订阅者（Subscriber）：</p>
<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> paho.mqtt.client </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> mqtt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> on_message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> userdata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Received message: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">message.payload.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">decode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> on topic </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">message.topic</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">broker_address </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "test.mosquitto.org"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">client </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> mqtt.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">Client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Subscriber"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">client.on_message </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> on_message</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">client.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(broker_address)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">client.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">subscribe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"house/sensor1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">client.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF">loop_forever</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 EMQX 的配置示例</strong></p>
<ol>
<li>
<p><strong>安装和启动 EMQX</strong>：</p>
<ul>
<li>下载 EMQX 安装包并按照官方文档进行安装。</li>
<li>启动 EMQX 服务：<code>./bin/emqx start</code></li>
</ul>
</li>
<li>
<p><strong>配置 EMQX</strong>：</p>
<ul>
<li>可以通过修改 <code>etc/emqx.conf</code> 文件进行配置，例如设置监听端口、启用插件等。</li>
<li>也可以通过 EMQX Dashboard（默认地址为 <code>http://localhost:18083</code>）进行图形化管理和配置。</li>
</ul>
</li>
<li>
<p><strong>使用 EMQX 进行消息发布和订阅</strong>：</p>
<ul>
<li>使用上述 MQTT 客户端代码，通过更改 <code>broker_address</code> 为 EMQX 服务器地址进行消息发布和订阅。</li>
</ul>
</li>
</ol>
<h2>结束语</h2>
<p>MQTT 是一种轻量级、高效的消息传输协议，非常适合物联网设备的通信。而 EMQX 作为一款高性能的 MQTT Broker，提供了强大的并发处理能力、可扩展性和丰富的功能，能够很好地满足大规模物联网系统的需求。如果您对构建高性能、稳定的 IoT 系统感兴趣，建议进一步研究和使用 EMQX 和 MQTT 协议。</p>
]]></content:encoded>
    </item>
    <item>
      <title>NB-IoT</title>
      <link>https://em.rewi.xyz/protocol/NB-IoT.html</link>
      <guid>https://em.rewi.xyz/protocol/NB-IoT.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">NB-IoT</source>
      <description>NB-IoT (Narrowband Internet of Things)</description>
      <category>protocol</category>
      <pubDate>Tue, 29 Apr 2025 15:13:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2><strong>概述</strong></h2>
<p><strong>NB-IoT（Narrowband Internet of Things，窄带物联网）</strong> 是一种专为物联网设计的低功耗广域网（LPWAN）技术，由 <strong>3GPP（第三代合作伙伴计划）</strong> 开发。它旨在提供一种具有<strong>广覆盖、低功耗、低成本和海量连接能力</strong>的无线通信解决方案。</p>
<h3>主要应用场景包括</h3>
<ul>
<li>智能电表</li>
<li>智慧城市（如路灯控制）</li>
<li>环境监测</li>
<li>远程农业</li>
<li>资产追踪</li>
<li>智能家居设备</li>
</ul>
<blockquote>
<p>NB-IoT 可部署在 <strong>LTE 带内、保护带或独立频谱中</strong>，兼容现有蜂窝网络架构。</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Socket</title>
      <link>https://em.rewi.xyz/protocol/Socket.html</link>
      <guid>https://em.rewi.xyz/protocol/Socket.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">Socket</source>
      <description>Socket</description>
      <category>protocol</category>
      <pubDate>Tue, 29 Apr 2025 14:46:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2><strong>1. Socket 的定义与作用</strong></h2>
<ul>
<li><strong>基本概念</strong>：<br>
Socket（套接字）是网络编程中应用层与传输层之间的抽象接口，用于实现不同主机或同一主机上的进程间通信。它将复杂的 TCP/IP 协议族封装为简单的 API（如 <code>socket()</code>、<code>bind()</code>、<code>connect()</code> 等），允许开发者通过读写文件描述符的方式操作网络连接。</li>
<li><strong>核心功能</strong>：
<ul>
<li>唯一标识网络中的通信端点（IP 地址 + 端口号 + 协议）。</li>
<li>支持 TCP（可靠传输）和 UDP（高效传输）两种主要协议。</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>TCP</title>
      <link>https://em.rewi.xyz/protocol/TCP.html</link>
      <guid>https://em.rewi.xyz/protocol/TCP.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">TCP</source>
      <description>TCP（Transmission Control Protocol）</description>
      <category>protocol</category>
      <pubDate>Tue, 29 Apr 2025 14:40:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>TCP（Transmission Control Protocol）</p>
<h2><a class="header-anchor" href="#三次握手建立连接"><span>三次握手建立连接<sup class="footnote-ref"></sup></span></a><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></h2>
<h2>连接终止过程（四次挥手）</h2>
<h2>参考资料</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="footnote1" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/108504297" target="_blank" rel="noopener noreferrer">一文彻底搞懂 TCP三次握手、四次挥手过程及原理</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>UDP</title>
      <link>https://em.rewi.xyz/protocol/UDP.html</link>
      <guid>https://em.rewi.xyz/protocol/UDP.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">UDP</source>
      <description>UDP（User Datagram Protocol）</description>
      <category>protocol</category>
      <pubDate>Tue, 29 Apr 2025 14:43:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>UDP（<strong>User Datagram Protocol</strong>，用户数据报协议）是互联网协议族中的一种<strong>传输层协议</strong>，主要用于在网络中快速传输数据。它是一种<strong>无连接</strong>、<strong>不可靠</strong>的通信协议，适用于对实时性和效率要求较高的场景。</p>
]]></content:encoded>
    </item>
    <item>
      <title>硬件通信协议</title>
      <link>https://em.rewi.xyz/protocol/%E7%A1%AC%E4%BB%B6%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE.html</link>
      <guid>https://em.rewi.xyz/protocol/%E7%A1%AC%E4%BB%B6%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">硬件通信协议</source>
      <description>硬件通信协议</description>
      <category>protocol</category>
      <pubDate>Tue, 29 Apr 2025 14:53:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1. UART (Universal Asynchronous Receiver/Transmitter)</h2>
<h3>概述</h3>
<ul>
<li>异步串行通信协议，常用于微控制器与设备间的通信（如传感器、显示器）。</li>
<li>不需要时钟信号，双方需在同一波特率下工作。</li>
</ul>
<h3>特点</h3>
<ul>
<li><strong>双线通信</strong>：TX（发送）、RX（接收）。</li>
<li>支持全双工通信。</li>
<li>数据帧格式：起始位 + 数据位（通常 8 位）+ 奇偶校验位（可选）+ 停止位。</li>
<li>速率由波特率决定（如 9600, 115200 bps）。</li>
</ul>
<h3>优点</h3>
<ul>
<li>简单、易于实现。</li>
<li>广泛应用于嵌入式系统。</li>
</ul>
<h3>缺点</h3>
<ul>
<li>速度较慢。</li>
<li>只支持点对点通信。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>网络通信协议</title>
      <link>https://em.rewi.xyz/protocol/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE.html</link>
      <guid>https://em.rewi.xyz/protocol/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">网络通信协议</source>
      <description>网络通信协议</description>
      <category>protocol</category>
      <pubDate>Tue, 29 Apr 2025 14:50:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>OSI 七层模型</h2>
<ol>
<li>
<p><strong>物理层（Physical Layer）</strong><br>
定义物理连接和传输媒体，如电缆、光纤、无线电波。</p>
</li>
<li>
<p><strong>数据链路层（Data Link Layer）</strong><br>
提供节点间的数据传输和错误检测功能，如 Ethernet。</p>
</li>
<li>
<p><strong>网络层（Network Layer）</strong><br>
负责数据包的路由和转发，如 IP。</p>
</li>
<li>
<p><strong>传输层（Transport Layer）</strong><br>
提供端到端的传输服务和流量控制，如 TCP、UDP。</p>
</li>
<li>
<p><strong>会话层（Session Layer）</strong><br>
管理会话和连接，如 NetBIOS。</p>
</li>
<li>
<p><strong>表示层（Presentation Layer）</strong><br>
处理数据的编码和解码，如 SSL/TLS。</p>
</li>
<li>
<p><strong>应用层（Application Layer）</strong><br>
提供应用程序之间的通信，如 HTTP、FTP。</p>
</li>
</ol>
<h2>TCP/IP 四层模型</h2>
<ol>
<li>
<p><strong>网络接口层 / 链路层（Network Interface / Link Layer）</strong><br>
对应 OSI 的物理层和数据链路层，如 Ethernet、PPP。</p>
</li>
<li>
<p><strong>互联网层 / 网络层（Internet / Network Layer）</strong><br>
对应 OSI 的网络层，如 IP、ICMP。</p>
</li>
<li>
<p><strong>传输层（Transport Layer）</strong><br>
对应 OSI 的传输层，如 TCP、UDP。</p>
</li>
<li>
<p><strong>应用层（Application Layer）</strong><br>
对应 OSI 的会话层、表示层和应用层，如 HTTP、SMTP、DNS。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>GDB (GNU Debugger)</title>
      <link>https://em.rewi.xyz/tools/GDB.html</link>
      <guid>https://em.rewi.xyz/tools/GDB.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">GDB (GNU Debugger)</source>
      <description>GDB 是一个强大的调试工具，用于调试 C、C++ 和其他编程语言的程序。GDB 能帮助开发者在程序运行时监视和控制程序的执行，发现并修复错误。 主要功能 设置断点 命令： 说明： 在代码中的特定位置设置断点，当程序执行到断点处时会暂停，允许开发者检查程序状态。 运行和控制程序 命令： 说明： 启动程序并控制其执行，如继续运行、单步执行、跳过函数等。 ...</description>
      <category>tools</category>
      <pubDate>Tue, 29 Apr 2025 14:23:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><a href="https://www.gnu.org/software/gdb/" target="_blank" rel="noopener noreferrer">GDB</a> 是一个强大的调试工具，用于调试 C、C++ 和其他编程语言的程序。GDB 能帮助开发者在程序运行时监视和控制程序的执行，发现并修复错误。</p>
]]></content:encoded>
    </item>
    <item>
      <title>MCAL-SPI</title>
      <link>https://em.rewi.xyz/OS/AUTOSAR/MCAL-SPI.html</link>
      <guid>https://em.rewi.xyz/OS/AUTOSAR/MCAL-SPI.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">MCAL-SPI</source>
      <description>SPI（Serial Peripheral Interface）</description>
      <category>OS</category>
      <pubDate>Tue, 29 Apr 2025 07:17:06 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>SPI（Serial Peripheral Interface） 提供对 SPI 总线的访问接口，用于与 SPI 设备通信。</p>
</div>
<h2>主要功能</h2>
<p>初始化：配置和初始化 SPI 控制器。<br>
数据传输：提供同步和异步的数据传输功能。<br>
配置管理：管理 SPI 总线的配置，包括主/从模式、时钟极性和相位、数据帧格式等。<br>
中断处理：处理 SPI 通信过程中产生的中断。</p>
<h2>关键函数</h2>
<p>Spi_Init：初始化 SPI 模块。<br>
Spi_DeInit：去初始化 SPI 模块。<br>
Spi_WriteIB：将数据写入内部缓冲区。<br>
Spi_ReadIB：从内部缓冲区读取数据。<br>
Spi_SyncTransmit：进行同步传输。<br>
Spi_AsyncTransmit：进行异步传输。<br>
Spi_GetStatus：获取 SPI 模块的状态。<br>
Spi_GetJobResult：获取 SPI 作业的结果。</p>
<h2>数据传输模式</h2>
<h3>SPI IB（Immediate Buffering）</h3>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>IB 模式，也称为直接缓冲模式，是一种将数据直接缓冲到驱动内部的模式。在这种模式下，数据在传输之前会被拷贝到驱动内部的缓冲区，传输完成后再从缓冲区中读取数据。这种模式适用于数据量较小且需要快速响应的情况。</p>
</div>
<p>特点:</p>
<ul>
<li>快速响应：数据直接缓存在驱动内部，减少了外部缓冲区的访问时间。</li>
<li>易于管理：数据缓存在驱动内部，管理相对简单。</li>
<li>适合小数据量：由于驱动内部缓冲区大小有限，适用于传输数据量较小的场景。</li>
</ul>
<h3>SPI EB（External Buffering）</h3>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>EB 模式，也称为外部缓冲模式，是一种使用外部缓冲区进行数据传输的模式。在这种模式下，数据在传输过程中不拷贝到驱动内部缓冲区，而是直接从外部缓冲区进行传输。这种模式适用于数据量较大且传输速度要求较高的情况。</p>
</div>
<p>特点:</p>
<ul>
<li>高效传输：数据直接从外部缓冲区进行传输，适合大数据量的传输。</li>
<li>复杂管理：需要管理外部缓冲区，增加了管理复杂度。</li>
<li>适合大数据量：外部缓冲区没有驱动内部缓冲区大小的限制，适用于传输大量数据的场景。</li>
</ul>
<h2>SPI配置</h2>
<h3>SpiDriver</h3>
<p>SpiDriver中需要配置时钟，其他都是自动生成的</p>
<h3>SpiChannel ID</h3>
<p>autosar标准配置项，一般为自动生成。</p>
<h3>SpiChannel Type</h3>
<p>选择通道类型，IB/EB。依赖于SpiChannelBuffersAllowed参数 <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p>
<pre><code>            SpiChannelBuffersAllowed=0，SpiChannel Type应该为IB.

            SpiChannelBuffersAllowed=1，SpiChannel Type应该为EB.

            SpiChannelBuffersAllowed=2，SpiChannel Type可能是IB或者EB.
</code></pre>
<h3>Spi Data Width</h3>
<p>该参数表示传输数据单元的宽度。需要根据实际通信需求修改。</p>
<h3>Spi Deault Data</h3>
<p>当(对于内部缓冲区或外部缓冲区)传递Spi_WriteIB(对于内部缓冲区)或Spi_WriteEB(对于外部缓冲区)的指针为NULL时，传输的默认数据。</p>
<h3>Spi Eb Max Length</h3>
<p>在选择EB为通道的情况下，此参数仅包含数据缓冲区的最大大小（数据元素数量）。</p>
<p>SpiNBuffers：该参数用于设置IB模式下的最大数据缓冲区数量</p>
<h3>Spi Transer Start</h3>
<p>此参数定义传输的第一个起始位。LSB-低位传输，MSB-高位传输，具体根据应用场景。</p>
<h3>SpiExternalDevce</h3>
<p>SpiExternalDevice:通信外部设备的设置。与SpiJob密切相关，会被SpiJob引用。</p>
<h3>SpiBaudrate</h3>
<p>配置波特率。</p>
<h3>SpiCsPolarity</h3>
<p>配置片选信号的激活时的电平。</p>
<h3>Spi Chip Select Identifier</h3>
<p>此参数是标识分配给该Job的Chip Select (CS)的符号名称。CS信号如果没有在spi中配置，也可以直接通过配置PORT实现。</p>
<h3>Spi Chip Select Polarity</h3>
<p>配置片选信号的激活时的电平。</p>
<h3>Spi Cs Selection</h3>
<p>当芯片选择处理或者被启用时（参照SpiEnableCs),那么这个参数指定芯片选择是由外设HW引擎自动处理还是通过Spi驱动程序的通用IO处理</p>
<pre><code>    一般都会选择CS_VIA_PERIPHERAL_ENGINE，除非对应的IO被异常占用。
</code></pre>
<h3>Spi Data Shift Edge</h3>
<p>此参数定义SPI数据移位边缘。数据可以在移位时钟的前沿或后沿上移位</p>
<p>对于一个时钟周期内，有两个edge,分别称为：</p>
<p>(1)Leading edge=前一个边沿=第一个边沿，对于开始电压是1，</p>
<p>那么就是1变成0的时候，对于开始电压是0，那么就是0变成1的时候；</p>
<p>(2)Trailing edge=后一个边沿=第二个边沿，对于开始电压是1，<br>
那么就是0变成1的时候（即在第一次1变成0之后，才可能有后面的0变成1），<br>
对于开始电压是0，那么就是1变成0的时候</p>
<p>在SPI协议中，有类似的定义为CPHA</p>
<pre><code>    CKPHA (Clock Phase) = CPHA = PHA = Phase = （时钟）相位
</code></pre>
<p>**不太一样的是，SpiDataShiftEdge是指的数据传输，CPHA指的是数据采样。**不过一个确定后，另外一个边沿也就跟着确定了。</p>
<h3>Spi Enable Cs</h3>
<pre><code>启用或禁用Chip Select处理功能。如果该参数被启用，那么参数SpiCsSelection进一步详细说明了芯片选择的类型。
</code></pre>
<h3>Spi Shift Clock Idle level</h3>
<p>此参数定义SPI移位时钟空闲电平，在spi中一般又称为极性CPOL。</p>
<h3>Spi Time Clk 2 Cs</h3>
<p>时钟与芯片选择CS之间的计时（以秒为单位），该配置需要参考具体的外设使用。</p>
<h3>Spi Cs Continous</h3>
<p>该字段决定在帧传输之间保持芯片选择Asserted,仅在Master模式下有效。</p>
<h3>Spi Byte Swap</h3>
<p>在发送和接受数据时启用每个32位字的字节交换。</p>
<h3>Spi Pin Config</h3>
<p>配置在1位传输期间用于输入和输出数据的引脚。如果执行2位或4位传输，引脚配置字段必须为00-SIN_INPUT_SOUT_OUTPUT：SIN用于输入数据，SOUT用于输出数据。-SIN_INPUT_OUTPUT：SIN用于输入和输出数据SOUT_INPUT_OUTPUT：SOUT用于输入和输出数据。-SOUT_INPUT_SIN_OUTPUT：SOUT用于输入数据，SIN用于输出数据。</p>
<h3>SpiJobEndNotification</h3>
<p>此参数是通知函数的引用。</p>
<pre><code>            如果配置了Notification，则在job结束后会调用对应的函数
</code></pre>
<h3>Spi Job Id</h3>
<p>一般自动生成id</p>
<h3>Spi Job Priority</h3>
<p>根据SPI093设置优先级:0，最低，3，最高优先级</p>
<h3>Spi Device Assignment</h3>
<pre><code>    关联对应的 external device
</code></pre>
<h3>SpiChannelList</h3>
<p>配置job中的channel,一个job至少有一个channel.</p>
<h3>SpiSequence</h3>
<h3>Spi Interruptible Sequence</h3>
<pre><code>    此参数允许或不允许此序列被另一个序列挂起。
</code></pre>
<p>依赖:这个SPI_INTERRUPTIBLE_SEQ_ALLOWED参数被配置为ON。</p>
<h3>SpiSeqEndNotification</h3>
<pre><code>    此参数是通知函数的引用。
</code></pre>
<h3>Spi Sequence ID</h3>
<p>一般自动生成此参数。</p>
<h3>SpiJobAssignment</h3>
<p>配置关联的job</p>
<h3>SPIGeneral</h3>
<p>SpiLevelDelivered<br>
SpiLevelDelivered为0（LEVEL0）：驱动程序仅处理所有可用SPI总线（QSPIx）上的简单同步传输<br>
SpiLevelDelivered为1（LEVEL1）：驱动程序仅处理所有可用SPI总线（QSPIx）上的简单异步传输<br>
SpiLevelDelivered是2级（LEVEL2）：LEVEL2是驱动程序的增强行为，将处理同步和异步传输</p>
<p>一般都配置为2</p>
<p>SpiChannelBuffersAllowed</p>
<p>选择允许和传递的SPI处理器/驱动程序通道缓冲区使用情况<br>
Spi Transmit Timeout Clock Reference*</p>
<p>参考CPU时钟源配置，该配置设置为MCU驱动程序配置。</p>
<p>此CPU时钟源用于配置SpiTransmitTimeout中的Timeout值（以微秒为单位）</p>
<p>用于等待TX/RX传输完成一帧。</p>
<h3>Spi Transmit Timeout</h3>
<p>用于等待TX/RX传输完成一帧的超时值（微秒）。</p>
<p>如果芯片在此超时期间不能完全传输一帧，则传输将不成功。</p>
<p>这个值的精度很低，它必须大于完全传输一帧所需的时间。</p>
<h3>Spi Global Dma Enable</h3>
<p>对于每个spi单元，可以配置一种传输方法：FIFO或DMA。</p>
<p>如果选中，则允许在传输过程中使用DMA模块。</p>
<p>如果未选中，所有spi单元将使用FIFO传输模式。</p>
<h3>SpiInterruptibleSeqAllowed</h3>
<p>打开或关闭可中断序列处理功能</p>
<p>SPI_LEVEL_DELIVERED需要配置为1或者2，sequence中也有对应的配置SpiInterruptibleSequence</p>
<h3>SpiHwStatusApi</h3>
<p>选择是否开启Spi_GetHWUnitStatus函数，此函数返回指定SPI硬件微控制器外围设备的状态</p>
<h3>Spi Cancel Api</h3>
<p>打开或关闭Spi_Cancel功能</p>
<h3>SPIHwUnit</h3>
<h3>Spi Hw Unit</h3>
<p>逻辑SpiHWunit到物理FCSPI_[0|1|2|3|4|5|6|7]的分配。这取决于芯片版本中存在的单元数量。</p>
<h3>Spi Hw Unit Mode</h3>
<p>在SPI_MASTER和SPI_SLAVE模式之间进行选择。</p>
<h3>Spi Sync Or Async</h3>
<p>特定于此HwUnit是否只能进行同步传输。</p>
<p>如果为true，则此硬件单元仅用于同步传输。</p>
<p>如果为false，则此硬件单元仅用于异步传输。</p>
<p>False仅在SpiGeneral/SpiLevelDelivered为1或2时适用，true仅在SpiGeneral/SpiLevel Delivered为0或2时才适用。</p>
<h3>Spi Hw Unit Clock Ref</h3>
<p>选择时钟源</p>
<h3>PublishedInformation</h3>
<p>主要适应一些autosar规范以及软件版本号</p>
<h2><a class="header-anchor" href="#专有名词"><span>专有名词<sup class="footnote-ref"></sup></span></a><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></h2>
<ul>
<li><strong>SCLK</strong>（Serial Clock）：时钟信号，由主设备产生</li>
<li><strong>CS</strong> (Chip Select)：从设备使能信号，由主设备控制
<ul>
<li><strong>SS</strong>（Slave Select）：从设备选择信号，用于选择要通信的从设备。</li>
<li>CS: 其中CS是控制芯片是否被选中的，也就是说只有片选信号为预先规定的使能信号时（高电位或低电位），对此芯片的操作才有效，这就允许在同一总线上连接多个SPI设备成为可能。</li>
</ul>
</li>
<li><strong>SDO</strong>（Serial Data Output）：主设备数据输出，从设备数据输入。
<ul>
<li><strong>MOSI</strong>（Master Output Slave Input）：主设备输出从设备输入信号，用于主设备向从设备发送数据。</li>
</ul>
</li>
<li><strong>SDI</strong>（Serial Data Input）：主设备数据输入，从设备数据输出
<ul>
<li><strong>MISO</strong>（Master Input Slave Output）：主设备输入从设备输出信号，用于主设备接收从设备的数据。</li>
</ul>
</li>
<li><strong>SPI Mode</strong>：SPI 工作模式，用于配置 SPI 控制器的时钟极性和相位。</li>
<li><strong>SPI Clock Polarity</strong>：SPI 时钟极性，用于配置 SPI 控制器的时钟极性。</li>
<li><strong>Channel</strong>：SPI最小单元，其中可以配置传输长度，通道类型等。</li>
<li><strong>Job</strong>：一个Job是由一个或几个具有相同Chip Select(在Job处理期间不释放)的channel组成的。Job被认为是原子的，因此不能被另一个Job中断。Job具有指定的优先级。</li>
<li><strong>Sequence</strong>：Sequence是要传输的连续Job的数量，但可以使用优先级机制在作业之间重新调度。Sequence传输是可中断的(被另一个Sequence传输)，或者不依赖于静态配置。</li>
</ul>
<p>下图很好的说明了Channel，Job，Sequence三者之间的关系：<br>
<br>
一个Job可以包括多个CS相同的Channel,一个Sequence可以包含多个CS不同的Job.</p>
<h2>参考资料</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="footnote1" class="footnote-item"><p><a href="https://blog.csdn.net/weixin_47460499/article/details/134996341" target="_blank" rel="noopener noreferrer">Autosar——MCAL SPI配置及使用学习笔记</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote2" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/594249873" target="_blank" rel="noopener noreferrer">Autosar MCAL-SPI配置及使用</a> <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>architecture</title>
      <link>https://em.rewi.xyz/OS/AUTOSAR/architecture.html</link>
      <guid>https://em.rewi.xyz/OS/AUTOSAR/architecture.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">architecture</source>
      <description>架构</description>
      <category>OS</category>
      <pubDate>Sun, 27 Apr 2025 03:47:12 GMT</pubDate>
      <content:encoded><![CDATA[<h2><a class="header-anchor" href="#应用层-application-layer"><span>应用层（Application Layer）<sup class="footnote-ref"></sup></span></a><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></h2>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>Application Software Components (SWC)：具体功能实现单元，如控制算法、状态监测等。<br>
由应用软件组件组成，这些组件实现具体的功能，如传感器数据处理、控制算法等。Application Software Components (SWC)：具体功能实现单元，如控制算法、状态监测等。</p>
</div>
<p>应用层包含各种应用程序（SW-C，Software Components），这些应用程序通过虚拟功能总线（VFB，Virtual Functional Bus）进行通信。应用层的主要组件包括：</p>
<p>软件组件（SW-C）：实现特定功能的软件模块，如发动机控制、刹车系统等。</p>
<p>端口接口（Port Interfaces）：定义软件组件之间的通信接口。</p>
<h2>运行时环境（Runtime Environment, RTE）</h2>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>负责应用软件组件（Software Components, SWC）之间，以及SWC和BSW之间的通信和交互。<br>
连接应用软件和基础软件，负责数据的交换和通信。</p>
</div>
<p>RTE是应用层和基础软件层之间的接口，负责管理和调度软件组件之间的通信。RTE的主要功能包括：</p>
<p>消息传递：在软件组件之间传递数据和事件。</p>
<p>调度管理：管理软件组件的执行顺序和时间。</p>
<h2>基础软件层（Basic Software, BSW）</h2>
<h3>微控制器抽象层（MCAL，Microcontroller Abstraction Layer）</h3>
<ul>
<li>与硬件直接交互的最底层软件，提供对微控制器和外设的抽象。</li>
</ul>
<h4>作用</h4>
<ul>
<li>位于基础软件（BSW）层的最底层。MCAL 的主要作用是为上层软件（如运行时环境 RTE 和应用软件 ASW）提供对微控制器硬件的标准化接口。上层软件可以独立于具体的硬件平台开发，提高了软件的可移植性和重用性。</li>
</ul>
<p>硬件抽象:</p>
<ul>
<li>提供对底层硬件的抽象接口，使上层软件无需关心具体的硬件实现细节。</li>
<li>提供对硬件的抽象访问接口，使上层软件能够与不同硬件平台兼容。</li>
<li>标准化接口，使上层软件与特定硬件无关。<br>
提高可移植性：</li>
<li>由于 MCAL 提供了标准化的接口，上层软件可以在不同的微控制器平台上复用，只需更换相应的 MCAL 实现。<br>
降低开发复杂性：</li>
<li>开发者只需专注于上层应用的逻辑实现，无需处理复杂的硬件驱动编写。<br>
增强系统可靠性：</li>
<li>MCAL 经过严格测试和验证，确保了与硬件交互的稳定性和可靠性。</li>
</ul>
<h4>组成部分</h4>
<p>WDT（Watchdog Timer）驱动：</p>
<ul>
<li>提供对看门狗定时器的访问接口，用于系统故障恢复和监控。</li>
</ul>
<p>SPI（串行外设接口）（Serial Peripheral Interface）驱动：<br>
<a href="/OS/AUTOSAR/SPI%E9%A9%B1%E5%8A%A8.html" target="_blank">SPI</a></p>
<p>PWM（脉宽调制）（Pulse Width Modulation）驱动：</p>
<ul>
<li>提供对 PWM 模块的访问接口，用于生成 PWM 信号控制。</li>
</ul>
<p>LIN（Local Interconnect Network）驱动：</p>
<ul>
<li>提供对 LIN 控制器的访问接口，用于车载网络的 LIN 通信。</li>
</ul>
<p>Memory Abstraction Interface（MemIf）：</p>
<ul>
<li>提供对内部和外部存储器的访问接口，包括 EEPROM、Flash 等存储器。</li>
</ul>
<p>I2C（集成电路总线）（Inter-Integrated Circuit）驱动：</p>
<ul>
<li>提供对 I2C 总线的访问接口，用于与 I2C 设备通信。</li>
</ul>
<p>GPT（General Purpose Timer）驱动：</p>
<ul>
<li>提供对通用定时器的访问接口，用于计时和定时操作。</li>
</ul>
<p>DIO（Digital Input/Output）驱动：</p>
<ul>
<li>提供对数字输入输出端口的访问接口，用于控制和读取微控制器的 GPIO 引脚。</li>
</ul>
<p>CAN（控制器局域网）（Controller Area Network）驱动：</p>
<ul>
<li>提供对 CAN 控制器的访问接口，用于车载网络通信。</li>
</ul>
<p>ADC（模数转换）（Analog-to-Digital Converter）驱动：</p>
<ul>
<li>提供对微控制器内部 ADC 的访问接口，用于模拟信号的采集和转换。</li>
</ul>
<h4>开发流程</h4>
<p>需求分析：分析和定义具体项目对硬件外设的需求。<br>
配置和定制：根据具体硬件平台的特性，配置和定制 MCAL 模块。<br>
集成和测试：将 MCAL 模块集成到系统中，进行单元测试和集成测试，确保与硬件的正确交互。<br>
验证和优化：对 MCAL 模块进行验证和性能优化，确保在目标硬件平台上的高效运行。</p>
<h3>ECU抽象层(ECU Abstraction Layer (ECUAL))</h3>
<ul>
<li>对ECU硬件的抽象，屏蔽了硬件差异。</li>
<li>抽象化ECU硬件，使软件能在不同硬件平台上运行。</li>
<li>抽象硬件细节，提供统一的硬件访问接口。</li>
</ul>
<h3>ECU抽象层(Services Layer)</h3>
<ul>
<li>提供基本服务如内存管理、通信服务、诊断服务等。</li>
<li>提供系统服务，如OS、NVM、通讯栈（CAN, LIN, FlexRay, Ethernet等）。</li>
</ul>
<h3>复杂驱动层(Complex Device Drivers (CDD))</h3>
<ul>
<li>处理特殊硬件需求的驱动程序。</li>
<li>特定硬件功能的驱动。</li>
<li>处理复杂的硬件驱动，如传感器和执行器。</li>
</ul>
<h2>参考资料</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="footnote1" class="footnote-item"><p><a href="https://blog.csdn.net/qq_34459334/article/details/140173931" target="_blank" rel="noopener noreferrer">AUTOSAR架构</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>toolchain</title>
      <link>https://em.rewi.xyz/OS/AUTOSAR/toolchain.html</link>
      <guid>https://em.rewi.xyz/OS/AUTOSAR/toolchain.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">toolchain</source>
      <description>工具链</description>
      <category>OS</category>
      <pubDate>Sun, 27 Apr 2025 03:47:12 GMT</pubDate>
      <content:encoded><![CDATA[<h2>AutoSAR架构</h2>
<ul>
<li>Simulink</li>
<li>EB Tresos</li>
<li>ETAS RTA</li>
<li>VECTOR DaVinci</li>
</ul>
<h2>CAN通信</h2>
<ul>
<li>INCA</li>
<li>Pcan</li>
<li>CANdela</li>
<li>CANdbc+</li>
<li>CANanalyzer</li>
<li>CANoe</li>
<li>CANape</li>
</ul>
<h2>整车设计</h2>
<ul>
<li>PREEvision</li>
</ul>
<h2>仿真</h2>
<ul>
<li>vVIRTUALtarget</li>
<li>Simulink</li>
</ul>
<h2>IDE</h2>
<ul>
<li>Eclipse</li>
<li>Hightech</li>
<li>TASKING</li>
<li>Green Hills</li>
</ul>
<h2>应用层开发</h2>
<ul>
<li>Matlab/Simulink</li>
</ul>
<h2>版本管理</h2>
<ul>
<li>Git</li>
<li>SVN</li>
</ul>
<h2>调试器</h2>
<ul>
<li>UAD</li>
<li>Lautebach</li>
<li>miniwiggler</li>
</ul>
<h2>其他工具</h2>
<ul>
<li>逻辑分析仪</li>
<li>电流钳</li>
<li>示波器</li>
<li>万用表</li>
</ul>
<h2>NeuSAR Configurator</h2>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>NeuSAR Configurator 是专门为汽车电子系统设计的配置工具，属于AUTOSAR（Automotive Open System Architecture）开发生态系统的一部分。NeuSAR（New Embedded Unified Software Architecture）是一个符合AUTOSAR标准的基础软件平台，由中国汽车工程研究院（CAERI）和其他合作伙伴开发。NeuSAR Configurator 作为这一平台的一部分，旨在简化和优化AUTOSAR系统的配置过程。</p>
</div>
<h3>主要功能和特点</h3>
<ul>
<li>
<p>图形化用户界面 (GUI):</p>
<ul>
<li>提供直观的图形化界面，简化AUTOSAR基础软件模块的配置。</li>
<li>用户可以通过拖放、点击等操作完成复杂的配置任务。</li>
</ul>
</li>
<li>
<p>AUTOSAR 规范支持：</p>
<ul>
<li>完全支持AUTOSAR标准的配置文件格式（如.arxml文件）。</li>
<li>确保生成的配置文件符合AUTOSAR规范，保证系统的一致性和兼容性。</li>
</ul>
</li>
<li>
<p>模块配置：</p>
<ul>
<li>支持对AUTOSAR基础软件模块的详细配置，包括通讯栈、存储管理、安全管理等。</li>
<li>提供预定义的配置模板，帮助用户快速开始配置工作。</li>
</ul>
</li>
<li>
<p>自动生成代码：</p>
<ul>
<li>根据配置生成高质量的AUTOSAR标准代码，减少手动编码的错误和工作量。</li>
<li>生成的代码可以直接集成到开发环境中进行编译和测试。</li>
</ul>
</li>
<li>
<p>一致性检查：</p>
<ul>
<li>提供自动化的一致性检查工具，确保配置参数的正确性和一致性。</li>
<li>提供详细的错误报告和提示，帮助用户快速定位和解决配置问题。</li>
</ul>
</li>
<li>
<p>版本管理：</p>
<ul>
<li>集成版本控制功能，帮助用户管理不同版本的配置文件。</li>
<li>支持配置文件的比较和合并，方便团队协作和配置管理。</li>
</ul>
</li>
<li>
<p>集成支持：</p>
<ul>
<li>与NeuSAR基础软件平台和其他AUTOSAR开发工具无缝集成。</li>
<li>支持与第三方工具（如代码生成器、仿真工具等）的集成，提高开发效率。</li>
</ul>
</li>
</ul>
<h2>DaVinci DEV(Developer)</h2>
<p>DaVinci DEV 是一个集成开发环境，专门用于AUTOSAR基础软件的开发。它支持AUTOSAR架构下的模块开发、集成和配置。</p>
<h3>主要特点</h3>
<ul>
<li>
<p><strong>模块开发</strong>：</p>
<ul>
<li>提供对AUTOSAR基础软件模块的全面支持，帮助开发者创建、修改和测试这些模块。</li>
<li>支持经典AUTOSAR架构（包括各个版本）的软件组件开发。</li>
</ul>
</li>
<li>
<p><strong>代码生成</strong>：</p>
<ul>
<li>自动生成符合AUTOSAR标准的C代码，确保与其他AUTOSAR组件的兼容性。</li>
<li>提供丰富的模板和示例代码，加速开发过程。</li>
</ul>
</li>
<li>
<p><strong>集成与测试</strong>：</p>
<ul>
<li>集成各类测试工具，支持单元测试、集成测试和系统测试。</li>
<li>提供仿真和调试工具，帮助开发者在PC环境中验证功能。</li>
</ul>
</li>
<li>
<p><strong>版本控制</strong>：</p>
<ul>
<li>集成版本控制系统，方便团队协作和代码管理。</li>
</ul>
</li>
</ul>
<h2>DaVinci CFG(Configurator)</h2>
<p>DaVinci CFG 是一个配置管理工具，用于配置和生成AUTOSAR基础软件的参数。它主要用于系统集成阶段，确保各个软件模块之间的参数一致性和正确性。</p>
<h3>主要.特点</h3>
<ul>
<li>
<p><strong>配置管理</strong>：</p>
<ul>
<li>提供图形化界面，方便用户配置AUTOSAR基础软件模块的参数。</li>
<li>支持多种AUTOSAR配置文件格式，如.arxml文件。</li>
</ul>
</li>
<li>
<p><strong>自动生成配置文件</strong>：</p>
<ul>
<li>根据用户的配置，自动生成符合AUTOSAR标准的配置文件。</li>
<li>确保各模块间的参数一致性，避免手动配置错误。</li>
</ul>
</li>
<li>
<p><strong>集成支持</strong>：</p>
<ul>
<li>与DaVinci DEV无缝集成，确保配置参数可以直接用于代码生成。</li>
<li>支持与其他第三方工具的集成，方便系统集成和测试。</li>
</ul>
</li>
<li>
<p><strong>一致性检查</strong>：</p>
<ul>
<li>提供自动化的一致性检查工具，确保配置参数符合AUTOSAR标准和系统要求。</li>
<li>提供详细的错误报告，帮助用户快速定位和修复配置问题。</li>
</ul>
</li>
</ul>
<h2>CANoe</h2>
<h3>在CANoe中配置CAN FD</h3>
<ol>
<li>
<p><strong>创建CAN FD网络</strong>：</p>
<ul>
<li>打开CANoe软件，创建一个新的CANoe配置文件或打开现有配置文件。</li>
<li>在网络节点（Network Nodes）窗口中添加一个新的CAN FD网络节点。</li>
</ul>
</li>
<li>
<p><strong>配置CAN FD总线参数</strong>：</p>
<ul>
<li>在网络节点窗口中选择新创建的CAN FD节点，右键点击并选择“Properties”（属性）。</li>
<li>在属性窗口中，选择“CAN Bus Parameters”（CAN总线参数）选项卡。
<ul>
<li>设置“Arbitration Bit Rate”（仲裁位速率）：例如1 Mbps。</li>
<li>设置“Data Bit Rate”（数据位速率）：例如2 Mbps或更高。</li>
<li>设置“Sample Point”（采样点）和其他与总线相关的参数。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>添加CAN FD消息</strong>：</p>
<ul>
<li>在CANoe的“Database Editor”（数据库编辑器）中，打开相关的CAN数据库文件（.dbc文件）。</li>
<li>在数据库中添加新的CAN FD消息。设置消息ID、名称和DLC（Data Length Code，数据长度代码）。</li>
<li>添加信号并设置其属性（例如，起始位、长度、缩放和偏移量等）。</li>
</ul>
</li>
<li>
<p><strong>配置发送和接收节点</strong>：</p>
<ul>
<li>在CANoe配置窗口中，添加发送和接收节点。</li>
<li>在发送节点中，编写CAPL（CAN Access Programming Language）脚本或使用图形界面定义发送CAN FD消息的逻辑。</li>
<li>在接收节点中，编写CAPL脚本或使用图形界面定义接收和处理CAN FD消息的逻辑。</li>
</ul>
</li>
<li>
<p><strong>设置CAN FD网络仿真</strong>：</p>
<ul>
<li>配置CANoe的仿真参数以支持CAN FD网络。</li>
<li>在“Simulation Setup”（仿真设置）窗口中，添加一个新的CAN FD仿真节点。</li>
<li>设置仿真节点的属性，使其能够仿真CAN FD总线的行为。</li>
</ul>
</li>
<li>
<p><strong>运行和监控仿真</strong>：</p>
<ul>
<li>启动CANoe仿真，运行CAPL脚本或监控界面。</li>
<li>使用CANoe的Trace窗口监控CAN FD消息的发送和接收。</li>
<li>验证CAN FD消息的格式和内容是否符合预期。</li>
</ul>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>注意事项</title>
      <link>https://em.rewi.xyz/rule.html</link>
      <guid>https://em.rewi.xyz/rule.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">注意事项</source>
      <description>行为 无营养的短视频 休闲下来就容易刷 容易停不下来 一天会浪费好几个小时 控制好让其他失去失去兴趣的多巴胺 不可长时间停留 晚上自控力差，尽量避免有愉悦感但无意义的行为 睡前总结 记录下来，防止第二天想不起来 下一天调整 前期 这是外包工作吗？ V0.0.0 - 暂不考虑外包的工作，感谢 V0.1.0 - 等正式离职后，还没找到工作，再考虑吧 V0....</description>
      <pubDate>Sun, 27 Apr 2025 02:11:51 GMT</pubDate>
      <content:encoded><![CDATA[<h2>行为</h2>
<h3>无营养的短视频</h3>
<ol>
<li>休闲下来就容易刷</li>
<li>容易停不下来</li>
<li>一天会浪费好几个小时</li>
</ol>
<h3>控制好让其他失去失去兴趣的多巴胺</h3>
<ol>
<li>不可长时间停留</li>
<li>晚上自控力差，尽量避免有愉悦感但无意义的行为</li>
</ol>
<h3>睡前总结</h3>
<ol>
<li>记录下来，防止第二天想不起来</li>
<li>下一天调整</li>
</ol>
<h2>前期</h2>
<h3>这是外包工作吗？</h3>
<ul>
<li>V0.0.0 - 暂不考虑外包的工作，感谢</li>
<li>V0.1.0 - 等正式离职后，还没找到工作，再考虑吧</li>
<li>V0.1.1 - 等正式离职后，还没找到工作，再考虑外包工作吧</li>
</ul>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[看脑图]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>发送</h3>
<ul>
<li>好的好的，这是我修改了几遍的简历，帮忙看看这个简历可不可以吧，感谢。</li>
</ul>
<h2>一般流程</h2>
<h3>一、自我介绍</h3>
<ul>
<li>不卡壳</li>
<li>不要说流水</li>
<li>不要被感觉是照着一张纸在念</li>
<li>真诚</li>
<li>态度</li>
<li>目前的项目情况，项目中遇到的问题如果解决的</li>
</ul>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>尊敬的面试官们，x午好！</span></span>
<span class="line"><span>[1. 我的标签]</span></span>
<span class="line"><span>非常感谢您给我这个机会让我介绍自己。我叫[你的名字]，拥有[学士]学位与[3年]嵌入式软件研发经验，主要做的是汽车显示屏和相关测试软件。</span></span>
<span class="line"><span>[2. 我的经历]</span></span>
<span class="line"><span>我在大学期间就喜欢学习各种科技知识，参与了几个项目和比赛并获得相关荣誉，到快毕业了时，投递简历并进入了目前所在的[精电汽车电子]，先实习了几个月，到毕业后转正，并担任嵌入式软件工程师，负责多个关键项目的开发和维护。</span></span>
<span class="line"><span>[3. 我的成长]</span></span>
<span class="line"><span>我熟悉多种嵌入式开发工具和平台，擅长使用 C 和 python 编写高效、可靠的代码。</span></span>
<span class="line"><span>[4. 我的优势]</span></span>
<span class="line"><span>此外，我非常重视持续学习和自我提升。我还对新技术保持浓厚的兴趣，最近正在研究 人工智能 相关的理论和技术，学习与尝试一些跨平台开发框架，以提升自己的专业技能。</span></span>
<span class="line"><span>[6. 总结]</span></span>
<span class="line"><span>最后，我希望我的经验和技能能够为贵公司的发展贡献一份力量，同时也希望能够在一个充满活力和挑战的环境中继续成长，实现自己的职业目标。感谢您的时间，我的介绍完毕。</span></span>
<span class="line"><span>谢谢！</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>二、技术能力</h3>
<h4>1. 简历中展现出的技术项目点</h4>
<ol>
<li>般面试，主要面试官都会先去看候选人的简历，才会决定是否要面试。</li>
<li>针对于简历中的细节，要多去回忆复盘,面试官看过的简历，肯定有一些你的优势是他们需要的。</li>
<li>在简历中出现了通过你自己本身解决或突破了重大的技术问题或贡献，去复盘一下你当时做这件事的思路、解决方案、以及沉淀和创新，这样面试官就会相信在遇到重大问题时，你是有思路和解决方案的，而不是基于平台，这样从面试官的视角去看，你是可以独挡一面的。</li>
<li>简历中的结果、成绩、核心技能，也要用打问号的方式，看看自己是不是可以回答的满意。</li>
<li>确保自己的回答，有逻辑，有见解，有思路，有方案。</li>
</ol>
<h4>2. 岗位职责JD</h4>
<ol>
<li>学会在已经提供的工作内容后边多打？</li>
<li>把岗位职责中用提问的方式提问的话，你是否可以说出来答案？</li>
<li>通过岗位职责分析基本就可以判断这边看重的是哪块技术能力以及哪几个相关的项目经验，要着重的去分析复盘准备。</li>
<li>当时的项目背景、出于什么样的逻辑思路、提供了怎样的解决方案、运用到了哪些技术点等。</li>
</ol>
<h3>三、薪资问题</h3>
<ol>
<li>有问到正常说就行。后续面试通过。企业hr会专门谈薪资的。</li>
</ol>
<h3>四、离职原因</h3>
<ol>
<li>要在稳定性上给到面试官信心。</li>
<li>只有这一个原因，尽量就不说其他原因了，以免多说多错。</li>
<li>无论如何一定不要诋毁之前公司、领导、团队等，如果客观发生的，可以委婉说，职场上尽量好聚好散；以防止用人企业多想，尽量客观一些往不可抗拒因素上面说。</li>
<li>如果有问到离职原因就说，没问到，就不用主动说。</li>
</ol>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>我的三年合同即将到期，经过慎重考虑，我希望在职业上寻求更大突破，一线城市在在科技领域与我的技术方向高度契合。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>五、还有什么要问的</h3>
<ol>
<li>要在好好了解一下公司发展及产品信息等，可以看看我发的介绍以及公司官网等。</li>
<li>如果岗位聊下来各方面都不错一定要表达意向度哦，有时候态度也是一个超级加分项。</li>
</ol>
<h2>问答</h2>
<ul>
<li><strong>明确问题</strong>：确认理解正确("您问的是...吗?")</li>
<li><strong>分层解答</strong>：从原理到实践逐步深入</li>
<li><strong>结合经验</strong>："在实际项目中我曾..."</li>
<li><strong>承认未知</strong>：对不了解的部分坦诚说明</li>
</ul>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>我一时半会对这个概念想不起来，我遇到问题一般会这样进行：先问AI，让其给出详细的解释，感觉不够在搜索引擎寻找帖子和官网，如果还需要优秀代码参考，会先让AI给出多种解决思路的，再去GitHub和gitee等代码仓库搜索一下关键词，参考一下别人写的代码。还有疑问的话再去找行业大佬请教一下。[面试官]您感觉这样弄懂一个概念的步骤合适吗？</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>使用STAR法则描述项目</h3>
<ul>
<li><strong>Situation</strong>：项目背景/需求</li>
<li><strong>Task</strong>：个人职责</li>
<li><strong>Action</strong>：技术方案与难点解决</li>
<li><strong>Result</strong>：量化成果(性能提升xx%)</li>
</ul>
<h3>1. 啥时候能入职</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 必须马上入职，赶紧答应不要拖，实在不行拒绝掉也行</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 几周不行，急招急聘 [打问号？？？现在的上级说，最好是一个月的工作交接，不然显得我的工作内容不多]</label></li>
</ul>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>已经告知要离职，很快就能入职。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>2. 我不会但我可以学</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 有提升计划，在针对性练习，不用很长时间就可以带到业务中来带来产出了</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 非公益，不带学</label></li>
</ul>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>目前我的经验集中在CAN FD，但已开始研究XL的帧结构扩展，计划通过Vector培训课程深化理解。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>3. 还有什么问题（有什么想问的？）</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 必须问一点，如团队分工，领导风格，工作内容</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 没啥问题了，感受不行，意向度不高</label></li>
</ul>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 如果有幸加入咱们公司，你看我需要提前做哪些准备呢？</span></span>
<span class="line"><span>2. 您刚才提到的XX问题，我可能考虑还不够，想听听您的建议。</span></span>
<span class="line"><span>3. 产品面临的最大技术挑战是什么？</span></span>
<span class="line"><span>4. 贵司如何进行代码质量管控？</span></span>
<span class="line"><span>5. 这个Job最看重的三个能力是什么？</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>4. 对薪资没什么要求？</h3>
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> 基于上份工作拿多少工资，在这份工作中的贡献，现在手上有没有其他OFFER</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> 没要求，要么是能力不行，要么是没有上进心</label></li>
</ul>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>我也没在一线城市呆过，很难说出一个数字，说高了，可能我太高估自己，说低了，让我显得价值不够。反正最终都是要公司评估的，要不直接由公司给我评估一个数字吧。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>你最失败的经历是什么？</h3>
<ul>
<li>我之前因为对技术入门快自信心暴涨，广泛涉猎各种技术，利用各种框架快速把东西做出来就完事，忽略了基础理论的记忆，接下来我会投入一部分时间去补回来。</li>
<li>这也是我要换个环境的原因之一，我想加入人多的大平台，成为一个专业的人，而不是慢慢变成说假大空话的人</li>
</ul>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>在我参与车载产线测试程序开发时，曾因过度追求功能完整性各种使用场景的考虑，导致快要用了时，还没有出稳定版本，只能加班到深夜把它完成，但最终用上的功能只有一点点，这是我印象较深的一次教训。我接下来做产品都要经过需求与实用性的慎重分析，权衡，先保证产出，有机会再进行扩展，比如让界面更好看，用法更简单这些。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>最大的进步在哪里？</h3>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>“我认为最大的进步体现在三个方面：</span></span>
<span class="line"><span>第一，技术能力的体系化升级。</span></span>
<span class="line"><span>在主导长城汽车中控屏项目时，我从需求分析到量产落地全程参与，深入掌握了AUTOSAR架构开发和Linux内核驱动优化。例如，通过重构Local Dimming算法，将背光均匀性提升20%，并借助Simulink建模验证了算法可靠性。这让我从单纯的代码实现者，成长为能独立设计复杂系统的开发者。</span></span>
<span class="line"><span>第二，复杂问题解决能力的突破。</span></span>
<span class="line"><span>在车载产线测试程序开发中，我设计了多线程通信框架（队列或者信号量），支持10台设备并行测试，效率提升40%。同时，通过日志分析和硬件调试，将误检率降低15%。这些经历让我学会从系统视角拆解问题，平衡性能与稳定性。</span></span>
<span class="line"><span>第三，团队协作与客户导向意识的提升。</span></span>
<span class="line"><span>在解决客户端现场问题时，我主导DFMEA分析并推动流程优化，将客户确认周期缩短20%，故障解决率达到100%。这让我深刻理解到，技术落地不仅需要代码能力，更需要沟通协作和结果导向思维。”</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>你的职业规划是什么？</h3>
<ul>
<li>结合这个岗位、自己要补充哪些能力</li>
<li>结合公司平台，讲职业动机</li>
<li>表达自己愿意和公司长期发展的决心</li>
</ul>
<h2>表达</h2>
<h3>1. 怎么做，而不是是什么</h3>
<ul>
<li>重点不是啥都知道，重点是等价交换，体现自己的价值与优点</li>
<li>学会反问，体现思考能力</li>
</ul>
<h3>职业素养展示</h3>
<ol>
<li><strong>学习能力</strong>：准备近期学习的1-2项新技术</li>
<li><strong>问题解决</strong>：准备典型debug案例</li>
<li><strong>团队协作</strong>：跨部门合作实例</li>
<li><strong>质量意识</strong>：代码审查、单元测试实践</li>
</ol>
<h3>实战技巧</h3>
<h4>1. <strong>代码白板题</strong></h4>
<ul>
<li>先理清需求</li>
<li>写出框架再填充</li>
<li>注意边界条件</li>
<li>讨论时间/空间复杂度</li>
</ul>
<h4>2. <strong>系统设计题</strong></h4>
<ul>
<li>明确约束条件</li>
<li>模块化设计</li>
<li>考虑扩展性</li>
<li>讨论trade-off</li>
</ul>
<h4>3. <strong>行为问题</strong></h4>
<ul>
<li>团队冲突处理实例</li>
<li>紧急问题解决流程</li>
<li>学习新技术的方法</li>
<li>压力场景应对策略</li>
</ul>
<h2>Important -9/9 days</h2>
<h3>完成情况</h3>
]]></content:encoded>
    </item>
    <item>
      <title>北京经纬恒润科技</title>
      <link>https://em.rewi.xyz/interview/1-%E5%8C%97%E4%BA%AC%E7%BB%8F%E7%BA%AC%E6%81%92%E6%B6%A6%E7%A7%91%E6%8A%80.html</link>
      <guid>https://em.rewi.xyz/interview/1-%E5%8C%97%E4%BA%AC%E7%BB%8F%E7%BA%AC%E6%81%92%E6%B6%A6%E7%A7%91%E6%8A%80.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">北京经纬恒润科技</source>
      <description>1. autosar分哪些模块 2. 这些模块怎么来的 分别配置哪些、用哪些工具 SPI需要配置哪些，速率这些要配置吗？ 讲一下BSW都配置了哪些模块 SWC里面谁和谁连，怎么连？ 你做了哪些？ 电源管理怎么做的，高低压怎么分的？ 正常工作电压是多少？ 代码是完全原创的，还是自己写的？ 举个列子，怎么对应需求的？ CAN^FD有什么，在CANoe中要配...</description>
      <category>interview</category>
      <pubDate>Sun, 27 Apr 2025 02:11:51 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1. autosar分哪些模块</h2>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>AUTOSAR架构在最高抽象级别上区分了三个软件层：应用层 Application 、运行时环境 RTE 和 基础软件层BSW。</span></span>
<span class="line"><span>基础软件层(BSW)可以再进一步划分为 服务层 Services Layer、ECU抽象层 ECUAL、微控制器抽象层 MCAL 和 复杂驱动层 CDD。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="/OS/AUTOSAR/architecture.html" target="_blank">架构</a></p>
<h2>2. 这些模块怎么来的</h2>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>需求驱动：来自汽车电子系统日益增长的复杂性和标准化需求。</span></span>
<span class="line"><span>技术整合：基于已有技术和标准的整合与优化。</span></span>
<span class="line"><span>行业协作：由汽车制造商、供应商和技术公司共同制定和贡献。</span></span>
<span class="line"><span>工具支持：通过专用工具链实现模块的自动化生成和配置。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>分别配置哪些、用哪些工具</h2>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>DaVinci Developer 实现 应用层 的 软件组件SWC的设计，定义组件间的通信接口（Sender/Receiver或Client/Server接口），对可运行实体（Runnable）配置任务的执行逻辑和触发条件（如周期触发或事件触发）。</span></span>
<span class="line"><span>DaVinci Configurator 会同步 DaVinci Developer 中定义的内容，自动生成 RTE接口以支持SW-C间的信号传递和函数调用，还需要定义任务优先级、调度策略与资源管理规则，比如 Task mapping。配置好之后生成SWC的代码。</span></span>
<span class="line"><span>NeuSAR Configurator 使用从 DaVinci Developer 导出的`.arxml`文件，使用更新的方式导入工程，检查task mapping，检查RTE接口是否正确。生成OS、RTE、BSWM等BSW部分的代码。</span></span>
<span class="line"><span>还有使用vector的MCAL配置端口、时钟等，生成MCAL部分的代码。</span></span>
<span class="line"><span>再与自己写的CDD代码，如IIC、外部flash操作 进行集成，将最终的代码通过 Green Hills 工具链编译成可执行文件，烧录到板上运行。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="/OS/AUTOSAR/toolchain.html" target="_blank">工具链</a></p>
<h2>SPI需要配置哪些，速率这些要配置吗？</h2>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>我大致还记得一些，在vector的MCAL软件中，有一些配置是自动生成的，有一些SPI的关键信息需要自己配置，比如：通道类型IB/EB，传输数据单元的宽度，定义传输的第一个起始位，低位先传输还是高位先传输，波特率，片选信号的激活时的电平，数据移位边缘，时钟极性CPOL，时钟相位CPHA，FIFO或DMA的传输方法 这些。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p><a href="/OS/AUTOSAR/MCAL-SPI.html#spi%E9%85%8D%E7%BD%AE" target="_blank">SPI</a></p>
<h2>讲一下BSW都配置了哪些模块</h2>
<p><a href="/OS/AUTOSAR/architecture.html#%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%B1%82-basic-software-bsw" target="_blank">基础软件层</a></p>
<h2>SWC里面谁和谁连，怎么连？</h2>
<h2>你做了哪些？</h2>
<h2>电源管理怎么做的，高低压怎么分的？</h2>
<h2>正常工作电压是多少？</h2>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>正常工作电压：</span></span>
<span class="line"><span>    1. 对于汽车电子系统，通常采用的是2.7V至3.6V的工作电压。</span></span>
<span class="line"><span>    2. 对于其他电子设备，可能会采用不同的工作电压范围。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>代码是完全原创的，还是自己写的？</h2>
<h2>举个列子，怎么对应需求的？</h2>
<h2>CAN^FD有什么，在CANoe中要配置哪些？</h2>
<p><a href="/protocol/CAN-FD.html" target="_blank">CAN^FD</a></p>
<h2>const和static的区别？</h2>
<p><a href="/C/keyword.html" target="_blank">const和static</a></p>
<h2>还有什么要问的？</h2>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[看规则]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>上海蔚赫信息</title>
      <link>https://em.rewi.xyz/interview/10-%E4%B8%8A%E6%B5%B7%E8%94%9A%E8%B5%AB%E4%BF%A1%E6%81%AF.html</link>
      <guid>https://em.rewi.xyz/interview/10-%E4%B8%8A%E6%B5%B7%E8%94%9A%E8%B5%AB%E4%BF%A1%E6%81%AF.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">上海蔚赫信息</source>
      <description>怎么没做过硬件驱动呢？览山的MCU不就是吗？还发现了BUG呀 Linux一直有用，用于干什么了呢？</description>
      <category>interview</category>
      <pubDate>Sun, 27 Apr 2025 02:11:51 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>怎么没做过硬件驱动呢？览山的MCU不就是吗？还发现了BUG呀</li>
<li>Linux一直有用，用于干什么了呢？</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>深圳市英唐智慧健康</title>
      <link>https://em.rewi.xyz/interview/11-%E6%B7%B1%E5%9C%B3%E5%B8%82%E8%8B%B1%E5%94%90%E6%99%BA%E6%85%A7%E5%81%A5%E5%BA%B7.html</link>
      <guid>https://em.rewi.xyz/interview/11-%E6%B7%B1%E5%9C%B3%E5%B8%82%E8%8B%B1%E5%94%90%E6%99%BA%E6%85%A7%E5%81%A5%E5%BA%B7.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">深圳市英唐智慧健康</source>
      <description>你老家是哪的？你上学在哪啊？ 那你的 RTE 的接口又用的达芬奇工具吗？ 但你这个回答其实你也没说你配了，你你你配置的涉及哪些组件？那咱这么问的仔细一点吧，你 MCO 如果想改端口属性的话，大概会涉及哪几个组件？ 你的 SPI 的通讯速率只有几百 k 吗？那波特率设的多少？ 你是怎么做到访问不同的IIC设备？ IIC 发byte需要几个clock？ 有...</description>
      <category>interview</category>
      <pubDate>Sun, 27 Apr 2025 02:11:51 GMT</pubDate>
      <content:encoded><![CDATA[<h2>你老家是哪的？你上学在哪啊？</h2>
<h2>那你的 RTE 的接口又用的达芬奇工具吗？</h2>
<h2>但你这个回答其实你也没说你配了，你你你配置的涉及哪些组件？那咱这么问的仔细一点吧，你 MCO 如果想改端口属性的话，大概会涉及哪几个组件？</h2>
<h2>你的 SPI 的通讯速率只有几百 k 吗？那波特率设的多少？</h2>
<h2>你是怎么做到访问不同的IIC设备？</h2>
<h2>IIC 发byte需要几个clock？</h2>
<h2>有没有遇到过 IIC 锁死的问题？</h2>
<h2>作为 MCU 的开发工程师，软件的开发工程师，首先你需要对芯片的一个手册要很了解，然后要对底层的这个硬件比较了解</h2>
<h2>奥德萨的 BSW 是它的一个核心部分</h2>
<h2>DCM DEM 啊？然后像 f e e 啊、 f r s 啊、 NVM 啊</h2>
<h2>OS 的 application 啊，这些东西才是它的核心，这些都没有涉猎</h2>
]]></content:encoded>
    </item>
    <item>
      <title>泽尔测试</title>
      <link>https://em.rewi.xyz/interview/2-%E6%B3%BD%E5%B0%94%E6%B5%8B%E8%AF%95.html</link>
      <guid>https://em.rewi.xyz/interview/2-%E6%B3%BD%E5%B0%94%E6%B5%8B%E8%AF%95.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">泽尔测试</source>
      <description>介绍上一份工作中的工作内容和工作技能 离职状态还是看机会？工作地点能接受吗？什么时候能入职？ 看简历做得挺多的，后视镜做了什么？ 对CAN、CAN^FD有什么了解？ 对TCP/IP、以太网的了解？ TCP/UDP有什么优缺点？ 对C#熟悉吗？ 串行解串器，美信和TI的区别？ 还有什么要了解的？</description>
      <category>interview</category>
      <pubDate>Sun, 27 Apr 2025 02:11:51 GMT</pubDate>
      <content:encoded><![CDATA[<h2>介绍上一份工作中的工作内容和工作技能</h2>
<h2>离职状态还是看机会？工作地点能接受吗？什么时候能入职？</h2>
<h2>看简历做得挺多的，后视镜做了什么？</h2>
<h2>对CAN、CAN^FD有什么了解？</h2>
<h2>对TCP/IP、以太网的了解？</h2>
<h2>TCP/UDP有什么优缺点？</h2>
<h2>对C#熟悉吗？</h2>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>C#是一种通用的、面向对象的编程语言，由微软开发。它的设计目标是提供一种简单、安全、可靠的方式来开发各种类型的应用程序，包括Windows应用程序、Web应用程序、移动应用程序等。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>公式有个测试软件开发的同事是用的C#，有修改过一部分他写的一个读LOG的软件的源码。</span></span>
<span class="line"><span>我自学unity游戏的时候也用过C#去写控制游戏逻辑的代码。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>串行解串器，美信和TI的区别？</h2>
<h2>还有什么要了解的？</h2>
]]></content:encoded>
    </item>
    <item>
      <title>创维数字</title>
      <link>https://em.rewi.xyz/interview/3-%E5%88%9B%E7%BB%B4%E6%95%B0%E5%AD%97.html</link>
      <guid>https://em.rewi.xyz/interview/3-%E5%88%9B%E7%BB%B4%E6%95%B0%E5%AD%97.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">创维数字</source>
      <description>主要是做显示屏是吗？拿到新项目是怎样开发的？ 软件开发步骤，分模块做的吧，一般怎么做的？ 有参与哪些模块吗？ 调光与主机是如何通信的？ 解串器是怎么配置的？ 有没有遇到过983和984IIC通信异常？ 为什么会出现优先级翻转、低优先级在高优先级前面执行？ 用的什么OS？ 显示屏有哪些模块？ 诊断是怎么做的？ 触摸帧格式是怎么样的？ 跟主机的通信格式是怎...</description>
      <category>interview</category>
      <pubDate>Sun, 27 Apr 2025 02:11:51 GMT</pubDate>
      <content:encoded><![CDATA[<h2>主要是做显示屏是吗？拿到新项目是怎样开发的？</h2>
<h2>软件开发步骤，分模块做的吧，一般怎么做的？</h2>
<h2>有参与哪些模块吗？</h2>
<h2>调光与主机是如何通信的？</h2>
<h2>解串器是怎么配置的？</h2>
<h2>有没有遇到过983和984IIC通信异常？</h2>
<h2>为什么会出现优先级翻转、低优先级在高优先级前面执行？</h2>
<h2>用的什么OS？</h2>
<h2>显示屏有哪些模块？</h2>
<h2>诊断是怎么做的？</h2>
<h2>触摸帧格式是怎么样的？</h2>
<h2>跟主机的通信格式是怎么样的？</h2>
<h2>10个手指都是一条命令传过去的吗？</h2>
<h2>10个手指一共是多少字节，DTC有多少字节？</h2>
<h2>TP拉诊断，其他数据是通过主机来读？</h2>
<h2>IIC命令频繁，设置的速率是多少？</h2>
<h2>实际是多少，看过吗？应该达不到400k吧？</h2>
<h2>有光感？</h2>
<h2>光感调光是怎么做的？</h2>
<h2>像PWM的底层硬件是怎么实现调光的？</h2>
<h2>MCU的PWM是怎么实现不同占空比的？</h2>
<h2>知道ADC的原理吗？</h2>
<h2>ADC采集的值是怎么出来的？</h2>
<h2>数字量代表多少是怎么算出来的？比如采集到800，怎么算出电压是多少？</h2>
<h2>IIC的格式？</h2>
<h2>起始、停止的电平状态是怎么样？</h2>
<h2>SPI用过吗？有什么特点？</h2>
<h2>SPI有4个相位，知道是什么意思吗？</h2>
<h2>芯旺微有开代码优化吗？</h2>
<h2>升级是怎么做的？</h2>
<h2>切换分区做哪些操作？</h2>
<h2>A分区跟B分区的程序是一样的吗？怎么设计的呢？</h2>
<h2>平常调试有哪些手段？</h2>
<h2>有遇到过死机问题吗？</h2>
<h2>怎么出现程序跑飞的呢？</h2>
<h2>知道位、bit吗？一个char 占多少位，char 指针呢？</h2>
<h2>软件上面设计全局数组、1024字节，3个地方赋值123，查看内存时，发现有个4，怎么去排查？</h2>
<div class="language-markdown line-numbers-mode" data-highlighter="shiki" data-ext="markdown" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    ### **逐步排查与解决方案**</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>深圳酷宅科技</title>
      <link>https://em.rewi.xyz/interview/5-%E6%B7%B1%E5%9C%B3%E9%85%B7%E5%AE%85%E7%A7%91%E6%8A%80.html</link>
      <guid>https://em.rewi.xyz/interview/5-%E6%B7%B1%E5%9C%B3%E9%85%B7%E5%AE%85%E7%A7%91%E6%8A%80.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">深圳酷宅科技</source>
      <description>C语言基础考试-英文 指针、内存泄漏、格式化符等 变量类型，文件操作等</description>
      <category>interview</category>
      <pubDate>Sun, 27 Apr 2025 02:11:51 GMT</pubDate>
      <content:encoded><![CDATA[<h2>C语言基础考试-英文</h2>
<ul>
<li>
<ol>
<li>指针、内存泄漏、格式化符等</li>
</ol>
</li>
<li>
<ol start="2">
<li>变量类型，文件操作等</li>
</ol>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>深圳市捷顺科技实业</title>
      <link>https://em.rewi.xyz/interview/8-%E6%B7%B1%E5%9C%B3%E5%B8%82%E6%8D%B7%E9%A1%BA%E7%A7%91%E6%8A%80%E5%AE%9E%E4%B8%9A.html</link>
      <guid>https://em.rewi.xyz/interview/8-%E6%B7%B1%E5%9C%B3%E5%B8%82%E6%8D%B7%E9%A1%BA%E7%A7%91%E6%8A%80%E5%AE%9E%E4%B8%9A.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">深圳市捷顺科技实业</source>
      <description>问你指针有什么规范，你说我们公司文档里指针没什么规范，你就是这样灵活多变的？</description>
      <category>interview</category>
      <pubDate>Sun, 27 Apr 2025 02:11:51 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>问你指针有什么规范，你说我们公司文档里指针没什么规范，你就是这样灵活多变的？</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>软通智控</title>
      <link>https://em.rewi.xyz/interview/9-%E8%BD%AF%E9%80%9A%E6%99%BA%E6%8E%A7.html</link>
      <guid>https://em.rewi.xyz/interview/9-%E8%BD%AF%E9%80%9A%E6%99%BA%E6%8E%A7.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">软通智控</source>
      <description>这边比较熟悉的一些通信技术的，哪一些方便举例的，举例说明一下吗？ 这边的因为咱们是做软件，那您这边有没有做过一些硬件的调试？ 有做过就是一些世博期房的逻辑分析与设备定位吗？ 你这边项目的话是自己独立完成 那你这边的话有没有就是自己独立完成过编写技术文档和主导设计评审这一些？ 做过 UDS 诊断出来写这一块呀？ 你目前就是作为一些项目，是什么项目？然后做...</description>
      <category>interview</category>
      <pubDate>Sun, 27 Apr 2025 02:11:51 GMT</pubDate>
      <content:encoded><![CDATA[<h2>这边比较熟悉的一些通信技术的，哪一些方便举例的，举例说明一下吗？</h2>
<h2>这边的因为咱们是做软件，那您这边有没有做过一些硬件的调试？</h2>
<h2>有做过就是一些世博期房的逻辑分析与设备定位吗？</h2>
<h2>你这边项目的话是自己独立完成</h2>
<h2>那你这边的话有没有就是自己独立完成过编写技术文档和主导设计评审这一些？</h2>
<h2>做过 UDS 诊断出来写这一块呀？</h2>
<h2>你目前就是作为一些项目，是什么项目？然后做的项目是什么功能？</h2>
<h2>讲一下这边用的一个项目开发的一个流程</h2>
<h2>什么叫MCU主要是控制外设，内部就数据搬运，任务配合这些，不复杂。这么飘？</h2>
]]></content:encoded>
    </item>
    <item>
      <title>interview</title>
      <link>https://em.rewi.xyz/interview/</link>
      <guid>https://em.rewi.xyz/interview/</guid>
      <source url="https://em.rewi.xyz/rss.xml">interview</source>
      <description>面试</description>
      <category>interview</category>
      <pubDate>Sun, 27 Apr 2025 02:11:51 GMT</pubDate>
    </item>
    <item>
      <title>AUTOSAR</title>
      <link>https://em.rewi.xyz/OS/AUTOSAR/</link>
      <guid>https://em.rewi.xyz/OS/AUTOSAR/</guid>
      <source url="https://em.rewi.xyz/rss.xml">AUTOSAR</source>
      <description>AUTOSAR-汽车开放系统架构(AUTomotive Open System ARchitecture)</description>
      <category>OS</category>
      <pubDate>Sun, 27 Apr 2025 02:11:51 GMT</pubDate>
    </item>
    <item>
      <title>数组</title>
      <link>https://em.rewi.xyz/C/%E6%95%B0%E7%BB%84.html</link>
      <guid>https://em.rewi.xyz/C/%E6%95%B0%E7%BB%84.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">数组</source>
      <description>定义 2. 数组越界访问 访问数组元素时，若使用的下标超出了数组定义的有效范围，就会引发数组越界访问错误。这可能致使程序访问到不属于该数组的内存空间，破坏其他数据或者引发程序异常崩溃。 此代码中，arr 数组大小为 5，有效下标范围是 0 到 4，访问 arr[10] 就属于越界访问。 二维数组作为参数时，必须指定列数吗 是的，在 C 语言中，当二维数...</description>
      <category>C</category>
      <pubDate>Fri, 25 Apr 2025 09:36:15 GMT</pubDate>
      <content:encoded><![CDATA[<h2>定义</h2>
<h3>2. 数组越界访问</h3>
<p>访问数组元素时，若使用的下标超出了数组定义的有效范围，就会引发数组越界访问错误。这可能致使程序访问到不属于该数组的内存空间，破坏其他数据或者引发程序异常崩溃。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">];</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 错误：越界访问</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此代码中，<code>arr</code> 数组大小为 5，有效下标范围是 0 到 4，访问 <code>arr[10]</code> 就属于越界访问。</p>
<h2>二维数组作为参数时，必须指定列数吗</h2>
<p>是的，在 C 语言中，<strong>当二维数组作为函数参数传递时，必须显式指定列数</strong>。这是因为 C 语言的数组内存布局和地址计算机制需要明确的列数来确定元素的偏移量。以下是详细解释：</p>
]]></content:encoded>
    </item>
    <item>
      <title>ResumeLinux</title>
      <link>https://em.rewi.xyz/interview/ResumeLinux.html</link>
      <guid>https://em.rewi.xyz/interview/ResumeLinux.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">ResumeLinux</source>
      <description>ResumeLinux</description>
      <category>interview</category>
      <pubDate>Fri, 25 Apr 2025 09:36:15 GMT</pubDate>
      <content:encoded><![CDATA[<p>🎓 教育背景 | 2018.09 - 2022.06 | 👨‍🎓闽江学院 | 电气工程及其自动化 | 工学学士 | 📍福建福州</p>
]]></content:encoded>
    </item>
    <item>
      <title>ResumeMCU</title>
      <link>https://em.rewi.xyz/interview/ResumeMCU.html</link>
      <guid>https://em.rewi.xyz/interview/ResumeMCU.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">ResumeMCU</source>
      <description>ResumeMCU</description>
      <category>interview</category>
      <pubDate>Fri, 25 Apr 2025 09:36:15 GMT</pubDate>
      <content:encoded><![CDATA[<p>🎓 教育背景 | 2018.09 - 2022.06 | 👨‍🎓闽江学院 | 电气工程及其自动化 | 工学学士 | 📍福建福州</p>
]]></content:encoded>
    </item>
    <item>
      <title>经验</title>
      <link>https://em.rewi.xyz/reference/%E7%BB%8F%E9%AA%8C.html</link>
      <guid>https://em.rewi.xyz/reference/%E7%BB%8F%E9%AA%8C.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">经验</source>
      <description>项目经验</description>
      <category>interview</category>
      <pubDate>Fri, 25 Apr 2025 09:36:15 GMT</pubDate>
      <content:encoded><![CDATA[<h2>长城C01吸顶屏V32未收到主机背光值DTC诊断报错-5W&amp;风险评估-报告</h2>
<p>在显示屏上电10s内，<br>
情况1. 未收到背光开关和背光亮度指令情况2. 未收到背光开关，只收到背光亮度指令（未开启背光不响应调光）情况3. 收到背光开关，未收到背光亮度指令（但收到背光开指令，会以默认亮度点亮）情况4. 未收到背光开关和背光亮度指令时，进入了升级模式（升级中不响应调光）</p>
<p>现象一：显示触摸正常，但有DTC上报<br>
分析：符合情况3<br>
原因：两个指令都收到时才不会报此DTC</p>
<p>现象二：背光上电就未打开过出现DTC<br>
分析：主机LOG情况如图，属于软件BUG<br>
原因：在V3.2时，软件程序中把记录收到设置背光亮度指令的变量放在了正常调光的地方，忽略了收到背光关指令会不响应调光，变量就没有被改变。10s到了就会记录未收到背光的DTC。</p>
<p>软件更新<br>
2024年4月11日发布的 V3.3已修正：将记录收到背光亮度值的变量移到不响应调光逻辑外，即：即使背光关，收到背光亮度指令也记录。下面为软件改善流程图。</p>
<ol start="2">
<li>软件升级<br>
对低版本的吸顶屏进行软件升级，此软件BUG将不会存在。</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">风险源</th>
<th style="text-align:center">现状管控</th>
<th style="text-align:center">剩余风险</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">生产时使用V32版本软件</td>
<td style="text-align:center">生产人员获取到的软件为最新软件，且有软件版本监控</td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td style="text-align:center">库存中存在V32版本软件</td>
<td style="text-align:center">目前仅保定徐水一个仓库，每次都由驻场人员更新到最新</td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td style="text-align:center">V32版本此BUG影响用户体验</td>
<td style="text-align:center">对于DTC功能，目前在主机仅记录，不会展示给客户。在主机正常情况下，吸顶屏只会在上电就一直关闭背光的情况下才会出现此DTC，只需要点亮一次吸顶屏，此DTC就会消失。因此不会影响用户体验。</td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td style="text-align:center">V32版本其他问题影响用户体验</td>
<td style="text-align:center">V3.4才修复的，断电瓶才能恢复通信，出现概率低，如果车不休眠掉电，就不容易出现。V3.5才修复的下拉菜单栏卡住现象，出现概率很低，多滑一下就恢复了。</td>
<td style="text-align:center">无建议升级为最新</td>
</tr>
</tbody>
</table>
<h2>触摸卡顿 4月29日</h2>
<p>问题描述：实车吸顶屏下拉快捷面板时仅显示了一半的下拉界面<br>
问题发生时间：2024年4月29日 16:19左右<br>
问题现象：</p>
<p>问题现象：主机端从Log数据中分析，怀疑是屏端少上报了Up事件导致</p>
<ol>
<li>台架双指上滑<br>
1.1 复现手法：在下拉快捷面板下，手指1调节背光滑动条，手指2上拉收起界面，可以出现下拉快捷面板只显示一半的情况</li>
</ol>
<p>1.台架双指上滑<br>
1.2 原因分析：采集到出现问题前后的I2C数据，发现屏MCU是有上报Up的数据给主机的</p>
<ol start="2">
<li>
<p>台架单指下滑<br>
问题现象：</p>
</li>
<li>
<p>台架单指下滑<br>
原因分析：当屏MCU读取到TP报点数据时，主机立刻来读取诊断信息，导致屏MCU识别到I2C总线在忙(有数据正在传输)，所以屏MCU没有再拉CRQ中断请求主机来读取触摸数据， 从而使主机丢失了Up的事件。</p>
</li>
<li>
<p>台架单指下滑<br>
主机日志：出现问题的时间点，有一个Down的事件，坐标还在继续变化，但最后没有Up的事件，所以导致下拉界面仅显示一半。</p>
</li>
<li>
<p>针对前面提到的第2点的解决方案：<br>
改善措施：在屏MCU与主机的IIC总线传输数据完成后，屏MCU增加一个判断“是否还有最新数据需要上报给主机？”，如有最新数据需要上报，MCU就会重新拉CRQ通知主机来读取。<br>
更改影响：更新屏MCU软件<br>
更改周期：6月4日能改完屏MCU的软件软件<br>
改后风险：目前只增加一个判断逻辑，改动量不大，无风险<br>
改后效果：</p>
</li>
<li>
<p>触摸数据的实测波形：<br>
TP芯片触发一次中断, 屏MCU读取数据的总时长在1.874437ms左右：</p>
</li>
</ol>
<p>屏触发一次CRQ, 主机读取数据的总时长在4.467562ms左右, 所以主机获取最新TP数据的延时时间在4.46ms左右：</p>
<h2>长城C01吸顶屏DTC诊断报错--0902</h2>
<p>2024年8月29日   16:07<br>
经过路试和过淋雨 后进行功能检测，人员<br>
点击中控“后排娱乐屏”，发现娱乐屏打不开。<br>
什么原因？<br>
华阳运动机构控制器软件逻辑不合理</p>
<p>结论先行：华阳运动机构控制器软件逻辑不合理。<br>
DMA接收到的数据 跨越接收区的尾部和头部，且从地址0开始的时间帧中有数据0x7A，长度位置有大于DMA搬运函数入口地址的值，会导致DMA搬运函数被覆盖而无法运行，从而导致收不到命令，机构不响应。<br>
DMA接收区是一个200字节长度的环形区，当出现时间帧(1分钟发送14字节)和心跳帧(1秒发送6字节)或其他数据帧同时发过来，且这2帧数据的一部分保存在接收区的尾部一部分在头部。当时间帧数据中出现0x7A数据会被误判为帧头，其后面0xC7A长度的数据会导致DMA搬运函数入口地址被覆盖，回调函数不运行，无法响应新命令，最终表现为机构无反应。<br>
备注：当时间帧的毫秒出现0x7A/0X17A/0X27A/0X37A时，也就是尾数是0x7A</p>
<p>对策方案<br>
a. 修改接收数组长度为200字节（如下图）<br>
b. 增加处理机制：<br>
1). 根据实际数据存取位置读取数据；<br>
2). 增加帧数据长度判断，超过0x0A为无效；<br>
3). 增加接收CMD ID判断，超过0x13为无效；</p>
]]></content:encoded>
    </item>
    <item>
      <title>stdlib</title>
      <link>https://em.rewi.xyz/C/stdlib.html</link>
      <guid>https://em.rewi.xyz/C/stdlib.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">stdlib</source>
      <description>标准库</description>
      <category>C</category>
      <pubDate>Wed, 16 Apr 2025 14:39:03 GMT</pubDate>
      <content:encoded><![CDATA[<h2><code>stdio.h</code> 头文件</h2>
<h3><code>printf</code> 函数</h3>
<ul>
<li><strong>功能</strong>：将格式化的数据输出到标准输出设备（通常是显示器）。</li>
<li><strong>函数原型</strong>：<code>int printf(const char *format,...);</code></li>
<li><strong>格式化说明</strong>：<code>format</code>字符串中包含了普通字符和格式化说明符。常见的格式化说明符有<code>%d</code>用于输出十进制整数，<code>%f</code>用于输出浮点数，<code>%c</code>用于输出字符，<code>%s</code>用于输出字符串等。还可以指定字段宽度、精度等，如<code>%5d</code>表示输出的整数占5个字符宽度，<code>%.2f</code>表示输出的浮点数保留两位小数。</li>
</ul>
<h3><code>scanf</code> 函数</h3>
<ul>
<li><strong>功能</strong>：从标准输入设备（通常是键盘）读取格式化的数据，并将其存储到指定的变量中。</li>
<li><strong>函数原型</strong>：<code>int scanf(const char *format,...);</code></li>
<li><strong>格式化说明</strong>：与<code>printf</code>类似，<code>format</code>字符串中的格式化说明符用于指定输入数据的类型和格式。例如，<code>%d</code>用于读取十进制整数，<code>%f</code>用于读取浮点数，<code>%c</code>用于读取字符，<code>%s</code>用于读取字符串。在使用<code>scanf</code>时，要确保传入的参数是变量的地址，通过取地址符<code>&amp;</code>来获取变量的地址。</li>
</ul>
<p>以下是一个简单的示例代码：<br>
在这个示例中，先使用<code>scanf</code>从键盘读取用户输入的整数、浮点数和字符串，然后使用<code>printf</code>将这些数据输出到显示器上。注意<code>scanf</code>中格式化字符串的空格，它用于分隔不同类型的数据输入。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> num;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> f;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"请输入一个整数、一个浮点数和一个字符串：</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    scanf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> %f</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> %s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">num, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">f, str);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"你输入的整数是：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, num);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"你输入的浮点数是：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%.2f</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, f);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"你输入的字符串是：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, str);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><code>stdlib.h</code> 头文件</h2>
<ul>
<li><code>abort()</code>：终止程序</li>
<li><code>atoi()</code>： 将字符串转换为整数</li>
<li><code>atof()</code>：将字符串转换为浮点数</li>
</ul>
<h3><code>malloc</code> 函数</h3>
<ul>
<li><strong>功能</strong>：在堆上分配指定大小的内存空间，并返回指向该内存空间的指针。</li>
<li><strong>函数原型</strong>：<code>void *malloc(size_t size);</code></li>
<li><strong>参数</strong>：<code>size</code>是要分配的内存空间的大小，以字节为单位。</li>
<li><strong>返回值</strong>：如果分配成功，返回一个指向分配内存空间的指针；如果分配失败，返回<code>NULL</code>。</li>
<li><strong>注意事项</strong>：
<ul>
<li>使用<code>malloc</code>分配的内存空间需要手动释放，否则会导致内存泄漏。</li>
<li>分配的内存空间的初始值是不确定的，可能包含垃圾数据。</li>
<li><code>malloc</code>分配的内存空间是连续的，可能会导致内存碎片。</li>
<li><code>malloc</code>分配的内存空间的大小必须是有效的，不能为负数或零。</li>
<li><code>malloc</code>分配的内存空间的大小可能会受到系统的限制，例如堆的大小。</li>
<li><code>malloc</code>分配的内存空间的大小可能会受到编译器的优化，例如对齐。</li>
<li><code>malloc</code>分配的内存空间的大小可能会受到操作系统的限制，例如虚拟内存的大小。</li>
<li><code>malloc</code>分配的内存空间的大小可能会受到进程的限制，例如进程的可用内存。</li>
<li><code>malloc</code>分配的内存空间的大小可能会受到硬件的限制，例如内存的速度。</li>
<li><code>malloc</code>分配的内存空间的大小可能会受到进程的限制，例如进程的可用内存。</li>
</ul>
</li>
</ul>
<h3><code>calloc</code> 函数</h3>
<ul>
<li><strong>功能</strong>：在堆上分配指定大小的内存空间，并将其初始化为零。</li>
<li><strong>函数原型</strong>：<code>void *calloc(size_t num, size_t size);</code></li>
<li><strong>参数</strong>：
<ul>
<li><code>num</code>是要分配的元素个数。</li>
<li><code>size</code>是每个元素的大小，以字节为单位。</li>
</ul>
</li>
<li><strong>返回值</strong>：如果分配成功，返回一个指向分配内存空间的指针；如果分配失败，返回<code>NULL</code>。</li>
<li><strong>注意事项</strong>：
<ul>
<li>使用<code>calloc</code>分配的内存空间需要手动释放，否则会导致内存泄漏。</li>
<li><code>calloc</code>分配的内存空间的初始值是零。</li>
<li><code>calloc</code>分配的内存空间的大小是<code>num</code>乘以<code>size</code>。</li>
<li><code>calloc</code>分配的内存空间的大小可能会受到系统的限制，例如堆的大小。</li>
<li><code>calloc</code>分配的内存空间的大小可能会受到编译器的优化，例如对齐。</li>
<li><code>calloc</code>分配的内存空间的大小可能会受到操作系统的限制，例如虚拟内存的大小。</li>
<li><code>calloc</code>分配的内存空间的大小可能会受到进程的限制，例如进程的可用内存。</li>
<li><code>calloc</code>分配的内存空间的大小可能会受到硬件的限制，例如内存的速度。</li>
<li><code>calloc</code>分配的内存空间的大小可能会受到进程的限制，例如进程的可用内存。</li>
<li><code>calloc</code>分配的内存空间的大小可能会受到编译器的限制，例如编译器的优化。</li>
<li><code>calloc</code>分配的内存空间的大小可能会受到操作系统的限制，例如操作系统的内存管理。</li>
<li><code>calloc</code>分配的内存空间的大小可能会受到硬件的限制，例如硬件的内存管理。</li>
<li><code>calloc</code>分配的内存空间的初始值是零。</li>
</ul>
</li>
</ul>
<h3><code>realloc</code> 函数</h3>
<ul>
<li><strong>功能</strong>：重新分配已分配的内存空间的大小。</li>
<li><strong>函数原型</strong>：<code>void *realloc(void *ptr, size_t size);</code></li>
<li><strong>参数</strong>：
<ul>
<li><code>ptr</code>是指向已分配内存空间的指针。</li>
<li><code>size</code>是重新分配后的内存空间的大小，以字节为单位。</li>
</ul>
</li>
<li><strong>返回值</strong>：如果重新分配成功，返回一个指向重新分配内存空间的指针；如果重新分配失败，返回<code>NULL</code>。</li>
<li><strong>注意事项</strong>：
<ul>
<li>使用<code>realloc</code>重新分配的内存空间需要手动释放，否则会导致内存泄漏。</li>
<li><code>realloc</code>重新分配的内存空间的大小可能会受到系统的限制，例如堆的大小。</li>
<li><code>realloc</code>重新分配的内存空间的大小可能会受到编译器的优化，例如对齐。</li>
<li><code>realloc</code>重新分配的内存空间的大小可能会受到操作系统的限制，例如虚拟内存的大小。</li>
<li><code>realloc</code>重新分配的内存空间的大小可能会受到进程的限制，例如进程的可用内存。</li>
<li><code>realloc</code>重新分配的内存空间的大小可能会受到硬件的限制，例如内存的速度。</li>
<li><code>realloc</code>重新分配的内存空间的大小可能会受到进程的限制，例如进程的可用内存。</li>
<li><code>realloc</code>重新分配的内存空间的大小可能会受到编译器的限制，例如编译器的优化。</li>
<li><code>realloc</code>重新分配的内存空间的大小可能会受到操作系统的限制，例如操作系统的内存管理。</li>
<li><code>realloc</code>重新分配的内存空间的大小可能会受到硬件的限制，例如硬件的内存管理。</li>
<li><code>realloc</code>重新分配的内存空间的初始值是不确定的，可能包含垃圾数据。</li>
</ul>
</li>
</ul>
<h3><code>free</code> 函数</h3>
<ul>
<li><strong>功能</strong>：释放之前通过<code>malloc</code>、<code>calloc</code>或<code>realloc</code>分配的内存空间。</li>
<li><strong>函数原型</strong>：<code>void free(void *ptr);</code></li>
<li><strong>参数</strong>：<code>ptr</code>是指向要释放的内存空间的指针。</li>
<li><strong>注意事项</strong>：
<ul>
<li>使用<code>free</code>释放的内存空间必须是通过<code>malloc</code>、<code>calloc</code>或<code>realloc</code>分配的，否则会导致未定义行为。</li>
<li>使用<code>free</code>释放的内存空间必须是之前分配的内存空间，不能是栈上的变量或全局变量。</li>
<li>使用<code>free</code>释放的内存空间必须是连续的，不能是分散的。</li>
<li>使用<code>free</code>释放的内存空间必须是之前分配的内存空间，不能是之前分配的内存空间的一部分。</li>
</ul>
</li>
</ul>
<h2><code>math.h</code> 头文件</h2>
<ul>
<li><code>sqrt</code> 函数</li>
<li><code>abs</code> 函数</li>
<li><code>sin</code> 函数</li>
</ul>
<h2><code>stdbool.h</code> 头文件</h2>
<ul>
<li>C 语言的布尔类型(true 与 false)</li>
</ul>
<blockquote>
<p><a href="https://www.runoob.com/w3cnote/c-bool-true-false.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/w3cnote/c-bool-true-false.html</a></p>
</blockquote>
<h2><code>string.h</code> 头文件</h2>
<ul>
<li><code>memset</code> 函数</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>文件操作</title>
      <link>https://em.rewi.xyz/C/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html</link>
      <guid>https://em.rewi.xyz/C/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">文件操作</source>
      <description>文件操作</description>
      <category>C</category>
      <pubDate>Wed, 16 Apr 2025 14:39:03 GMT</pubDate>
      <content:encoded><![CDATA[<h2><strong>一、文件打开的核心函数：<code>fopen()</code></strong></h2>
<p><code>fopen</code> 是C语言中用于打开文件的标准函数，其语法为：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">FILE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fopen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">filename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li><strong>参数说明</strong>：
<ul>
<li><code>filename</code>：要打开的文件名（可以是绝对路径或相对路径）。</li>
<li><code>mode</code>：文件打开模式，决定了文件的访问权限和行为（具体模式见下文）。</li>
</ul>
</li>
<li><strong>返回值</strong>：
<ul>
<li>成功时返回指向文件的 <code>FILE</code> 指针。</li>
<li>失败时返回 <code>NULL</code>，需通过 <code>perror</code> 或 <code>errno</code> 处理错误。</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>存储器件</title>
      <link>https://em.rewi.xyz/hardware/%E5%AD%98%E5%82%A8%E5%99%A8%E4%BB%B6.html</link>
      <guid>https://em.rewi.xyz/hardware/%E5%AD%98%E5%82%A8%E5%99%A8%E4%BB%B6.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">存储器件</source>
      <description>存储器件</description>
      <category>hardware</category>
      <pubDate>Wed, 16 Apr 2025 14:39:03 GMT</pubDate>
      <content:encoded><![CDATA[<h3><strong>1. 存储位置与硬件类型</strong></h3>
<ul>
<li><strong>主存储器（RAM）</strong>：
<ul>
<li><strong>类型</strong>：通常是 <strong>动态随机存取存储器（DRAM）</strong>，部分高速缓存可能使用 <strong>静态随机存取存储器（SRAM）</strong>。</li>
<li><strong>特点</strong>：RAM是易失性存储器，断电后数据丢失，但存取速度较快，适合临时存储程序运行时的数据。</li>
<li><strong>栈的物理位置</strong>：栈是RAM中的一块连续区域，用于存储函数调用的上下文（如局部变量、函数参数、返回地址等）。</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>SPI接口</title>
      <link>https://em.rewi.xyz/hardware/SPI%E6%8E%A5%E5%8F%A3.html</link>
      <guid>https://em.rewi.xyz/hardware/SPI%E6%8E%A5%E5%8F%A3.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">SPI接口</source>
      <description>SPI硬件接口</description>
      <category>hardware</category>
      <pubDate>Wed, 16 Apr 2025 07:11:34 GMT</pubDate>
      <content:encoded><![CDATA[<p>SPI接口一般使用四条信号线通信：<br>
SDI（数据输入），SDO（数据输出），SCK（时钟），CS（片选）</p>
<p>SCK (Serial Clock) 、MOSI (Master Output Slave Input)、MISO (Master Input Slave Output)、CS (Chip Select)</p>
<p><code>MISO</code>： 主设备输入/从设备输出引脚。该引脚在从模式下发送数据，在主模式下接收数据。<br>
<code>MOSI</code>： 主设备输出/从设备输入引脚。该引脚在主模式下发送数据，在从模式下接收数据。<br>
<code>SCLK</code>：串行时钟信号，由主设备产生。<br>
<code>CS/SS</code>：从设备片选信号，由主设备控制。它的功能是用来作为“片选引脚”，也<strong>就是选择指定的从设备</strong>，让主设备可以单独地与特定从设备通讯，避免数据线上的冲突。</p>
<h2>SPI一对一</h2>
<figure><figcaption>SPI一对一</figcaption></figure>
<h2>SPI一对多</h2>
<figure><figcaption>SPI一对多</figcaption></figure>
<h2>SPI原理图连接示例</h2>
<figure><figcaption>SPI原理图连接示例</figcaption></figure>
<h2>参考资料</h2>
<ul>
<li>[SPI原理超详细讲解</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>SPI通信</title>
      <link>https://em.rewi.xyz/protocol/SPI%E9%80%9A%E4%BF%A1.html</link>
      <guid>https://em.rewi.xyz/protocol/SPI%E9%80%9A%E4%BF%A1.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">SPI通信</source>
      <description>SPI通信</description>
      <category>protocol</category>
      <pubDate>Wed, 16 Apr 2025 07:11:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2>定义</h2>
<div class="hint-container tip">
<p class="hint-container-title">SPI（Serial Peripheral Interface，串行外设接口）</p>
<p>SPI 是英语Serial Peripheral interface的缩写，顾名思义就是串行外围设备接口。是Motorola(摩托罗拉)首先在其MC68HCXX系列处理器上定义的。</p>
<p>SPI，是一种高速的，全双工，同步的通信总线，并且在芯片的管脚上只占用四根线，节约了芯片的管脚，同时为PCB的布局上节省空间，提供方便，主要应用在 EEPROM，FLASH，实时时钟，AD转换器，还有数字信号处理器和数字信号解码器之间。</p>
<p>SPI（Serial Peripheral Interface）是一种串行通信协议，用于连接微控制器（MCU）与外部设备，如传感器、存储器、显示器等。</p>
<p>SPI分为主、从两种模式，一个SPI通讯系统需要包含一个（且只能是一个）主设备，一个或多个从设备。提供时钟的为主设备（Master），接收时钟的设备为从设备（Slave），SPI接口的读写操作，都是由主设备发起。当存在多个从设备时，通过各自的片选信号进行管理。</p>
<p>SPI是全双工且SPI没有定义速度限制，一般的实现通常能达到甚至超过10 Mbps</p>
</div>
<h2>硬件电路设计</h2>
<p><a href="/hardware/SPI%E6%8E%A5%E5%8F%A3.html" target="_blank">参考硬件部分</a></p>
<h2>软件时序设计</h2>
<h3>SPI设备选择</h3>
<p>SPI是［单主设备（ single-master ）］通信协议，这意味着总线中的只有一支中心设备能发起通信。当SPI主设备想读/写［从设备］时，它首先拉低［从设备］对应的SS线（SS是低电平有效），接着开始发送工作脉冲到时钟线上，在相应的脉冲时间上，［主设备］把信号发到MOSI实现“写”，同时可对MISO采样而实现“读”，如下图：</p>
<figure><figcaption>SPI设备选择</figcaption></figure>
<h3>SPI数据发送接收</h3>
<p>SPI主机和从机都有一个串行移位寄存器，主机通过向它的SPI串行寄存器写入一个字节来发起一次传输。</p>
<ol>
<li>首先拉低对应SS信号线，表示与该设备进行通信</li>
<li>主机通过发送SCLK时钟信号，来告诉从机写数据或者读数据<br>
这里要注意，SCLK时钟信号可能是低电平有效，也可能是高电平有效，因为SPI有四种模式，这个我们在下面会介绍</li>
<li>主机(Master)将要发送的数据写到发送数据缓存区(Menory)，缓存区经过移位寄存器(0~7)，串行移位寄存器通过MOSI信号线将字节一位一位的移出去传送给从机，，同时MISO接口接收到的数据经过移位寄存器一位一位的移到接收缓存区。</li>
<li>从机(Slave)也将自己的串行移位寄存器(0~7)中的内容通过MISO信号线返回给主机。同时通过MOSI信号线接收主机发送的数据，这样，两个移位寄存器中的内容就被交换。</li>
</ol>
<figure><figcaption>SPI数据发送接收</figcaption></figure>
<p>SPI只有主模式和从模式之分，没有读和写的说法，外设的写操作和读操作是同步完成的。如果只进行写操作，主机只需忽略接收到的字节；反之，若主机要读取从机的一个字节，就必须发送一个空字节来引发从机的传输。也就是说，你发一个数据必然会收到一个数据；你要收一个数据必须也要先发一个数据。</p>
<h3>SPI通信的四种模式</h3>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>SPI的极性Polarity和相位Phase，最常见的写法是CPOL和CPHA，不过也有一些其他写法，简单总结如下：</p>
<p>(1) CKPOL (Clock Polarity) = CPOL = POL = Polarity = （时钟）极性<br>
(2) CKPHA (Clock Phase)   = CPHA = PHA = Phase = （时钟）相位<br>
(3) SCK=SCLK=SPI的时钟<br>
(4) Edge=边沿，即时钟电平变化的时刻，即上升沿(rising edge)或者下降沿(falling edge)</p>
<p>对于一个时钟周期内，有两个edge，分别称为：</p>
<p>(1)Leading edge=前一个边沿=第一个边沿，对于开始电压是1，<br>
那么就是1变成0的时候，对于开始电压是0，那么就是0变成1的时候；</p>
<p>(2)Trailing edge=后一个边沿=第二个边沿，对于开始电压是1，<br>
那么就是0变成1的时候（即在第一次1变成0之后，才可能有后面的0变成1），<br>
对于开始电压是0，那么就是1变成0的时候；</p>
</div>
<blockquote>
<p>SPI的四种模式，简单地讲就是设置SCLK时钟信号线的那种信号为有效信号</p>
</blockquote>
<p>SPI通信有4种不同的操作模式，不同的从设备可能在出厂是就是配置为某种模式，这是不能改变的；但我们的通信双方必须是工作在同一模式下，所以我们可以对我们的主设备的SPI模式进行配置，通过CPOL（时钟极性）和CPHA（时钟相位）来<br>
控制我们主设备的通信模式，具体如下：</p>
<p>时钟极性<code>CPOL</code>(Clock Polarity)定义了时钟空闲状态电平：</p>
<ul>
<li><code>CPOL=0</code>，表示当SCLK=0时处于空闲态，所以有效状态就是SCLK处于高电平时</li>
<li><code>CPOL=1</code>，表示当SCLK=1时处于空闲态，所以有效状态就是SCLK处于低电平时</li>
</ul>
<p>时钟相位<code>CPHA</code>(Clock Phase)定义数据的采集时间。</p>
<ul>
<li><code>CPHA=0</code>，在时钟的第一个跳变沿（上升沿或下降沿）进行数据采样。，在第2个边沿发送数据</li>
<li><code>CPHA=1</code>，在时钟的第二个跳变沿（上升沿或下降沿）进行数据采样。，在第1个边沿发送数据</li>
</ul>
<p>例如：</p>
<ul>
<li>
<p><code>Mode0：CPOL=0，CPHA=0</code>：此时空闲态时，SCLK处于低电平，数据采样是在第1个边沿，也就是SCLK由低电平到高电平的跳变，所以数据采样是在上升沿(准备数据），（发送数据）数据发送是在下降沿。</p>
</li>
<li>
<p><code>Mode1：CPOL=0，CPHA=1</code>：此时空闲态时，SCLK处于低电平，数据发送是在第1个边沿，也就是SCLK由低电平到高电平的跳变，所以数据采样是在下降沿，数据发送是在上升沿。</p>
</li>
<li>
<p><code>Mode2：CPOL=1，CPHA=0</code>：此时空闲态时，SCLK处于高电平，数据采集是在第1个边沿，也就是SCLK由高电平到低电平的跳变，所以数据采集是在下降沿，数据发送是在上升沿。</p>
</li>
<li>
<p><code>Mode3：CPOL=1，CPHA=1</code>：此时空闲态时，SCLK处于高电平，数据发送是在第1个边沿，也就是SCLK由高电平到低电平的跳变，所以数据采集是在上升沿，数据发送是在下降沿。</p>
</li>
</ul>
<p><br>
<br>
</p>
<p>它们的区别是定义了在时钟脉冲的哪条边沿转换（toggles）输出信号，哪条边沿采样输入信号，还有时钟脉冲的稳定电平值（就是时钟信号无效时是高还是低）。每种模式由一对参数刻画，它们称为时钟极（clock polarity）CPOL与时钟期（clock phase）CPHA。</p>
<h3>SPI的通信协议</h3>
<figure><figcaption>SPI通信协议</figcaption></figure>
<p>主从设备必须使用相同的工作模式——SCLK、CPOL 和 CPHA，才能正常工作。如果有多个从设备，并且它们使用了不同的工作模式，那么主设备必须在读写不同从设备时需要重新修改对应从设备的模式。以上SPI总线协议的主要内容。</p>
<p>是不是感觉，这就完了？ SPI就是如此，他没有规定最大传输速率，没有地址方案，也没规定通信应答机制，没有规定流控制规则。</p>
<p>只要四根信号线连接正确，SPI模式相同，将CS/SS信号线拉低，即可以直接通信，一次一个字节的传输，读写数据同时操作，这就是SPI</p>
<p>些通信控制都得通过SPI设备自行实现，SPI并不关心物理接口的电气特性，例如信号的标准电压。</p>
<p>PS:<br>
这也是SPI接口的一个缺点：没有指定的流控制，没有应答机制确认是否接收到数据。</p>
<p>SPI的三种模式<br>
SPI工作在3中模式下，分别是运行、等待和停止。</p>
<p>运行模式（Run Mode）<br>
这是基本的操作模式</p>
<p>等待模式（Wait Mode）<br>
SPI工作在等待模式是一种可配置的低功耗模式，可以通过SPICR2寄存器的SPISWAI位进行控制。在等待模式下，如果SPISWAI位清0，SPI操作类似于运行模式。如果SPISWAI位置1，SPI进入低功耗状态，并且SPI时钟将关闭。如果SPI配置为主机，所有的传输将停止，但是会在CPU进入运行模式后重新开始。如果SPI配置为从机，会继续接收和传输一个字节，这样就保证从机与主机同步。</p>
<p>停止模式（Stop Mode）<br>
为了降低功耗，SPI在停止模式是不活跃的。如果SPI配置为主机，正在进行的传输会停止，但是在CPU进入运行模式后会重新开始。如果SPI配置为从机，会继续接受和发送一个字节，这样就保证了从机与主机同步。</p>
<h2>配置步骤</h2>
<h3>1. 主从模式</h3>
<h4>描述</h4>
<ul>
<li>主设备（Master）控制时钟信号（SCLK），并发起通信。</li>
<li>从设备（Slave）响应主设备的请求。</li>
</ul>
<h4>详细说明</h4>
<ul>
<li><strong>主模式（Master）</strong>：设备生成时钟信号（SCK），并控制通信的启动。</li>
<li><strong>从模式（Slave）</strong>：依赖主设备的时钟信号，被动响应主设备的指令。</li>
<li><strong>配置方法</strong>：需在控制器中设置为主或从模式（通常主设备为微控制器）。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>中断</title>
      <link>https://em.rewi.xyz/advance/%E4%B8%AD%E6%96%AD.html</link>
      <guid>https://em.rewi.xyz/advance/%E4%B8%AD%E6%96%AD.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">中断</source>
      <description>关中断 本质 操作：通过指令（如ARM的CPSID I或__disable_irq()）关闭全局中断响应（禁止CPU响应新的中断）。 目的：保护临界区代码（如共享资源操作）不被中断打断，确保原子性。 关中断期间的中断处理机制 关键硬件行为 中断标志（Pending Flag） 作用：记录中断请求是否发生（即使中断被禁用）。 行为： 若中断被禁用（关中断...</description>
      <category>MCU</category>
      <pubDate>Tue, 15 Apr 2025 09:58:18 GMT</pubDate>
      <content:encoded><![CDATA[<h2>关中断</h2>
<h3>本质</h3>
<p>操作：通过指令（如ARM的<code>CPSID I</code>或<code>__disable_irq()</code>）关闭全局中断响应（禁止CPU响应新的中断）。</p>
<p>目的：保护临界区代码（如共享资源操作）不被中断打断，确保原子性。</p>
<h3>关中断期间的中断处理机制</h3>
<p>| 中断类型 | 关中断期间的行为 | 数据是否可能丢失 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>优先级</title>
      <link>https://em.rewi.xyz/advance/%E4%BC%98%E5%85%88%E7%BA%A7.html</link>
      <guid>https://em.rewi.xyz/advance/%E4%BC%98%E5%85%88%E7%BA%A7.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">优先级</source>
      <description>优先级反转 优先级反转（Priority Inversion） 优先级反转（Priority Inversion） 是实时操作系统（RTOS）中的一种现象，指高优先级任务因等待低优先级任务持有的资源而被阻塞，而此时中优先级任务抢占执行，导致高优先级任务无法及时运行，破坏系统的实时性。常见于使用互斥锁（Mutex）等同步机制时。 典型场景 任务优先级：高...</description>
      <category>MCU</category>
      <pubDate>Tue, 15 Apr 2025 09:58:18 GMT</pubDate>
      <content:encoded><![CDATA[<h2>优先级反转</h2>
<div class="hint-container tip">
<p class="hint-container-title">优先级反转（Priority Inversion）</p>
<p>优先级反转（Priority Inversion） 是实时操作系统（RTOS）中的一种现象，指高优先级任务因等待低优先级任务持有的资源而被阻塞，而此时中优先级任务抢占执行，导致高优先级任务无法及时运行，破坏系统的实时性。常见于使用互斥锁（Mutex）等同步机制时。</p>
</div>
<h3>典型场景</h3>
<p>任务优先级：高（T_high）、中（T_medium）、低（T_low）。</p>
<p>资源竞争：T_low 持有资源（如锁），T_high 请求该资源被阻塞。</p>
<p>抢占时机：T_medium 在 T_low 释放资源前就绪并抢占，导致 T_high 被长时间阻塞</p>
<h3>问题根源</h3>
<p>调度机制缺陷：默认调度器仅按优先级分配 CPU，未考虑资源依赖。</p>
<p>共享资源管理不当：低优先级任务长时间占用资源且未释放。</p>
<h3>示例分析</h3>
<p>场景复现：<br>
T_low 获取锁，进入临界区。</p>
<p>T_high 就绪，请求同一锁，被阻塞。</p>
<p>T_medium 就绪，抢占 T_low 执行（因优先级高于 T_low）。</p>
<p>T_high 必须等待 T_medium 和 T_low 均完成后才能运行。</p>
<p>结果：高优先级任务实际延迟由中、低优先级任务共同决定，违背实时性要求。</p>
<h3>解决方法</h3>
<h4>方法 1：优先级继承协议（Priority Inheritance Protocol）</h4>
<p>原理：当高优先级任务因资源被低优先级任务阻塞时，临时提升低优先级任务的优先级至高优先级任务的级别，使其尽快释放资源。</p>
<p>操作步骤：<br>
T_high 请求被 T_low 持有的锁，触发优先级继承。</p>
<p>T_low 的优先级被提升至与 T_high 相同。</p>
<p>T_low 执行完临界区后释放锁，优先级恢复原状。</p>
<p>T_high 立即获得锁并执行。</p>
<p>优势：避免中优先级任务插队，缩短阻塞时间。</p>
<p>实现：需操作系统支持（如 FreeRTOS 的 xSemaphoreCreateMutex() 默认启用优先级继承）。</p>
<h4>方法 2：优先级天花板协议（Priority Ceiling Protocol）</h4>
<p>原理：为每个资源预先定义“天花板优先级”（所有可能访问该资源的任务的最高优先级）。当任务持有资源时，其优先级自动提升至天花板优先级。</p>
<p>操作步骤：<br>
T_low 获取锁时，优先级提升至天花板优先级（如 T_high 的优先级）。</p>
<p>T_low 执行期间无法被中优先级任务抢占。</p>
<p>T_low 释放锁后，优先级恢复原状。</p>
<p>优势：彻底防止优先级反转，但可能增加任务优先级切换开销。</p>
<p>实现：需手动配置资源的天花板优先级（如 POSIX 的 pthread_mutexattr_setprotocol()）。</p>
<h4>方法 3：禁止临界区抢占</h4>
<p>原理：在任务持有共享资源时，禁止任务切换（如关闭中断或调度器）。</p>
<p>适用场景：极短临界区操作（微秒级），如寄存器配置。</p>
<p>风险：可能增加中断延迟，需严格限制临界区代码长度。</p>
<h3>监控优先级反转</h3>
<p>调试工具：使用 Tracealyzer 等工具可视化任务阻塞链。</p>
<p>API 检测：调用 uxTaskPriorityGet() 检查任务优先级是否异常提升。</p>
<h3>设计建议</h3>
<p>最小化临界区：减少锁持有时间（如仅拷贝数据，不在临界区内处理）。</p>
<p>优先级规划：确保访问同一资源的任务优先级相近，或使用天花板协议。</p>
<p>替代方案：考虑无锁数据结构（如环形队列）或原子操作。</p>
]]></content:encoded>
    </item>
    <item>
      <title>QA</title>
      <link>https://em.rewi.xyz/C/QA.html</link>
      <guid>https://em.rewi.xyz/C/QA.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">QA</source>
      <description>问题</description>
      <category>C</category>
      <pubDate>Tue, 15 Apr 2025 09:58:18 GMT</pubDate>
      <content:encoded><![CDATA[<h2>指针</h2>
<h3>1. 什么是悬空指针？</h3>
<p>悬空指针是指向已释放内存位置的指针。使用悬空指针会导致未定义行为，包括程序崩溃或数据损坏。</p>
<h3>2. 为什么将指针置为 <code>NULL</code>？</h3>
<p>将指针置为 <code>NULL</code> 后，如果尝试通过该指针访问内存，程序会立即崩溃（在大多数操作系统和编译器下），而不是进行未定义行为。这使得调试变得更容易，因为错误会立即显现出来。</p>
<h3>3. <code>char*</code>、<code>int*</code> 区别与占用字节数</h3>
<ol>
<li>指向的数据类型（内存布局）</li>
</ol>
<ul>
<li><code>char*</code>：这是一个指向字符（<code>char</code>）数据类型的指针。<code>char</code> 通常用于存储<code>ASCII</code>字符或其他单字节编码的数据。</li>
<li><code>int*</code>：这是一个指向整数（<code>int</code>）数据类型的指针。<code>int</code> 用于存储整数值，其大小取决于编译器和平台。</li>
</ul>
<ol start="2">
<li>解引用结果</li>
</ol>
<ul>
<li>当你解引用一个 <code>char*</code>指针（例如<code>*ptrChar</code>），你得到的是一个 char 类型的值，它通常是1个字节大小，并且可以表示一个字符或一个8位的整数值。</li>
<li>解引用一个<code>int*</code>指针（例如<code>*ptrInt</code>）会给你一个 <code>int</code> 类型的值，它的大小通常是4个字节（32位系统上），可以存储更大的整数值范围。</li>
</ul>
<ol start="3">
<li>用途</li>
</ol>
<ul>
<li><code>char*</code> 常被用来处理字符串（以空字符 \0 结尾的一系列字符），以及需要逐字节操作的场合。</li>
<li><code>int*</code> 更适合于需要处理大量数字运算或者存储较大整数值的情况。</li>
</ul>
<ol start="4">
<li>占用字节数</li>
</ol>
<ul>
<li>指针本身的大小：在现代计算机系统中，指针变量本身占据的内存空间与其指向的数据类型无关，而是由系统的架构决定的。
<ul>
<li>例如，在32位系统上，所有类型的指针都占4个字节；而在64位系统上，则是8个字节。</li>
<li>这意味着无论是 <code>char*</code>还是 <code>int*</code>，它们在相同的系统架构下占用的字节数是相同的。</li>
</ul>
</li>
<li>指向数据类型的大小：
<ul>
<li><code>char</code> 占用1个字节。</li>
<li><code>int</code> 的大小根据不同的平台可能有所不同，但一般为4个字节（32位）或2个字节（某些旧系统）。在大多数现代平台上，int 是4个字节。</li>
<li>虽然指针变量本身的大小与它们指向的数据类型无关，但是当你通过指针访问或修改数据时，所操作的数据量是由指针指向的数据类型决定的。
<ul>
<li>例如，通过 int* 修改数据时，每次操作将涉及4个字节的数据。</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>IIC接口</title>
      <link>https://em.rewi.xyz/hardware/IIC%E6%8E%A5%E5%8F%A3.html</link>
      <guid>https://em.rewi.xyz/hardware/IIC%E6%8E%A5%E5%8F%A3.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">IIC接口</source>
      <description>IIC硬件接口</description>
      <category>hardware</category>
      <pubDate>Tue, 15 Apr 2025 09:58:18 GMT</pubDate>
      <content:encoded><![CDATA[<p>所有12C设备的SCL连在一起,SDA连在一起<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p>
<p>IIC总线上所有器件的SDA、SCL引脚输出驱动都为 开漏(OD) 结构，通过外接上拉电阻实现总线上所有节点SDA、SCL信号的线与逻辑关系；<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup><br>
总线上的所有设备通过软件寻址且具有唯一的地址（7位或10位）。7位“从机专用地址码”，其高4位为由生产厂家制定的设备类型地址，低3位为器件引脚定义地址（由使用者定义）；10位地址不常见；<br>
IIC总线允许挂载最多的设备数量取决于总线上最大电容值，一般为400pf（Hs模式100pf）</p>
<h2>所有设备的SDA和SCL分别接在一起，并且两条线上各有一个上拉电阻作用</h2>
<p>SCL和SDA各添加一个上拉电阻,阻值一般为4.7KΩ左右</p>
<p>我们先讨论在没有上拉电阻的情况下会发生什么。<br>
主机绝对掌控SCL，所以SCL输出可以配置推挽输出，从机的SCL配置成浮空输入或上拉输入，那就没问题；但是在SDA上就不一样了，如果没控制好时序，极有可能发生两个引脚都输出，主机SDA输出高电平，从机SDA输出低电平，会造成直接短路，所以要避免这种情况发生。</p>
<p>于是IIC禁止所有设备输出强上拉的高电平，采用开漏输出加外置弱上拉电阻的电路结构。开漏输出中，当输出低电平时，下管导通实现强下拉，输出高电平时，下管断开且没有上管，于是呈现浮空状态。这样所有设备只能输出低电平而不能输出高电平。</p>
<p>为了避免低电平造成的引脚浮空，就需要在SCL和SDA总线各外置一个上拉电阻。这样的设计有3个好处：</p>
<ol>
<li>总线不会同时有高电平和低电平的输出状态</li>
<li>避免了引脚模式的频繁切换<br>
开漏加弱上拉模式同时兼具输入和输出模式。当设备需要输出时，可以通过是否输出低电平使得总线电平变化；当引脚需要输入时，可以输出高电平，相当于断开引脚，观察总线电平变化。所以输入之前可以输出高电平，不需要切换输入模式</li>
<li>实现“线与”<br>
只要有一个设备输出低电平，这个总线就是低电平，只有所有设备输出高电平（因为高电平相当于都断开引脚，上拉电阻将总线电平拉高），总线才处于高电平</li>
</ol>
<h2>总线结构</h2>
<p>IIC使用两根信号线进行通信，要求两根线都使用 开漏输出接上拉电阻 的配置，以此实现总线上所有节点SDA、SCL信号的 线与 逻辑关系。<br>
R<sub>p</sub> 电阻的取值有一定的要求，太小会导致灌入电流过大，使’低’数据不稳定，甚至损坏端口；太大会导致信号上升缓慢，使得数据传输出错。在不同应用场景及供电电压下有不同的取值要求。</p>
<figure><figcaption>结构</figcaption></figure>
<p><strong>线与</strong> 逻辑使得总线上不会出现数据冲突，实现了总线的仲裁控制。总线的控制权会交给最后一个输出低电平的设备，其它设备（输出高）通过检测总线上的电平状态（状态低），对比与自己输出状态不一致，则自动退出对总线的控制请求，从而防止了总线上的数据冲突。<br>
  漏极开路/集电极开路的缺点是对于一个距离长的数据线，信号传输速率得不到有效保证。更长的走线对于输出驱动器表现为更大的容性负载，等效容性负载C和信号线的上拉电阻R构成RC振荡器。RC越大，意味着反射和振荡越强，从而影响总线的信号完整性。这也是I2C规范对总线电容值约束在400pf以内的原因。高速模式对信号完整性的要求更高，协议有定义相关SDA/SCL处理办法，以保证在数据线够长、速率够高时，信号完整性也可以得到满足。</p>
<h2>总线的拉高和拉低</h2>
<p>下图展示了IIC总线拉低和拉高的过程。</p>
<ul>
<li>拉低：设备的逻辑电路控制FET打开，总线通过导通的FET连接到GND从而被拉低</li>
<li>拉高：设备的逻辑电路控制FET关闭，总线通过上拉电阻Rp连接到VDD从而被拉高</li>
</ul>
<figure><figcaption>拉高拉低</figcaption></figure>
<h2>参考资料</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="footnote1" class="footnote-item"><p><a href="https://blog.csdn.net/weixin_44115575/article/details/136713792" target="_blank" rel="noopener noreferrer">IIC通讯协议详解（电路和时序图）</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote2" class="footnote-item"><p><a href="https://blog.csdn.net/qq_39829913/article/details/104718185" target="_blank" rel="noopener noreferrer">基础通信协议之 IIC (I2C) 详细讲解</a> <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>IIC通信</title>
      <link>https://em.rewi.xyz/protocol/IIC%E9%80%9A%E4%BF%A1.html</link>
      <guid>https://em.rewi.xyz/protocol/IIC%E9%80%9A%E4%BF%A1.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">IIC通信</source>
      <description>IIC通信</description>
      <category>protocol</category>
      <pubDate>Tue, 15 Apr 2025 09:58:18 GMT</pubDate>
      <content:encoded><![CDATA[<h2>简介</h2>
<div class="hint-container tip">
<p class="hint-container-title">I2C（Inter-Integrated Circuit）</p>
<p>[^refer1] [^refer2]</p>
<p>IIC（Inter-Integrated Circuit）是 IIC Bus 简称，中文叫集成电路总线。由飞利浦公司在1980年代为了让主板、嵌入式系统或手机用以连接低速周边设备而发展。<br>
I2C（Inter-Integrated Circuit）是一种串行通信协议，也称为IIC（Inter-IC、Inter IC BUS）总线，用于连接微控制器（MCU）与外部设备，如传感器、存储器、显示器等。</p>
<p>它是一种半双工通信协议，支持多主机和多从机模式。</p>
<p>在I2C总线上，可以同时连接多个设备，每个设备都有一个唯一的地址，用于在总线上唯一识别该设备。</p>
<p>由于存在时钟线，所以单片机随时可以暂停传输去处理中断的事情。</p>
<p>两根通信线：SCL(Serial Clock)、SDA(Serial Data)</p>
</div>
<p>IIC总线上所有器件都具有“自动应答”功能，保证数据传输的正确性； 主机和从机的区别在于对SCL的发送权，只有主机才能发送SCL；<br>
IIC中，<strong>任何时候都是主机（CPU）完全掌控SCL线</strong>，在空闲状态下，主机可以主动发起对SDA线的控制，只有在<strong>从机发送数据（主机发送读取从机命令之后）和从机应答</strong>的时候，主机才会转交SDA的控制权给从机。</p>
<p>一主多从模式：只有一个主设备（通常是微控制器）控制整个通信过程，可以与多个从设备进行通信。主设备负责发送起始条件、设备地址以及读写指令，从而选择特定的从设备进行数据交换。其他从设备则根据其地址是否匹配来决定是否响应主设备的通信请求。</p>
<p>多主多从模式： 在多主多从模式下，除了多个从设备之外，还可以有多个主设备连接到同一条I2C总线上。不同主设备之间会通过仲裁机制来协调总线的访问权，避免通信冲突和数据丢失。当一个主设备想要访问总线上的某个从设备时，它必须首先获得总线的控制权，其他主设备则处于被动监听状态。</p>
<p>任何时刻都只存在简单的主从关系，按数据传输的方向，主机可以是主发送器或主接收器；<br>
支持多主机。在总线上存在多个主机时，通过冲突检测和仲裁机制防止多个主机同时发起数据传输时存在的冲突；</p>
<p>|                模式              |     速度   |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>通信数据格式</title>
      <link>https://em.rewi.xyz/protocol/%E9%80%9A%E4%BF%A1%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.html</link>
      <guid>https://em.rewi.xyz/protocol/%E9%80%9A%E4%BF%A1%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">通信数据格式</source>
      <description>通信数据格式--ASCII、HEX、Protobuf</description>
      <category>protocol</category>
      <pubDate>Tue, 15 Apr 2025 09:58:18 GMT</pubDate>
      <content:encoded><![CDATA[<h2>ASCII</h2>
<div class="hint-container tip">
<p class="hint-container-title">ASCII（American Standard Code for Information Interchange）</p>
<p>是一种字符编码标准，用于表示文本中的字符。每个字符都对应一个7位或8位的二进制数。</p>
</div>
<p>特点<br>
范围：标准 ASCII 使用7位编码，共128个字符，包括控制字符（如换行、回车）和可打印字符（如字母、数字、标点符号）。<br>
可读性：ASCII 是人类可读的，因为它直接表示字符。<br>
用途：广泛用于文本文件、源代码、网络协议等。</p>
<h2>HEX</h2>
<div class="hint-container tip">
<p class="hint-container-title">HEX（Hexadecimal）</p>
<p>是十六进制表示法，用于表示二进制数据。十六进制使用基数16，即用0-9和A-F表示。</p>
</div>
<p>特点<br>
简洁性：十六进制表示法可以更简洁地表示二进制数据，每个十六进制数字代表4位二进制数。<br>
用途：常用于调试、内存地址表示、数据压缩等领域。</p>
<h2>Protobuf</h2>
<div class="hint-container tip">
<p class="hint-container-title">Protobuf（Protocol Buffers）</p>
<p>是由 Google 开发的一种语言中立、平台中立、可扩展的序列化数据格式。它用于结构化数据的序列化和反序列化。<br>
Protocol Buffers（全称为Protocol Buffer）是Google的一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于（数据）通信协议、数据存储等。</p>
</div>
<p><em><strong>特点</strong></em><br>
高效性：Protobuf 比传统的文本格式（如 XML、JSON）更紧凑和高效，适合高性能的网络通信和数据存储。<br>
灵活性：支持向后兼容和向前兼容，数据格式可以在不影响现有系统的情况下进行扩展。<br>
多语言支持：Protobuf 支持多种编程语言，如 C++, Java, Python 等。</p>
<p><em><strong>用途</strong></em><br>
用于网络通信协议的数据交换。<br>
用于配置文件和数据存储。</p>
<p><em><strong>示例</strong></em></p>
<div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">syntax</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "proto3"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 指定使用的语法版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 定义一个消息类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 字段1，类型为字符串，标签为1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  int32</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 字段2，类型为整数，标签为2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> email</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 字段3，类型为字符串，标签为3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">} </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 消息定义结束</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>QA待整理</title>
      <link>https://em.rewi.xyz/reference/QA%E5%BE%85%E6%95%B4%E7%90%86.html</link>
      <guid>https://em.rewi.xyz/reference/QA%E5%BE%85%E6%95%B4%E7%90%86.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">QA待整理</source>
      <description>XX中遇到回答不上的问题汇总，答上一个，移走一个，并记录移去的位置</description>
      <category>interview</category>
      <pubDate>Tue, 15 Apr 2025 09:58:18 GMT</pubDate>
      <content:encoded><![CDATA[<h2>yuweitek</h2>
<h3>JD</h3>
<p>C++ C socket 网络协议</p>
<p>1、按项目分配的任务完成linux应用开发方案的设计。<br>
2、负责公司产品的应用软件设计、编写和调试。<br>
3、保证代码质量及稳定性。<br>
4、编写产品技术文档，收集相关资料等。<br>
5、对软件应用的各个版本进行归类整理。</p>
<p>1、本科及以上学历，理工科相关专业。<br>
2、扎实的C/C++语言开发功底，有3年以上C语言实际开发经验。<br>
3、对Linux、Windows进程、线程、多任务、同步、异步操作有丰富的经验。<br>
4、熟悉socket、网络应用协议的开发和设计模式优先。<br>
5、有车规级产品开发或有嵌入式应用软件有深度优化经验优先。<br>
6、好学，上进，抗压，善于沟通，团队协作。</p>
<h3>相关信息</h3>
<p>好的，以下是C语言中常见的interview知识点分类整理。这些内容覆盖了基础语法、指针与内存管理、文件操作、数据结构、算法等核心领域，并结合实际interview中的高频问题进行总结。</p>
]]></content:encoded>
    </item>
    <item>
      <title>S32K14x</title>
      <link>https://em.rewi.xyz/reference/S32K14x.html</link>
      <guid>https://em.rewi.xyz/reference/S32K14x.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">S32K14x</source>
      <description>单片机</description>
      <category>reference</category>
      <pubDate>Tue, 15 Apr 2025 09:58:18 GMT</pubDate>
      <content:encoded><![CDATA[<h2>S32K146 与 S32K148</h2>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>S32K146 和 S32K148 是 NXP 半导体公司推出的 S32K 系列中的两款汽车级微控制器（MCU）。这两款 MCU 都基于 Arm Cortex-M4F 内核，具有高性能和低功耗的特点，并且都支持广泛的汽车应用，如车身控制模块、网关、ADAS 和信息娱乐系统。尽管它们属于同一系列，但在一些功能和资源配置上存在差异。</p>
</div>
<h3>主要区别</h3>
<h4>闪存和 RAM 大小</h4>
<p>S32K146：最多 512 KB 闪存和 64 KB SRAM。<br>
S32K148：最多 1 MB 闪存和 128 KB SRAM。S32K148 在存储容量上更大，适合需要更多代码和数据存储的应用。</p>
<h4>引脚数量和封装</h4>
<p>S32K146：提供多种封装选项，如 64 引脚、100 引脚和 144 引脚。<br>
S32K148：提供 144 引脚和 176 引脚封装选项。S32K148 提供更多的引脚选择，适合更复杂的应用。</p>
<h4>外设数量</h4>
<p>S32K146：支持 3 个 CAN-FD 接口，适合常规车载通信需求。<br>
S32K148：支持 4 个 CAN-FD 接口，适合需要更多通信通道的复杂应用。</p>
<h3>内核</h3>
<p>都基于 Arm Cortex-M4F 内核，具有浮点运算单元，提供高效的计算性能。<br>
支持 DSP 指令集，适用于信号处理应用。</p>
<h3>低功耗</h3>
<p>具有多种低功耗模式，如运行模式、睡眠模式和停止模式，以满足不同应用场景下的功耗需求。<br>
支持动态电压和频率调节（DVFS）。</p>
<h3>丰富的外设</h3>
<p>支持多种通信接口，包括 CAN-FD、LIN、SPI、I2C 和 UART。<br>
集成多通道 ADC、DAC、PWM、计时器和其他外设，满足多种传感和控制需求。</p>
<h3>安全功能</h3>
<p>符合 ISO 26262 ASIL B 功能安全标准，提供硬件安全机制，如 ECC、内存保护单元（MPU）和看门狗定时器。<br>
支持硬件加密和安全启动，确保系统安全性。</p>
<h3>工作温度范围</h3>
<p>两款 MCU 的工作温度范围相同，通常为 -40°C 到 125°C，适应严苛的汽车环境。</p>
]]></content:encoded>
    </item>
    <item>
      <title>keyword</title>
      <link>https://em.rewi.xyz/C/keyword.html</link>
      <guid>https://em.rewi.xyz/C/keyword.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">keyword</source>
      <description>关键字</description>
      <category>C</category>
      <pubDate>Thu, 10 Apr 2025 02:41:45 GMT</pubDate>
      <content:encoded><![CDATA[<h2><code>volatile</code>关键字</h2>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>volatile 关键字在 C、C++ 以及其他一些编程语言中用于告诉编译器，被修饰的变量可能会在程序的控制流之外被改变。这意味着编译器不应该对该变量进行任何优化操作，比如将它的值缓存到寄存器中，因为这可能导致读取不到变量的真实最新值。</p>
</div>
<h3>volatile 关键字的作用</h3>
<p><strong>防止编译器优化</strong>：当变量被声明为 volatile 后，编译器不会对这个变量的访问进行优化（例如缓存变量的值在寄存器里），每次访问都会直接从内存中读取或写入。<br>
<strong>确保可见性</strong>：在多线程编程或者硬件交互中，确保一个线程对变量所做的修改能够立即对其他线程可见。<br>
<strong>异步变化的通知</strong>：适用于那些可能由外部事件（如信号处理程序、中断服务例程等）修改的变量。</p>
<h3>嵌入式场景中的应用场景</h3>
<p>在嵌入式系统中，volatile 关键字特别有用，主要体现在以下几个方面：</p>
<p><strong>硬件寄存器访问</strong>：当你需要读写特定硬件寄存器时，这些寄存器的内容可能会由于硬件状态的变化而改变。使用 volatile 可以避免编译器优化掉对这些寄存器的重复读取或写入操作。<br>
<strong>中断服务例程（ISR）</strong>：如果某个变量可能在中断服务例程和主程序之间共享，则应将其声明为 volatile。这样可以确保主程序不会因为编译器优化而错过 ISR 对该变量做出的任何更新。<br>
<strong>信号处理</strong>：对于那些可能在信号处理器内部被修改的全局变量，应该声明为 volatile 来保证其值始终是最新的。<br>
<strong>多任务环境下的共享数据</strong>：虽然在嵌入式环境中较少涉及复杂的多线程问题，但在有多个任务并发执行的情况下，如果有共享的数据结构，也需要考虑使用 volatile 来确保数据的一致性和可见性。</p>
<h3><code>volatile</code> 如何影响变量存储</h3>
<p><code>volatile</code> 关键字并不会直接决定变量保存在哪里（如栈、堆或静态存储区），而是告诉编译器如何对待对该变量的访问。具体来说：</p>
<ul>
<li><strong>栈(Stack)</strong>: 局部变量通常位于栈上，如果一个局部变量被声明为 <code>volatile</code>，那么对其的每一次访问都将直接从栈上的位置读取或写入，不会被优化掉。</li>
<li><strong>静态存储区(Static Storage)</strong>: 全局变量和静态变量位于静态存储区，若这些变量被声明为 <code>volatile</code>，则它们同样会按照 <code>volatile</code> 的规则进行访问，即每次访问都直接从其内存地址读取或写入，而不是使用任何可能的优化手段。</li>
<li><strong>堆(Heap)</strong>: 动态分配的内存（通过 <code>malloc</code>, <code>calloc</code>, <code>realloc</code> 或者 C++ 中的 <code>new</code>）也遵循同样的原则，<code>volatile</code> 确保了对该内存区域的每个访问都是实际的内存操作，而非基于之前缓存的结果。</li>
</ul>
<!-- #region const -->
<h2><code>const</code> 关键字 (C)</h2>
<div class="hint-container info">
<p class="hint-container-title">原因</p>
<p>关键字用于定义常量，它表示变量的值在初始化后不能被修改。它可以用于变量、指针和函数等。</p>
<ul>
<li>
<p>保证数据的安全性和一致性：通过将变量声明为  const ，可以防止在程序中意外修改其值，有助于确保数据在特定的上下文中保持不变，避免因误操作导致的数据错误，提高程序的稳定性和可靠性。</p>
</li>
<li>
<p>函数接口的清晰性：在函数参数和成员函数中使用  const ，能够明确告知调用者和其他开发人员，该函数不会修改传入的参数或对象的状态，增强了函数接口的可读性和可理解性，方便代码的维护和扩展。</p>
</li>
<li>
<p><code>const</code> 用于定义常量，保证值不被修改。</p>
</li>
<li>
<p><code>const</code> 关键字不影响变量的生命周期，只影响其值的可变性。</p>
</li>
</ul>
</div>
<ul>
<li><strong>常量变量</strong>：表示该变量的值不能被修改，在定义时必须初始化。</li>
</ul>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> //之后任何试图修改 num 值的操作都会引发编译错误。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li><strong>指针常量</strong></li>
</ul>
<ol>
<li>
<p>指向常量整数的指针 (const int *ptr)<br>
含义：ptr 是一个指向 const int 类型的指针，意味着你不能通过 ptr 修改它所指向的整数值。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> value </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">ptr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">value;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// *ptr = 20; // 错误：不能通过 ptr 修改 value 的值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">value </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   // 可以直接修改 value 的值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">ptr;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> //指针指向的值是常量，不能通过该指针修改值，但指针本身可以改变指向。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>常量指针 (int *const ptr)<br>
含义：ptr 是一个常量指针，意味着 ptr 这个指针本身是常量，一旦初始化，不能再指向其他地址，但可以通过 ptr 修改它所指向的整数值。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> value1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> value2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ptr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">value1;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">ptr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 可以通过 ptr 修改 value1 的值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ptr = &amp;value2; // 错误：不能修改 ptr 使其指向 value2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int*const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ptr;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//指针本身是常量，不能改变指向，但可以通过该指针修改指向的值。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>指向常量整数的常量指针 (const int *const ptr)<br>
含义：ptr 是一个指向 const int 类型的常量指针，意味着你不能修改 ptr 所指向的整数值，同时 ptr 这个指针本身也是常量，一旦初始化，不能    再指向其他地址。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> value </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ptr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">value;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// *ptr = 20; // 错误：不能通过 ptr 修改 value 的值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ptr = &amp;value2; // 错误：不能修改 ptr 使其指向其他地址</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">value </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   // 可以直接修改 value 的值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int*const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ptr;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> //指针本身和指向的值都是常量，既不能改变指向，也不能通过该指针修改值。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ol>
<ul>
<li>用于修饰<strong>函数参数</strong>：表明函数不会修改传入的参数值，提高函数的安全性和可维护性。函数参数为常量，保证函数内部不会修改该参数。</li>
</ul>
<p>如果函数内的语句试图修改，编辑器就会报出错误。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> char*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 该函数不会修改 str 指向的字符串内容。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) 。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><!-- #endregion const -->
<h2><code>const</code> 关键字 (C++)</h2>
<ul>
<li>修饰<strong>成员函数</strong>：意味着该成员函数不会修改对象的成员变量，常被用于访问对象的常量数据。</li>
</ul>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 这里不能修改成员变量 } }; 。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>参考：<a href="https://zhuanlan.zhihu.com/p/256423512" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/256423512</a></p>
<ol>
<li><strong>修饰函数参数</strong></li>
</ol>
<p>对于函数的入参，不管是什么数据类型，也不管是 指针传递，还是 引用传递，只要加了 const 修饰，就可以防止函数内意外修改该参数，起到保护作用。</p>
<p>比如下面的例子，给 a 和 b 加上const修饰后，如果函数内的语句试图修改 a 或 b，编辑器就会报出错误。</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> output</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">A</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">B</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // do something</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、<strong>const 修饰函数返回值</strong></p>
<p>用 const 修饰返回的指针或引用，保护指针或引用的内容不被修改。比如：</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int&amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> GetAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> m_age;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int&amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> GetAgeConst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> m_age;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Age: "</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> m_age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">private:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> m_age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Student stu;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">GetAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 会修改成员变量的值</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">GetAgeConst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 编译器会报错</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、<strong>const 修饰函数体</strong></p>
<p>const 修饰函数体时，放到函数体的行尾处，表明在该函数体内，不能修改对象的数据成员，且不能调用非 const 成员函数。比如：</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> SetAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        m_age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> age;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> SetAgeConst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        m_age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> age;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Age: "</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> m_age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">private:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> m_age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Student stu;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">SetAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 正确</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">SetAgeConst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 错误</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><!-- #region static -->
<h2><code>static</code> 关键字 (C)</h2>
<div class="hint-container info">
<p class="hint-container-title">原因</p>
<ul>
<li>限制变量的作用域：对于全局变量，使用  static  可以将其作用域限制在声明所在的文件内，避免在多个文件中出现同名变量引起的命名冲突，提高了程序的模块化和可维护性。</li>
<li><code>static</code> 关键字有多个用途，主要用于控制变量或函数的生命周期和作用域。</li>
<li><code>static</code> 关键字影响变量或函数的生命周期和作用域，使其在函数调用间保持值（静态局部变量）或限制其作用域（静态全局变量和静态函数）。</li>
</ul>
</div>
<ul>
<li>
<p><strong>用于修饰全局变量(静态全局变量)</strong>：全局变量加上 static 后，其作用域被限制在声明所在的文件内，其他文件无法访问，避免了命名冲突。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> globalVar;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li><code>globalVar</code> 是一个静态全局变量，作用域限制在定义它的文件内，其他文件不能访问。</li>
</ul>
</li>
<li>
<p><strong>用于修饰局部变量(静态局部变量)</strong>：局部静态变量在程序执行期间只会初始化一次，其值在函数调用之间保持不变。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> counter </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    counter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>counter</code> 是一个静态局部变量，函数每次调用时 <code>counter</code> 保持其值，而不是重新初始化。</li>
</ul>
</li>
<li>
<p><strong>用于修饰函数(静态函数)</strong>：静态函数只能在声明所在的文件中使用，其他文件无法访问。</p>
</li>
</ul>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; count</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; } 。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><!-- #endregion static -->
<h2><code>static</code> 关键字 (C++)</h2>
<div class="hint-container note">
<p class="hint-container-title">原因</p>
<ul>
<li>
<p>实现数据共享和资源管理：类的静态成员变量为所有类对象所共享，可用于在多个对象之间共享数据，节省内存空间。同时，通过静态成员函数可以方便地对这些共享数据进行统一的管理和操作。</p>
</li>
<li>
<p>提供与类相关的全局功能：静态成员函数不依赖于类的具体对象，可作为与类相关的全局性功能接口，方便在不创建对象的情况下调用，例如用于实现一些工具函数或初始化类的静态资源等。</p>
</li>
<li>
<p><code>static</code> 类成员使得所有对象共享同一个成员变量或方法。</p>
</li>
</ul>
</div>
<ul>
<li>
<p><strong>修饰静态类成员变量</strong>：类的静态成员变量为所有类对象所共享，不属于任何一个具体的对象，存储在全局数据区，可通过类名直接访问。静态成员变量属于类，而不是类的对象，所有对象共享同一个静态成员变量。</p>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> classVar;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> classMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>classVar</code> 是一个静态类成员，所有对象共享同一个 <code>classVar</code>。</li>
<li><code>classMethod</code> 是一个静态类方法，可以通过类名直接调用，而不需要对象实例。</li>
</ul>
</li>
<li>
<p><strong>静态方法</strong>：静态方法属于类，而不是类的对象，可通过类名直接调用，不依赖于任何对象的存在。</p>
</li>
</ul>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; count</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; } 。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li>用于修饰成员函数：静态成员函数不依赖于类的具体对象，可直接通过类名调用，不能访问非静态成员变量和非静态成员函数。</li>
</ul>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> staticFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 只能访问静态成员 } }; 。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h2><code>NULL</code> 空指针常量 (C)</h2>
<div class="hint-container info">
<p class="hint-container-title">原因</p>
<p>在 C 语言中，<code>NULL</code> 是一个预定义的宏，用于表示空指针（指向内存中不存在的地址）。</p>
<ul>
<li><code>NULL</code> 通常被定义为 <code>(void*)0</code> 或 <code>0</code> ，这取决于编译器的实现。</li>
<li>使用 <code>NULL</code> 可以避免在代码中直接使用 <code>0</code> ，因为 <code>0</code> 可能被解释为整数或其他类型，这可能导致代码的可读性和可维护性降低。</li>
<li>使用 <code>NULL</code> 可以提高代码的可移植性，因为不同的编译器可能对 <code>NULL</code> 的定义不同。</li>
</ul>
</div>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;stdlib.h&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 包含 NULL 的定义</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ptr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 使用 NULL 初始化指针</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (ptr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 检查指针是否为空</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Pointer is NULL</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Pointer is not NULL</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>variable</title>
      <link>https://em.rewi.xyz/C/variable.html</link>
      <guid>https://em.rewi.xyz/C/variable.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">variable</source>
      <description>变量</description>
      <category>C</category>
      <pubDate>Thu, 10 Apr 2025 02:41:45 GMT</pubDate>
      <content:encoded><![CDATA[<h2>C语言中不能直接使用<code>-</code>作为变量名的一部分</h2>
<p><code>-</code>是一个运算符，表示减法或负号。如果允许变量名中包含<code>-</code>，编译器将无法区分它是一个变量名的一部分还是一个运算符。</p>
<h3>C 语言中的特殊情况</h3>
<p>虽然 C 语言也不允许变量名中直接包含 -，但在某些情况下，你可能会看到类似以下的代码：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> MY</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">VAR </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">42</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>这里需要注意的是，MY-VAR 并不是变量，而是一个宏定义。宏定义是预处理器指令，不属于 C 语言的变量命名规则范围。编译器在预处理阶段会将 MY-VAR 替换为 42，因此不会引发冲突。</p>
<h2>局部变量</h2>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>在C语言中，局部变量是指在函数内部或代码块（如{}定义的复合语句）中定义的变量。它们的作用域、生命周期和存储位置与全局变量有显著区别。</p>
</div>
<p>在C语言中，<strong>局部变量</strong>是指在函数内部或代码块（如<code>{}</code>定义的复合语句）中定义的变量。它们的作用域、生命周期和存储位置与全局变量有显著区别。以下是关于局部变量的详细说明：</p>
<ul>
<li><strong>局部变量</strong>是C语言中用于函数内部或代码块内的临时数据存储，具有<strong>有限的作用域和生命周期</strong>，存储在栈中。</li>
<li>正确使用局部变量可以提高代码的模块化和安全性，避免全局变量带来的副作用（如意外修改）。</li>
<li>需注意局部变量的初始化、作用域覆盖以及与静态局部变量的区别。</li>
</ul>
<p>如果需要进一步探讨其他特性（如静态局部变量、跨文件变量共享等）</p>
]]></content:encoded>
    </item>
    <item>
      <title>keyword</title>
      <link>https://em.rewi.xyz/C__/keyword.html</link>
      <guid>https://em.rewi.xyz/C__/keyword.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">keyword</source>
      <description>关键字</description>
      <category>C++</category>
      <pubDate>Thu, 10 Apr 2025 02:41:45 GMT</pubDate>
      <content:encoded><![CDATA[<!-- #region const -->
<h2><code>const</code> 关键字 (C++)</h2>
<ul>
<li>修饰<strong>成员函数</strong>：意味着该成员函数不会修改对象的成员变量，常被用于访问对象的常量数据。</li>
</ul>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 这里不能修改成员变量 } }; 。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>参考：<a href="https://zhuanlan.zhihu.com/p/256423512" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/256423512</a></p>
<ol>
<li><strong>修饰函数参数</strong></li>
</ol>
<p>对于函数的入参，不管是什么数据类型，也不管是 指针传递，还是 引用传递，只要加了 const 修饰，就可以防止函数内意外修改该参数，起到保护作用。</p>
<p>比如下面的例子，给 a 和 b 加上const修饰后，如果函数内的语句试图修改 a 或 b，编辑器就会报出错误。</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> output</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">A</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">B</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // do something</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、<strong>const 修饰函数返回值</strong></p>
<p>用 const 修饰返回的指针或引用，保护指针或引用的内容不被修改。比如：</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int&amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> GetAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> m_age;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int&amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> GetAgeConst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> m_age;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Age: "</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> m_age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">private:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> m_age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Student stu;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">GetAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 会修改成员变量的值</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">GetAgeConst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 编译器会报错</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、<strong>const 修饰函数体</strong></p>
<p>const 修饰函数体时，放到函数体的行尾处，表明在该函数体内，不能修改对象的数据成员，且不能调用非 const 成员函数。比如：</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> SetAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        m_age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> age;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> SetAgeConst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        m_age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> age;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Age: "</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> m_age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">private:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> m_age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Student stu;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">SetAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 正确</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">SetAgeConst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 错误</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ShowAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><!-- #endregion const -->
<h2><code>const</code> 关键字 (C)</h2>
<div class="hint-container info">
<p class="hint-container-title">原因</p>
<p>关键字用于定义常量，它表示变量的值在初始化后不能被修改。它可以用于变量、指针和函数等。</p>
<ul>
<li>
<p>保证数据的安全性和一致性：通过将变量声明为  const ，可以防止在程序中意外修改其值，有助于确保数据在特定的上下文中保持不变，避免因误操作导致的数据错误，提高程序的稳定性和可靠性。</p>
</li>
<li>
<p>函数接口的清晰性：在函数参数和成员函数中使用  const ，能够明确告知调用者和其他开发人员，该函数不会修改传入的参数或对象的状态，增强了函数接口的可读性和可理解性，方便代码的维护和扩展。</p>
</li>
<li>
<p><code>const</code> 用于定义常量，保证值不被修改。</p>
</li>
<li>
<p><code>const</code> 关键字不影响变量的生命周期，只影响其值的可变性。</p>
</li>
</ul>
</div>
<ul>
<li><strong>常量变量</strong>：表示该变量的值不能被修改，在定义时必须初始化。</li>
</ul>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> //之后任何试图修改 num 值的操作都会引发编译错误。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li><strong>指针常量</strong></li>
</ul>
<ol>
<li>
<p>指向常量整数的指针 (const int *ptr)<br>
含义：ptr 是一个指向 const int 类型的指针，意味着你不能通过 ptr 修改它所指向的整数值。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> value </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">ptr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">value;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// *ptr = 20; // 错误：不能通过 ptr 修改 value 的值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">value </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   // 可以直接修改 value 的值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">ptr;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> //指针指向的值是常量，不能通过该指针修改值，但指针本身可以改变指向。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>常量指针 (int *const ptr)<br>
含义：ptr 是一个常量指针，意味着 ptr 这个指针本身是常量，一旦初始化，不能再指向其他地址，但可以通过 ptr 修改它所指向的整数值。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> value1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> value2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ptr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">value1;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">ptr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 可以通过 ptr 修改 value1 的值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ptr = &amp;value2; // 错误：不能修改 ptr 使其指向 value2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int*const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ptr;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//指针本身是常量，不能改变指向，但可以通过该指针修改指向的值。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>指向常量整数的常量指针 (const int *const ptr)<br>
含义：ptr 是一个指向 const int 类型的常量指针，意味着你不能修改 ptr 所指向的整数值，同时 ptr 这个指针本身也是常量，一旦初始化，不能    再指向其他地址。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> value </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ptr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">value;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// *ptr = 20; // 错误：不能通过 ptr 修改 value 的值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ptr = &amp;value2; // 错误：不能修改 ptr 使其指向其他地址</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">value </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   // 可以直接修改 value 的值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int*const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ptr;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> //指针本身和指向的值都是常量，既不能改变指向，也不能通过该指针修改值。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ol>
<ul>
<li>用于修饰<strong>函数参数</strong>：表明函数不会修改传入的参数值，提高函数的安全性和可维护性。函数参数为常量，保证函数内部不会修改该参数。</li>
</ul>
<p>如果函数内的语句试图修改，编辑器就会报出错误。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> char*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 该函数不会修改 str 指向的字符串内容。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) 。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><!-- #region static -->
<h2><code>static</code> 关键字 (C++)</h2>
<div class="hint-container note">
<p class="hint-container-title">原因</p>
<ul>
<li>
<p>实现数据共享和资源管理：类的静态成员变量为所有类对象所共享，可用于在多个对象之间共享数据，节省内存空间。同时，通过静态成员函数可以方便地对这些共享数据进行统一的管理和操作。</p>
</li>
<li>
<p>提供与类相关的全局功能：静态成员函数不依赖于类的具体对象，可作为与类相关的全局性功能接口，方便在不创建对象的情况下调用，例如用于实现一些工具函数或初始化类的静态资源等。</p>
</li>
<li>
<p><code>static</code> 类成员使得所有对象共享同一个成员变量或方法。</p>
</li>
</ul>
</div>
<ul>
<li>
<p><strong>修饰静态类成员变量</strong>：类的静态成员变量为所有类对象所共享，不属于任何一个具体的对象，存储在全局数据区，可通过类名直接访问。静态成员变量属于类，而不是类的对象，所有对象共享同一个静态成员变量。</p>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> classVar;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> classMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>classVar</code> 是一个静态类成员，所有对象共享同一个 <code>classVar</code>。</li>
<li><code>classMethod</code> 是一个静态类方法，可以通过类名直接调用，而不需要对象实例。</li>
</ul>
</li>
<li>
<p><strong>静态方法</strong>：静态方法属于类，而不是类的对象，可通过类名直接调用，不依赖于任何对象的存在。</p>
</li>
</ul>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; count</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; } 。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li>用于修饰成员函数：静态成员函数不依赖于类的具体对象，可直接通过类名调用，不能访问非静态成员变量和非静态成员函数。</li>
</ul>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> staticFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 只能访问静态成员 } }; 。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><!-- #endregion static -->
<h2><code>static</code> 关键字 (C)</h2>
<div class="hint-container info">
<p class="hint-container-title">原因</p>
<ul>
<li>限制变量的作用域：对于全局变量，使用  static  可以将其作用域限制在声明所在的文件内，避免在多个文件中出现同名变量引起的命名冲突，提高了程序的模块化和可维护性。</li>
<li><code>static</code> 关键字有多个用途，主要用于控制变量或函数的生命周期和作用域。</li>
<li><code>static</code> 关键字影响变量或函数的生命周期和作用域，使其在函数调用间保持值（静态局部变量）或限制其作用域（静态全局变量和静态函数）。</li>
</ul>
</div>
<ul>
<li>
<p><strong>用于修饰全局变量(静态全局变量)</strong>：全局变量加上 static 后，其作用域被限制在声明所在的文件内，其他文件无法访问，避免了命名冲突。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> globalVar;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li><code>globalVar</code> 是一个静态全局变量，作用域限制在定义它的文件内，其他文件不能访问。</li>
</ul>
</li>
<li>
<p><strong>用于修饰局部变量(静态局部变量)</strong>：局部静态变量在程序执行期间只会初始化一次，其值在函数调用之间保持不变。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> counter </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    counter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>counter</code> 是一个静态局部变量，函数每次调用时 <code>counter</code> 保持其值，而不是重新初始化。</li>
</ul>
</li>
<li>
<p><strong>用于修饰函数(静态函数)</strong>：静态函数只能在声明所在的文件中使用，其他文件无法访问。</p>
</li>
</ul>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; count</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; } 。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>C++</title>
      <link>https://em.rewi.xyz/C__/</link>
      <guid>https://em.rewi.xyz/C__/</guid>
      <source url="https://em.rewi.xyz/rss.xml">C++</source>
      <category>C++</category>
      <pubDate>Tue, 08 Apr 2025 15:30:00 GMT</pubDate>
    </item>
    <item>
      <title>C++</title>
      <link>https://em.rewi.xyz/reference/C__.html</link>
      <guid>https://em.rewi.xyz/reference/C__.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">C++</source>
      <description>C++语言</description>
      <category>reference</category>
      <pubDate>Thu, 10 Apr 2025 02:41:45 GMT</pubDate>
      <content:encoded><![CDATA[<h2>network</h2>
<ul>
<li><a href="https://github.com/ithewei/libhv" target="_blank" rel="noopener noreferrer">https://github.com/ithewei/libhv</a></li>
</ul>
<h2>图形库</h2>
<ul>
<li>raylib:<a href="https://zhuanlan.zhihu.com/p/572702314" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/572702314</a></li>
</ul>
<h2>printf</h2>
<ul>
<li><a href="https://blog.csdn.net/KindBitch/article/details/122443446" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/KindBitch/article/details/122443446</a></li>
</ul>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> log_debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, ...) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"["</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __FILE__ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"][Line: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">]: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[34m[DEBUG] "</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> format </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[0m</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __LINE__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __func__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ##__VA_ARGS__)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> log_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, ...) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"["</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __FILE__ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"][Line: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">]: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[32m[INFO] "</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> format </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[0m</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __LINE__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __func__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ##__VA_ARGS__)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> log_warning</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, ...) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"["</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __FILE__ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"][Line: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">]: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[33m[WARNING] "</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> format </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[0m</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __LINE__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __func__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ##__VA_ARGS__)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> log_error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, ...) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"["</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __FILE__ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"][Line: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">]: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[31m[ERROR] "</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> format </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[0m</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __LINE__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __func__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ##__VA_ARGS__)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> log_critical</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, ...) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"["</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __FILE__ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"][Line: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">]: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[41m[CRITICAL] "</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> format </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[0m</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __LINE__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __func__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ##__VA_ARGS__)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>优秀开源</h2>
<ul>
<li><a href="https://github.com/owncloud/client" target="_blank" rel="noopener noreferrer">https://github.com/owncloud/client</a></li>
<li><a href="https://github.com/nextcloud/desktop" target="_blank" rel="noopener noreferrer">https://github.com/nextcloud/desktop</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>C</title>
      <link>https://em.rewi.xyz/reference/C.html</link>
      <guid>https://em.rewi.xyz/reference/C.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">C</source>
      <description>C语言</description>
      <category>reference</category>
      <pubDate>Thu, 10 Apr 2025 02:41:45 GMT</pubDate>
      <content:encoded><![CDATA[<h2>network</h2>
<ul>
<li><a href="https://github.com/ithewei/libhv" target="_blank" rel="noopener noreferrer">https://github.com/ithewei/libhv</a></li>
</ul>
<h2>图形库</h2>
<ul>
<li>raylib:<a href="https://zhuanlan.zhihu.com/p/572702314" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/572702314</a></li>
</ul>
<h2>printf</h2>
<ul>
<li><a href="https://blog.csdn.net/KindBitch/article/details/122443446" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/KindBitch/article/details/122443446</a></li>
</ul>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> log_debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, ...) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"["</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __FILE__ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"][Line: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">]: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[34m[DEBUG] "</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> format </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[0m</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __LINE__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __func__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ##__VA_ARGS__)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> log_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, ...) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"["</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __FILE__ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"][Line: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">]: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[32m[INFO] "</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> format </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[0m</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __LINE__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __func__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ##__VA_ARGS__)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> log_warning</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, ...) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"["</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __FILE__ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"][Line: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">]: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[33m[WARNING] "</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> format </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[0m</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __LINE__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __func__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ##__VA_ARGS__)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> log_error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, ...) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"["</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __FILE__ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"][Line: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">]: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[31m[ERROR] "</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> format </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[0m</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __LINE__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __func__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ##__VA_ARGS__)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> log_critical</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, ...) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"["</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __FILE__ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"][Line: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">]: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[41m[CRITICAL] "</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> format </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\033</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">[0m</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __LINE__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __func__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ##__VA_ARGS__)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>优秀开源</h2>
<ul>
<li><a href="https://github.com/owncloud/client" target="_blank" rel="noopener noreferrer">https://github.com/owncloud/client</a></li>
<li><a href="https://github.com/nextcloud/desktop" target="_blank" rel="noopener noreferrer">https://github.com/nextcloud/desktop</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Linux</title>
      <link>https://em.rewi.xyz/OS/Linux/</link>
      <guid>https://em.rewi.xyz/OS/Linux/</guid>
      <source url="https://em.rewi.xyz/rss.xml">Linux</source>
      <description>Linux</description>
      <category>OS</category>
      <pubDate>Thu, 10 Apr 2025 02:41:45 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>进程间通信 (Inter-Process Communication, IPC) 是指在操作系统中，多个进程之间交换数据或信息的机制。IPC 的目的是让不同的进程能够共享数据和协同工作。</li>
</ul>
<h2>驱动</h2>
<ul>
<li>USB（通用串行总线）</li>
<li>UFS（通用闪存存储）驱动</li>
<li>SD 卡驱动</li>
<li>I2C 驱动</li>
<li>PMIC（电源管理集成电路）驱动 <a href="https://blog.csdn.net/yxw0609131056/article/details/126596524" target="_blank" rel="noopener noreferrer">浅谈Linux PMIC驱动（一）</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>车规-RH850</title>
      <link>https://em.rewi.xyz/hardware/%E8%BD%A6%E8%A7%84-RH850.html</link>
      <guid>https://em.rewi.xyz/hardware/%E8%BD%A6%E8%A7%84-RH850.html</guid>
      <source url="https://em.rewi.xyz/rss.xml">车规-RH850</source>
      <description>单片机</description>
      <category>hardware</category>
      <pubDate>Wed, 09 Apr 2025 09:24:59 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Renesas | 瑞萨电子</h2>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>G3KH内核：RH850/F1KM系列采用瑞萨自主设计的 G3KH CPU核，属于32位RISC架构，专为高实时性、高可靠性的汽车电子应用优化。该内核支持 240 MHz工作频率，提供高效的计算处理能力，适用于车身控制、网关、域控制器等场景</p>
</div>
<h2>Option bytes</h2>
<h3>看门狗</h3>
<h2>HSM（Hardware Security Module，硬件安全模块）</h2>
<div class="hint-container important">
<p class="hint-container-title">重要</p>
<p>定义：HSM是一种物理设备，专门设计用于安全地管理加密密钥、执行加密操作（如加密/解密、数字签名），并提供抗篡改保护。</p>
</div>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>核心功能：<br>
密钥管理：生成、存储和销毁敏感密钥，防止泄露。</p>
<p>高性能加密：支持AES、RSA、ECC等算法，优化处理速度。</p>
<p>物理安全：具备防拆解、自毁机制，抵御物理攻击。</p>
</div>
<div class="hint-container note">
<p class="hint-container-title">注</p>
<p>应用场景：<br>
金融支付：保障POS机、ATM的交易安全。</p>
<p>汽车电子：用于ECU（电子控制单元）的安全通信、固件验证。</p>
<p>云安全：保护云端数据加密和身份认证（如AWS CloudHSM）。</p>
</div>
<h3>EVITA Light（EVITA项目中的轻量级安全模块）</h3>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>背景：EVITA（E-safety Vehicle Intrusion Protected Applications）是欧盟资助的项目，旨在定义车载网络安全标准，抵御车辆网络攻击。</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>EVITA Light的定位：<br>
轻量化设计：针对资源受限的车载环境（如传感器、低端ECU），平衡安全性与成本/功耗。</p>
<p>功能特点：<br>
安全通信：保障CAN/CAN FD、以太网等车载总线的消息真实性（如MAC验证）。</p>
<p>安全启动：验证ECU固件完整性，防止恶意篡改。</p>
<p>密钥隔离：为不同功能域（如动力系统、信息娱乐）提供独立密钥。</p>
</div>
<div class="hint-container caution">
<p class="hint-container-title">警告</p>
<p>标准化支持：符合ISO 21434（汽车网络安全标准）和EVITA项目规范。</p>
</div>
<details class="hint-container details"><summary>HSM与EVITA Light的关系</summary>
<p>协同应用：<br>
分层安全架构：高端HSM用于中央网关/域控制器，处理复杂加密；EVITA Light部署在边缘节点（如传感器），实现分布式安全。</p>
<p>密钥层级：HSM管理根密钥，EVITA Light使用派生密钥，形成信任链。</p>
<p>汽车安全用例：<br>
OTA更新：HSM验证云端签名，EVITA Light确保更新包在车内安全传输。</p>
<p>V2X通信：HSM处理V2X证书，EVITA Light加密车辆间实时数据。</p>
</details>
]]></content:encoded>
    </item>
  </channel>
</rss>