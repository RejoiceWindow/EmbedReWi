import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as t,a,e as i,b as l,w as s,r as p,o as c}from"./app-DIMvcjhy.js";const h={};function d(u,e){const r=p("RouteLink");return c(),n("div",null,[e[3]||(e[3]=t('<h2 id="应用层-application-layer" tabindex="-1"><a class="header-anchor" href="#应用层-application-layer"><span>应用层（Application Layer）<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></span></a></h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Application Software Components (SWC)：具体功能实现单元，如控制算法、状态监测等。<br> 由应用软件组件组成，这些组件实现具体的功能，如传感器数据处理、控制算法等。Application Software Components (SWC)：具体功能实现单元，如控制算法、状态监测等。</p></div><p>应用层包含各种应用程序（SW-C，Software Components），这些应用程序通过虚拟功能总线（VFB，Virtual Functional Bus）进行通信。应用层的主要组件包括：</p><p>软件组件（SW-C）：实现特定功能的软件模块，如发动机控制、刹车系统等。</p><p>端口接口（Port Interfaces）：定义软件组件之间的通信接口。</p><h2 id="运行时环境-runtime-environment-rte" tabindex="-1"><a class="header-anchor" href="#运行时环境-runtime-environment-rte"><span>运行时环境（Runtime Environment, RTE）</span></a></h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>负责应用软件组件（Software Components, SWC）之间，以及SWC和BSW之间的通信和交互。<br> 连接应用软件和基础软件，负责数据的交换和通信。</p></div><p>RTE是应用层和基础软件层之间的接口，负责管理和调度软件组件之间的通信。RTE的主要功能包括：</p><p>消息传递：在软件组件之间传递数据和事件。</p><p>调度管理：管理软件组件的执行顺序和时间。</p><h2 id="基础软件层-basic-software-bsw" tabindex="-1"><a class="header-anchor" href="#基础软件层-basic-software-bsw"><span>基础软件层（Basic Software, BSW）</span></a></h2><h3 id="微控制器抽象层-mcal-microcontroller-abstraction-layer" tabindex="-1"><a class="header-anchor" href="#微控制器抽象层-mcal-microcontroller-abstraction-layer"><span>微控制器抽象层（MCAL，Microcontroller Abstraction Layer）</span></a></h3><ul><li>与硬件直接交互的最底层软件，提供对微控制器和外设的抽象。</li></ul><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h4><ul><li>位于基础软件（BSW）层的最底层。MCAL 的主要作用是为上层软件（如运行时环境 RTE 和应用软件 ASW）提供对微控制器硬件的标准化接口。上层软件可以独立于具体的硬件平台开发，提高了软件的可移植性和重用性。</li></ul><p>硬件抽象:</p><ul><li>提供对底层硬件的抽象接口，使上层软件无需关心具体的硬件实现细节。</li><li>提供对硬件的抽象访问接口，使上层软件能够与不同硬件平台兼容。</li><li>标准化接口，使上层软件与特定硬件无关。<br> 提高可移植性：</li><li>由于 MCAL 提供了标准化的接口，上层软件可以在不同的微控制器平台上复用，只需更换相应的 MCAL 实现。<br> 降低开发复杂性：</li><li>开发者只需专注于上层应用的逻辑实现，无需处理复杂的硬件驱动编写。<br> 增强系统可靠性：</li><li>MCAL 经过严格测试和验证，确保了与硬件交互的稳定性和可靠性。</li></ul><h4 id="组成部分" tabindex="-1"><a class="header-anchor" href="#组成部分"><span>组成部分</span></a></h4><p>WDT（Watchdog Timer）驱动：</p><ul><li>提供对看门狗定时器的访问接口，用于系统故障恢复和监控。</li></ul>',20)),a("p",null,[e[1]||(e[1]=i("SPI（串行外设接口）（Serial Peripheral Interface）驱动：")),e[2]||(e[2]=a("br",null,null,-1)),l(r,{to:"/OS/AUTOSAR/SPI%E9%A9%B1%E5%8A%A8.html"},{default:s(()=>e[0]||(e[0]=[i("SPI")])),_:1})]),e[4]||(e[4]=t('<p>PWM（脉宽调制）（Pulse Width Modulation）驱动：</p><ul><li>提供对 PWM 模块的访问接口，用于生成 PWM 信号控制。</li></ul><p>LIN（Local Interconnect Network）驱动：</p><ul><li>提供对 LIN 控制器的访问接口，用于车载网络的 LIN 通信。</li></ul><p>Memory Abstraction Interface（MemIf）：</p><ul><li>提供对内部和外部存储器的访问接口，包括 EEPROM、Flash 等存储器。</li></ul><p>I2C（集成电路总线）（Inter-Integrated Circuit）驱动：</p><ul><li>提供对 I2C 总线的访问接口，用于与 I2C 设备通信。</li></ul><p>GPT（General Purpose Timer）驱动：</p><ul><li>提供对通用定时器的访问接口，用于计时和定时操作。</li></ul><p>DIO（Digital Input/Output）驱动：</p><ul><li>提供对数字输入输出端口的访问接口，用于控制和读取微控制器的 GPIO 引脚。</li></ul><p>CAN（控制器局域网）（Controller Area Network）驱动：</p><ul><li>提供对 CAN 控制器的访问接口，用于车载网络通信。</li></ul><p>ADC（模数转换）（Analog-to-Digital Converter）驱动：</p><ul><li>提供对微控制器内部 ADC 的访问接口，用于模拟信号的采集和转换。</li></ul><h4 id="开发流程" tabindex="-1"><a class="header-anchor" href="#开发流程"><span>开发流程</span></a></h4><p>需求分析：分析和定义具体项目对硬件外设的需求。<br> 配置和定制：根据具体硬件平台的特性，配置和定制 MCAL 模块。<br> 集成和测试：将 MCAL 模块集成到系统中，进行单元测试和集成测试，确保与硬件的正确交互。<br> 验证和优化：对 MCAL 模块进行验证和性能优化，确保在目标硬件平台上的高效运行。</p><h3 id="ecu抽象层-ecu-abstraction-layer-ecual" tabindex="-1"><a class="header-anchor" href="#ecu抽象层-ecu-abstraction-layer-ecual"><span>ECU抽象层(ECU Abstraction Layer (ECUAL))</span></a></h3><ul><li>对ECU硬件的抽象，屏蔽了硬件差异。</li><li>抽象化ECU硬件，使软件能在不同硬件平台上运行。</li><li>抽象硬件细节，提供统一的硬件访问接口。</li></ul><h3 id="ecu抽象层-services-layer" tabindex="-1"><a class="header-anchor" href="#ecu抽象层-services-layer"><span>ECU抽象层(Services Layer)</span></a></h3><ul><li>提供基本服务如内存管理、通信服务、诊断服务等。</li><li>提供系统服务，如OS、NVM、通讯栈（CAN, LIN, FlexRay, Ethernet等）。</li></ul><h3 id="复杂驱动层-complex-device-drivers-cdd" tabindex="-1"><a class="header-anchor" href="#复杂驱动层-complex-device-drivers-cdd"><span>复杂驱动层(Complex Device Drivers (CDD))</span></a></h3><ul><li>处理特殊硬件需求的驱动程序。</li><li>特定硬件功能的驱动。</li><li>处理复杂的硬件驱动，如传感器和执行器。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p><a href="https://blog.csdn.net/qq_34459334/article/details/140173931" target="_blank" rel="noopener noreferrer">AUTOSAR架构</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',27))])}const C=o(h,[["render",d]]),A=JSON.parse('{"path":"/OS/AUTOSAR/architecture.html","title":"architecture","lang":"zh-CN","frontmatter":{"title":"architecture","description":"架构","icon":"carbon:ibm-deployable-architecture","tags":["AUTOSAR"],"categories":["OS"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"architecture\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T08:33:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/OS/AUTOSAR/architecture.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"architecture"}],["meta",{"property":"og:description","content":"架构"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T08:33:42.000Z"}],["meta",{"property":"article:tag","content":"AUTOSAR"}],["meta",{"property":"article:modified_time","content":"2025-05-01T08:33:42.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1745725632000,"updatedTime":1746088422000,"contributors":[{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":2}]},"readingTime":{"minutes":4.1,"words":1231},"filePathRelative":"OS/AUTOSAR/architecture.md","localizedDate":"2025年4月27日","excerpt":"<h2><a class=\\"header-anchor\\" href=\\"#应用层-application-layer\\"><span>应用层（Application Layer）<sup class=\\"footnote-ref\\"></sup></span></a><a href=\\"#footnote1\\">[1]</a><a class=\\"footnote-anchor\\" id=\\"footnote-ref1\\"></a></h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>Application Software Components (SWC)：具体功能实现单元，如控制算法、状态监测等。<br>\\n由应用软件组件组成，这些组件实现具体的功能，如传感器数据处理、控制算法等。Application Software Components (SWC)：具体功能实现单元，如控制算法、状态监测等。</p>\\n</div>"}');export{C as comp,A as data};
