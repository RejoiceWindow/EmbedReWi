import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as n}from"./app-DIMvcjhy.js";const t={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strcpy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(buffer, large_string);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="问题分析" tabindex="-1"><a class="header-anchor" href="#问题分析"><span>问题分析</span></a></h2><h3 id="_1-缓冲区溢出-buffer-overflow" tabindex="-1"><a class="header-anchor" href="#_1-缓冲区溢出-buffer-overflow"><span>1. 缓冲区溢出（Buffer Overflow）</span></a></h3><p>问题：<code>strcpy</code>函数不会检查目标缓冲区<code>buffer</code>的大小。如果<code>large_string</code>的长度超过63字节（需保留1字节存放终止符<code>\\0</code>），会导致<code>buffer</code>溢出，覆盖相邻内存区域。</p><p>后果：<br> 覆盖栈上的返回地址或局部变量，引发程序崩溃或执行任意代码（安全漏洞）。</p><p>破坏其他数据（如函数参数、寄存器保存值），导致未定义行为。</p><h3 id="_2-未验证输入来源" tabindex="-1"><a class="header-anchor" href="#_2-未验证输入来源"><span>2. 未验证输入来源</span></a></h3><p>问题：<code>large_string</code>的来源和内容未经验证：<br> 可能是外部输入的恶意数据（如网络报文、用户输入）。</p><p>可能未以<code>\\0</code>结尾，导致<code>strcpy</code>复制到非法内存地址。</p><h3 id="_3-未使用安全函数" tabindex="-1"><a class="header-anchor" href="#_3-未使用安全函数"><span>3. 未使用安全函数</span></a></h3><p>问题：<code>strcpy</code>是危险的函数，应替换为安全版本：<br> 使用<code>strncpy</code>并显式指定最大复制长度（例如<code>strncpy(buffer, large_string, sizeof(buffer)-1)）</code>。</p><p>添加手动终止符<code>（buffer[sizeof(buffer)-1] = &#39;\\0&#39;）</code>。</p><h3 id="_4-静态缓冲区大小不合理" tabindex="-1"><a class="header-anchor" href="#_4-静态缓冲区大小不合理"><span>4. 静态缓冲区大小不合理</span></a></h3><p>问题：<code>buffer</code>固定为64字节，若<code>large_string</code>长度不可控，可能导致：<br> 资源浪费（预留过大空间）。</p><p>仍无法防御超长输入（动态分配更安全）。</p><h2 id="修正方案" tabindex="-1"><a class="header-anchor" href="#修正方案"><span>修正方案</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 安全复制：限制长度并添加终止符</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strncpy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(buffer, large_string, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(buffer)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(buffer)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 或者使用动态内存分配（需检查malloc返回值）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// size_t len = strlen(large_string);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// char* buffer = (len &lt; 64) ? malloc(64) : malloc(len+1);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// strcpy(buffer, large_string);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展思考" tabindex="-1"><a class="header-anchor" href="#扩展思考"><span>扩展思考</span></a></h2><h3 id="防御性编程" tabindex="-1"><a class="header-anchor" href="#防御性编程"><span>防御性编程</span></a></h3><p>始终假设输入不可信，对长度、内容、终止符进行验证。</p><p>使用静态分析工具（如<code>Cppcheck</code>）或编译器选项（<code>-Wformat-security</code>）检测潜在溢出。</p><h3 id="替代方案" tabindex="-1"><a class="header-anchor" href="#替代方案"><span>替代方案</span></a></h3><p>使用更安全的库（如snprintf）：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">snprintf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> large_string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="嵌入式场景的特殊性" tabindex="-1"><a class="header-anchor" href="#嵌入式场景的特殊性"><span>嵌入式场景的特殊性</span></a></h3><p>内存受限时，动态分配可能不可行，需依赖静态缓冲区+严格长度检查。<br> 中断上下文中的缓冲区溢出可能导致更难调试的故障（如寄存器被覆盖）。</p>`,27)]))}const d=s(t,[["render",l]]),k=JSON.parse('{"path":"/C/%E5%88%86%E6%9E%90strcpy%E7%9A%84%E6%BD%9C%E5%9C%A8%E9%97%AE%E9%A2%98.html","title":"分析strcpy的潜在问题","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"分析strcpy的潜在问题","icon":"carbon:string-text","date":"2025-04-08T15:30:00.000Z","author":[{"name":"ReWi","url":"https://gitee.com/re-wi","email":"RejoiceWindow@yeah.net"},{"name":"ReWi","url":"https://github.com/Re-Wi/","email":"RejoiceWindow@yeah.net"},{"name":"RejoiceWindow"}],"category":["C"],"description":"示例代码 问题分析 1. 缓冲区溢出（Buffer Overflow） 问题：strcpy函数不会检查目标缓冲区buffer的大小。如果large_string的长度超过63字节（需保留1字节存放终止符\\\\0），会导致buffer溢出，覆盖相邻内存区域。 后果： 覆盖栈上的返回地址或局部变量，引发程序崩溃或执行任意代码（安全漏洞）。 破坏其他数据（如函数...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分析strcpy的潜在问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-08T15:30:00.000Z\\",\\"dateModified\\":\\"2025-04-10T02:41:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/C/%E5%88%86%E6%9E%90strcpy%E7%9A%84%E6%BD%9C%E5%9C%A8%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"分析strcpy的潜在问题"}],["meta",{"property":"og:description","content":"示例代码 问题分析 1. 缓冲区溢出（Buffer Overflow） 问题：strcpy函数不会检查目标缓冲区buffer的大小。如果large_string的长度超过63字节（需保留1字节存放终止符\\\\0），会导致buffer溢出，覆盖相邻内存区域。 后果： 覆盖栈上的返回地址或局部变量，引发程序崩溃或执行任意代码（安全漏洞）。 破坏其他数据（如函数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-10T02:41:45.000Z"}],["meta",{"property":"article:author","content":"ReWi"}],["meta",{"property":"article:published_time","content":"2025-04-08T15:30:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-10T02:41:45.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1744097583000,"updatedTime":1744252905000,"contributors":[{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.com","commits":2},{"name":"re-wi","username":"","email":"RejoiceWindow@yeah.com","commits":1}]},"readingTime":{"minutes":1.91,"words":574},"filePathRelative":"C/分析strcpy的潜在问题.md","localizedDate":"2025年4月8日","excerpt":"<h2>示例代码</h2>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">void</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> func</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">void</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">char</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> buffer</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">64</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">strcpy</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(buffer, large_string);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,k as data};
