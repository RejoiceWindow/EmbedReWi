import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as a,o as e}from"./app-DIMvcjhy.js";const t={};function l(r,i){return e(),n("div",null,i[0]||(i[0]=[a(`<h2 id="_1-docker-基础概念" tabindex="-1"><a class="header-anchor" href="#_1-docker-基础概念"><span><strong>1. Docker 基础概念</strong></span></a></h2><ul><li><p><strong>定义</strong>：Docker 是一个开源的应用容器化平台，允许开发者将应用及其依赖打包到一个轻量级、可移植的容器中，实现<strong>一次构建，随处运行</strong>。</p></li><li><p><strong>核心组件</strong>：</p><ul><li><strong>Docker 引擎</strong>（Docker Engine）：包含守护进程（<code>dockerd</code>）、REST API 和 CLI（<code>docker</code>），负责容器生命周期管理。</li><li><strong>镜像（Image）</strong>：只读模板，包含运行应用所需的代码、库和环境配置（如 <code>Dockerfile</code> 定义）。</li><li><strong>容器（Container）</strong>：镜像的运行实例，具有独立的文件系统、网络和进程空间。</li><li><strong>仓库（Registry）</strong>：存储和分发镜像的服务，如 Docker Hub、阿里云镜像仓库。</li></ul></li><li><p><strong>Docker vs 虚拟机</strong>：</p><table><thead><tr><th><strong>特性</strong></th><th><strong>Docker 容器</strong></th><th><strong>虚拟机（VM）</strong></th></tr></thead><tbody><tr><td><strong>隔离性</strong></td><td>进程级隔离（Linux 命名空间）</td><td>硬件级隔离（Hypervisor）</td></tr><tr><td><strong>启动速度</strong></td><td>秒级启动</td><td>分钟级启动</td></tr><tr><td><strong>资源占用</strong></td><td>低（共享宿主机内核）</td><td>高（需完整操作系统）</td></tr><tr><td><strong>性能损耗</strong></td><td>接近原生</td><td>较高（虚拟化开销）</td></tr><tr><td><strong>镜像体积</strong></td><td>小（仅应用层）</td><td>大（包含完整 OS）</td></tr></tbody></table></li></ul><hr><h2 id="_2-docker-核心操作" tabindex="-1"><a class="header-anchor" href="#_2-docker-核心操作"><span><strong>2. Docker 核心操作</strong></span></a></h2><h3 id="_1-镜像管理" tabindex="-1"><a class="header-anchor" href="#_1-镜像管理"><span><strong>(1) 镜像管理</strong></span></a></h3><ul><li><p><strong>拉取镜像</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx:alpine</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 从仓库拉取指定版本镜像</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>构建镜像</strong>（通过 <code>Dockerfile</code>）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myapp:v1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 构建并打标签</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>查看镜像</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> images</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 列出本地镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx:alpine</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 查看镜像详细信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>删除镜像</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rmi</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myapp:v1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 删除本地镜像</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_2-容器管理" tabindex="-1"><a class="header-anchor" href="#_2-容器管理"><span><strong>(2) 容器管理</strong></span></a></h3><ul><li><p><strong>启动容器</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> web</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8080:80</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx:alpine</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 后台运行并映射端口</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>查看容器</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 查看所有容器（包括已停止的）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> logs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> web</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 查看容器日志</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>进入容器</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> web</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /bin/sh</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 进入运行中的容器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>停止与删除</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> web</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 停止容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> web</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 删除容器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-数据持久化" tabindex="-1"><a class="header-anchor" href="#_3-数据持久化"><span><strong>(3) 数据持久化</strong></span></a></h3><ul><li><p><strong>Volume（数据卷）</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /宿主机路径:/容器路径</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx:alpine</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 绑定挂载</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> volume</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myvol</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 创建命名卷</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myvol:/容器路径</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx:alpine</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-网络管理" tabindex="-1"><a class="header-anchor" href="#_4-网络管理"><span><strong>(4) 网络管理</strong></span></a></h3><ul><li><p><strong>网络模式</strong>：</p><ul><li><strong>Bridge（默认）</strong>：容器通过虚拟网桥与宿主机通信。</li><li><strong>Host</strong>：容器共享宿主机网络命名空间，无独立 IP。</li><li><strong>None</strong>：禁用网络。</li><li><strong>Overlay</strong>：跨主机容器通信（用于 Swarm/Kubernetes）。</li></ul></li><li><p><strong>自定义网络</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mynet</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 创建网络</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --network=mynet</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx:alpine</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 加入网络</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_3-dockerfile-编写" tabindex="-1"><a class="header-anchor" href="#_3-dockerfile-编写"><span><strong>3. Dockerfile 编写</strong></span></a></h2><h3 id="_1-核心指令" tabindex="-1"><a class="header-anchor" href="#_1-核心指令"><span><strong>(1) 核心指令</strong></span></a></h3><ul><li><strong>FROM</strong>：指定基础镜像（如 <code>FROM alpine:3.18</code>）。</li><li><strong>RUN</strong>：执行命令（如安装依赖）。</li><li><strong>COPY/ADD</strong>：复制文件到镜像（<code>ADD</code> 支持 URL 和解压）。</li><li><strong>WORKDIR</strong>：设置工作目录。</li><li><strong>EXPOSE</strong>：声明容器监听端口。</li><li><strong>ENV</strong>：设置环境变量。</li><li><strong>CMD/ENTRYPOINT</strong>：定义容器启动命令。 <ul><li><code>CMD [&quot;可执行文件&quot;, &quot;参数&quot;]</code>：可被 <code>docker run</code> 参数覆盖。</li><li><code>ENTRYPOINT</code>：固定入口，通常与 <code>CMD</code> 结合使用。</li></ul></li></ul><h3 id="_2-优化技巧" tabindex="-1"><a class="header-anchor" href="#_2-优化技巧"><span><strong>(2) 优化技巧</strong></span></a></h3><ul><li><p><strong>多阶段构建</strong>：减少最终镜像体积。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 构建阶段</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> golang:1.21 </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> builder</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> . .</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> go build -o myapp .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 运行阶段</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> alpine:3.18</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=builder /app/myapp /usr/local/bin/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myapp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>减少镜像层数</strong>：合并多个 <code>RUN</code> 命令。</p></li><li><p><strong>使用 <code>.dockerignore</code></strong>：排除无关文件（如日志、临时文件）。</p></li></ul><hr><h2 id="_4-docker-compose" tabindex="-1"><a class="header-anchor" href="#_4-docker-compose"><span><strong>4. Docker Compose</strong></span></a></h2><ul><li><p><strong>定义</strong>：通过 <code>docker-compose.yml</code> 文件管理多容器应用。</p></li><li><p><strong>核心指令</strong>：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;3.8&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  web</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nginx:alpine</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;8080:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">./html:/usr/share/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">postgres:15</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      POSTGRES_PASSWORD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">example</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>常用命令</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 启动服务</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> down</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # 停止并删除容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> logs</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # 查看日志</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_5-面试常见问题" tabindex="-1"><a class="header-anchor" href="#_5-面试常见问题"><span><strong>5. 面试常见问题</strong></span></a></h2><h3 id="_1-docker-如何实现隔离" tabindex="-1"><a class="header-anchor" href="#_1-docker-如何实现隔离"><span><strong>(1) Docker 如何实现隔离？</strong></span></a></h3><ul><li><strong>Linux 命名空间</strong>（Namespace）：隔离进程、网络、文件系统等。</li><li><strong>控制组</strong>（Cgroups）：限制资源（CPU、内存、磁盘 I/O）。</li><li><strong>联合文件系统</strong>（UnionFS）：镜像分层存储，容器读写层叠加。</li></ul><h3 id="_2-如何调试容器启动失败问题" tabindex="-1"><a class="header-anchor" href="#_2-如何调试容器启动失败问题"><span><strong>(2) 如何调试容器启动失败问题？</strong></span></a></h3><ul><li>查看日志：<code>docker logs &lt;容器名&gt;</code>。</li><li>以交互模式启动：<code>docker run -it --entrypoint /bin/sh myapp</code>。</li><li>检查 Dockerfile 中的 <code>CMD/ENTRYPOINT</code> 指令。</li></ul><h3 id="_3-如何优化-docker-镜像体积" tabindex="-1"><a class="header-anchor" href="#_3-如何优化-docker-镜像体积"><span><strong>(3) 如何优化 Docker 镜像体积？</strong></span></a></h3><ul><li>使用 Alpine 等轻量级基础镜像。</li><li>多阶段构建，仅保留运行时依赖。</li><li>清理临时文件（如 <code>apt-get clean</code>）。</li></ul><h3 id="_4-容器与宿主机如何通信" tabindex="-1"><a class="header-anchor" href="#_4-容器与宿主机如何通信"><span><strong>(4) 容器与宿主机如何通信？</strong></span></a></h3><ul><li><strong>端口映射</strong>：<code>-p 宿主机端口:容器端口</code>。</li><li><strong>共享网络</strong>：使用 <code>--network=host</code> 模式。</li><li><strong>Volume 数据卷</strong>：共享文件系统。</li></ul><h3 id="_5-docker-安全最佳实践" tabindex="-1"><a class="header-anchor" href="#_5-docker-安全最佳实践"><span><strong>(5) Docker 安全最佳实践</strong></span></a></h3><ul><li>避免以 <code>root</code> 用户运行容器（<code>USER</code> 指令）。</li><li>定期扫描镜像漏洞（如 <code>docker scan</code>）。</li><li>限制资源使用（<code>--memory</code>, <code>--cpus</code>）。</li></ul><hr><h3 id="_6-实际应用场景" tabindex="-1"><a class="header-anchor" href="#_6-实际应用场景"><span><strong>6. 实际应用场景</strong></span></a></h3><ul><li><strong>开发环境标准化</strong>：团队统一开发环境，避免“在我机器上能跑”问题。</li><li><strong>持续集成（CI）</strong>：在容器中运行测试，确保环境一致性。</li><li><strong>微服务部署</strong>：每个服务独立容器化，结合 Kubernetes 管理。</li><li><strong>快速扩缩容</strong>：通过 Swarm/Kubernetes 实现动态伸缩。</li></ul><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h2><p>Docker 的核心价值在于<strong>环境一致性与资源隔离</strong>，需掌握镜像构建、容器管理、网络/存储配置及优化技巧。面试中需结合场景（如 CI/CD、微服务）展示实际经验，并关注安全与性能优化。推荐通过实战项目（如部署 Web 应用+数据库）加深理解。</p>`,39)]))}const k=s(t,[["render",l]]),o=JSON.parse('{"path":"/tools/Docker.html","title":"Docker","lang":"zh-CN","frontmatter":{"title":"Docker","date":"2025-05-03T14:50:00.000Z","icon":"devicon:docker-wordmark","tags":["Docker"],"categories":["tools"],"description":"1. Docker 基础概念 定义：Docker 是一个开源的应用容器化平台，允许开发者将应用及其依赖打包到一个轻量级、可移植的容器中，实现一次构建，随处运行。 核心组件： Docker 引擎（Docker Engine）：包含守护进程（dockerd）、REST API 和 CLI（docker），负责容器生命周期管理。 镜像（Image）：只读模板...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-03T14:50:00.000Z\\",\\"dateModified\\":\\"2025-05-06T05:37:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/tools/Docker.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"Docker"}],["meta",{"property":"og:description","content":"1. Docker 基础概念 定义：Docker 是一个开源的应用容器化平台，允许开发者将应用及其依赖打包到一个轻量级、可移植的容器中，实现一次构建，随处运行。 核心组件： Docker 引擎（Docker Engine）：包含守护进程（dockerd）、REST API 和 CLI（docker），负责容器生命周期管理。 镜像（Image）：只读模板..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-06T05:37:26.000Z"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2025-05-03T14:50:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-06T05:37:26.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1746509846000,"updatedTime":1746509846000,"contributors":[{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":1}]},"readingTime":{"minutes":4.27,"words":1281},"filePathRelative":"tools/Docker.md","localizedDate":"2025年5月3日","excerpt":"<h2><strong>1. Docker 基础概念</strong></h2>\\n<ul>\\n<li>\\n<p><strong>定义</strong>：Docker 是一个开源的应用容器化平台，允许开发者将应用及其依赖打包到一个轻量级、可移植的容器中，实现<strong>一次构建，随处运行</strong>。</p>\\n</li>\\n<li>\\n<p><strong>核心组件</strong>：</p>\\n<ul>\\n<li><strong>Docker 引擎</strong>（Docker Engine）：包含守护进程（<code>dockerd</code>）、REST API 和 CLI（<code>docker</code>），负责容器生命周期管理。</li>\\n<li><strong>镜像（Image）</strong>：只读模板，包含运行应用所需的代码、库和环境配置（如 <code>Dockerfile</code> 定义）。</li>\\n<li><strong>容器（Container）</strong>：镜像的运行实例，具有独立的文件系统、网络和进程空间。</li>\\n<li><strong>仓库（Registry）</strong>：存储和分发镜像的服务，如 Docker Hub、阿里云镜像仓库。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>Docker vs 虚拟机</strong>：</p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>特性</strong></th>\\n<th><strong>Docker 容器</strong></th>\\n<th><strong>虚拟机（VM）</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>隔离性</strong></td>\\n<td>进程级隔离（Linux 命名空间）</td>\\n<td>硬件级隔离（Hypervisor）</td>\\n</tr>\\n<tr>\\n<td><strong>启动速度</strong></td>\\n<td>秒级启动</td>\\n<td>分钟级启动</td>\\n</tr>\\n<tr>\\n<td><strong>资源占用</strong></td>\\n<td>低（共享宿主机内核）</td>\\n<td>高（需完整操作系统）</td>\\n</tr>\\n<tr>\\n<td><strong>性能损耗</strong></td>\\n<td>接近原生</td>\\n<td>较高（虚拟化开销）</td>\\n</tr>\\n<tr>\\n<td><strong>镜像体积</strong></td>\\n<td>小（仅应用层）</td>\\n<td>大（包含完整 OS）</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n</ul>","autoDesc":true}');export{k as comp,o as data};
