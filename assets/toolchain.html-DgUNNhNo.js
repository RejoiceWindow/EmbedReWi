import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as n}from"./app-DIMvcjhy.js";const t={};function r(o,i){return n(),e("div",null,i[0]||(i[0]=[a('<h2 id="autosar架构" tabindex="-1"><a class="header-anchor" href="#autosar架构"><span>AutoSAR架构</span></a></h2><ul><li>Simulink</li><li>EB Tresos</li><li>ETAS RTA</li><li>VECTOR DaVinci</li></ul><h2 id="can通信" tabindex="-1"><a class="header-anchor" href="#can通信"><span>CAN通信</span></a></h2><ul><li>INCA</li><li>Pcan</li><li>CANdela</li><li>CANdbc+</li><li>CANanalyzer</li><li>CANoe</li><li>CANape</li></ul><h2 id="整车设计" tabindex="-1"><a class="header-anchor" href="#整车设计"><span>整车设计</span></a></h2><ul><li>PREEvision</li></ul><h2 id="仿真" tabindex="-1"><a class="header-anchor" href="#仿真"><span>仿真</span></a></h2><ul><li>vVIRTUALtarget</li><li>Simulink</li></ul><h2 id="ide" tabindex="-1"><a class="header-anchor" href="#ide"><span>IDE</span></a></h2><ul><li>Eclipse</li><li>Hightech</li><li>TASKING</li><li>Green Hills</li></ul><h2 id="应用层开发" tabindex="-1"><a class="header-anchor" href="#应用层开发"><span>应用层开发</span></a></h2><ul><li>Matlab/Simulink</li></ul><h2 id="版本管理" tabindex="-1"><a class="header-anchor" href="#版本管理"><span>版本管理</span></a></h2><ul><li>Git</li><li>SVN</li></ul><h2 id="调试器" tabindex="-1"><a class="header-anchor" href="#调试器"><span>调试器</span></a></h2><ul><li>UAD</li><li>Lautebach</li><li>miniwiggler</li></ul><h2 id="其他工具" tabindex="-1"><a class="header-anchor" href="#其他工具"><span>其他工具</span></a></h2><ul><li>逻辑分析仪</li><li>电流钳</li><li>示波器</li><li>万用表</li></ul><h2 id="neusar-configurator" tabindex="-1"><a class="header-anchor" href="#neusar-configurator"><span>NeuSAR Configurator</span></a></h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>NeuSAR Configurator 是专门为汽车电子系统设计的配置工具，属于AUTOSAR（Automotive Open System Architecture）开发生态系统的一部分。NeuSAR（New Embedded Unified Software Architecture）是一个符合AUTOSAR标准的基础软件平台，由中国汽车工程研究院（CAERI）和其他合作伙伴开发。NeuSAR Configurator 作为这一平台的一部分，旨在简化和优化AUTOSAR系统的配置过程。</p></div><h3 id="主要功能和特点" tabindex="-1"><a class="header-anchor" href="#主要功能和特点"><span>主要功能和特点</span></a></h3><ul><li><p>图形化用户界面 (GUI):</p><ul><li>提供直观的图形化界面，简化AUTOSAR基础软件模块的配置。</li><li>用户可以通过拖放、点击等操作完成复杂的配置任务。</li></ul></li><li><p>AUTOSAR 规范支持：</p><ul><li>完全支持AUTOSAR标准的配置文件格式（如.arxml文件）。</li><li>确保生成的配置文件符合AUTOSAR规范，保证系统的一致性和兼容性。</li></ul></li><li><p>模块配置：</p><ul><li>支持对AUTOSAR基础软件模块的详细配置，包括通讯栈、存储管理、安全管理等。</li><li>提供预定义的配置模板，帮助用户快速开始配置工作。</li></ul></li><li><p>自动生成代码：</p><ul><li>根据配置生成高质量的AUTOSAR标准代码，减少手动编码的错误和工作量。</li><li>生成的代码可以直接集成到开发环境中进行编译和测试。</li></ul></li><li><p>一致性检查：</p><ul><li>提供自动化的一致性检查工具，确保配置参数的正确性和一致性。</li><li>提供详细的错误报告和提示，帮助用户快速定位和解决配置问题。</li></ul></li><li><p>版本管理：</p><ul><li>集成版本控制功能，帮助用户管理不同版本的配置文件。</li><li>支持配置文件的比较和合并，方便团队协作和配置管理。</li></ul></li><li><p>集成支持：</p><ul><li>与NeuSAR基础软件平台和其他AUTOSAR开发工具无缝集成。</li><li>支持与第三方工具（如代码生成器、仿真工具等）的集成，提高开发效率。</li></ul></li></ul><h2 id="davinci-dev-developer" tabindex="-1"><a class="header-anchor" href="#davinci-dev-developer"><span>DaVinci DEV(Developer)</span></a></h2><p>DaVinci DEV 是一个集成开发环境，专门用于AUTOSAR基础软件的开发。它支持AUTOSAR架构下的模块开发、集成和配置。</p><h3 id="主要特点" tabindex="-1"><a class="header-anchor" href="#主要特点"><span>主要特点</span></a></h3><ul><li><p><strong>模块开发</strong>：</p><ul><li>提供对AUTOSAR基础软件模块的全面支持，帮助开发者创建、修改和测试这些模块。</li><li>支持经典AUTOSAR架构（包括各个版本）的软件组件开发。</li></ul></li><li><p><strong>代码生成</strong>：</p><ul><li>自动生成符合AUTOSAR标准的C代码，确保与其他AUTOSAR组件的兼容性。</li><li>提供丰富的模板和示例代码，加速开发过程。</li></ul></li><li><p><strong>集成与测试</strong>：</p><ul><li>集成各类测试工具，支持单元测试、集成测试和系统测试。</li><li>提供仿真和调试工具，帮助开发者在PC环境中验证功能。</li></ul></li><li><p><strong>版本控制</strong>：</p><ul><li>集成版本控制系统，方便团队协作和代码管理。</li></ul></li></ul><h2 id="davinci-cfg-configurator" tabindex="-1"><a class="header-anchor" href="#davinci-cfg-configurator"><span>DaVinci CFG(Configurator)</span></a></h2><p>DaVinci CFG 是一个配置管理工具，用于配置和生成AUTOSAR基础软件的参数。它主要用于系统集成阶段，确保各个软件模块之间的参数一致性和正确性。</p><h3 id="主要-特点" tabindex="-1"><a class="header-anchor" href="#主要-特点"><span>主要.特点</span></a></h3><ul><li><p><strong>配置管理</strong>：</p><ul><li>提供图形化界面，方便用户配置AUTOSAR基础软件模块的参数。</li><li>支持多种AUTOSAR配置文件格式，如.arxml文件。</li></ul></li><li><p><strong>自动生成配置文件</strong>：</p><ul><li>根据用户的配置，自动生成符合AUTOSAR标准的配置文件。</li><li>确保各模块间的参数一致性，避免手动配置错误。</li></ul></li><li><p><strong>集成支持</strong>：</p><ul><li>与DaVinci DEV无缝集成，确保配置参数可以直接用于代码生成。</li><li>支持与其他第三方工具的集成，方便系统集成和测试。</li></ul></li><li><p><strong>一致性检查</strong>：</p><ul><li>提供自动化的一致性检查工具，确保配置参数符合AUTOSAR标准和系统要求。</li><li>提供详细的错误报告，帮助用户快速定位和修复配置问题。</li></ul></li></ul><h2 id="canoe" tabindex="-1"><a class="header-anchor" href="#canoe"><span>CANoe</span></a></h2><h3 id="在canoe中配置can-fd" tabindex="-1"><a class="header-anchor" href="#在canoe中配置can-fd"><span>在CANoe中配置CAN FD</span></a></h3><ol><li><p><strong>创建CAN FD网络</strong>：</p><ul><li>打开CANoe软件，创建一个新的CANoe配置文件或打开现有配置文件。</li><li>在网络节点（Network Nodes）窗口中添加一个新的CAN FD网络节点。</li></ul></li><li><p><strong>配置CAN FD总线参数</strong>：</p><ul><li>在网络节点窗口中选择新创建的CAN FD节点，右键点击并选择“Properties”（属性）。</li><li>在属性窗口中，选择“CAN Bus Parameters”（CAN总线参数）选项卡。 <ul><li>设置“Arbitration Bit Rate”（仲裁位速率）：例如1 Mbps。</li><li>设置“Data Bit Rate”（数据位速率）：例如2 Mbps或更高。</li><li>设置“Sample Point”（采样点）和其他与总线相关的参数。</li></ul></li></ul></li><li><p><strong>添加CAN FD消息</strong>：</p><ul><li>在CANoe的“Database Editor”（数据库编辑器）中，打开相关的CAN数据库文件（.dbc文件）。</li><li>在数据库中添加新的CAN FD消息。设置消息ID、名称和DLC（Data Length Code，数据长度代码）。</li><li>添加信号并设置其属性（例如，起始位、长度、缩放和偏移量等）。</li></ul></li><li><p><strong>配置发送和接收节点</strong>：</p><ul><li>在CANoe配置窗口中，添加发送和接收节点。</li><li>在发送节点中，编写CAPL（CAN Access Programming Language）脚本或使用图形界面定义发送CAN FD消息的逻辑。</li><li>在接收节点中，编写CAPL脚本或使用图形界面定义接收和处理CAN FD消息的逻辑。</li></ul></li><li><p><strong>设置CAN FD网络仿真</strong>：</p><ul><li>配置CANoe的仿真参数以支持CAN FD网络。</li><li>在“Simulation Setup”（仿真设置）窗口中，添加一个新的CAN FD仿真节点。</li><li>设置仿真节点的属性，使其能够仿真CAN FD总线的行为。</li></ul></li><li><p><strong>运行和监控仿真</strong>：</p><ul><li>启动CANoe仿真，运行CAPL脚本或监控界面。</li><li>使用CANoe的Trace窗口监控CAN FD消息的发送和接收。</li><li>验证CAN FD消息的格式和内容是否符合预期。</li></ul></li></ol>',33)]))}const c=l(t,[["render",r]]),h=JSON.parse('{"path":"/OS/AUTOSAR/toolchain.html","title":"toolchain","lang":"zh-CN","frontmatter":{"title":"toolchain","description":"工具链","tags":["AUTOSAR","开发工具"],"categories":["OS"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"toolchain\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T08:33:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/OS/AUTOSAR/toolchain.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"toolchain"}],["meta",{"property":"og:description","content":"工具链"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T08:33:42.000Z"}],["meta",{"property":"article:tag","content":"开发工具"}],["meta",{"property":"article:tag","content":"AUTOSAR"}],["meta",{"property":"article:modified_time","content":"2025-05-01T08:33:42.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1745725632000,"updatedTime":1746088422000,"contributors":[{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":3}]},"readingTime":{"minutes":5.11,"words":1534},"filePathRelative":"OS/AUTOSAR/toolchain.md","localizedDate":"2025年4月27日","excerpt":"<h2>AutoSAR架构</h2>\\n<ul>\\n<li>Simulink</li>\\n<li>EB Tresos</li>\\n<li>ETAS RTA</li>\\n<li>VECTOR DaVinci</li>\\n</ul>\\n<h2>CAN通信</h2>\\n<ul>\\n<li>INCA</li>\\n<li>Pcan</li>\\n<li>CANdela</li>\\n<li>CANdbc+</li>\\n<li>CANanalyzer</li>\\n<li>CANoe</li>\\n<li>CANape</li>\\n</ul>\\n<h2>整车设计</h2>\\n<ul>\\n<li>PREEvision</li>\\n</ul>\\n<h2>仿真</h2>"}');export{c as comp,h as data};
