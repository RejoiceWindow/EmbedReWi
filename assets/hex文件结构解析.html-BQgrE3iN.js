import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as o,o as d}from"./app-DIMvcjhy.js";const n={};function s(a,e){return d(),r("div",null,e[0]||(e[0]=[o(`<p>嵌入式MCU的<strong>Hex文件</strong>（Intel HEX格式）是一种用于存储二进制机器码的文本文件格式，常用于将程序代码烧录到微控制器（MCU）的Flash或EEPROM中。Hex文件通过ASCII字符表示二进制数据，并包含地址、校验和等关键信息，确保数据的完整性和正确性。</p><p>以下是Hex文件的内容结构原理的详细分析：</p><hr><h3 id="_1-hex文件的核心结构" tabindex="-1"><a class="header-anchor" href="#_1-hex文件的核心结构"><span><strong>1. Hex文件的核心结构</strong></span></a></h3><p>Hex文件由多行文本组成，每行称为一条<strong>记录（Record）</strong>。每条记录的结构如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:LLAAAATTDD…DDCC</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><strong>字段说明</strong>：</p><table><thead><tr><th>字段</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td><code>:</code></td><td>1字节</td><td><strong>起始符</strong>，固定为冒号 <code>:</code>。</td></tr><tr><td><code>LL</code></td><td>2字符（1字节）</td><td><strong>数据长度</strong>（Data Length），表示后续数据字节数（范围：0x00~0xFF）。</td></tr><tr><td><code>AAAA</code></td><td>4字符（2字节）</td><td><strong>地址</strong>（Address），数据在内存中的起始偏移地址。</td></tr><tr><td><code>TT</code></td><td>2字符（1字节）</td><td><strong>记录类型</strong>（Record Type），定义记录的作用（见下文）。</td></tr><tr><td><code>DD…DD</code></td><td>2×N字符（N字节）</td><td><strong>数据</strong>（Data），实际的二进制数据（以ASCII字符表示）。</td></tr><tr><td><code>CC</code></td><td>2字符（1字节）</td><td><strong>校验和</strong>（Checksum），用于验证记录完整性。</td></tr></tbody></table></li></ul><hr><h3 id="_2-记录类型-record-type" tabindex="-1"><a class="header-anchor" href="#_2-记录类型-record-type"><span><strong>2. 记录类型（Record Type）</strong></span></a></h3><p>Hex文件通过<code>TT</code>字段区分不同类型的记录，常见的类型如下：</p><table><thead><tr><th>类型码</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>00</strong></td><td><strong>Data Record</strong></td><td>存储实际代码或数据（最常见类型）。</td></tr><tr><td><strong>01</strong></td><td><strong>End of File (EOF)</strong></td><td>文件结束标志，通常为<code>:00000001FF</code>。</td></tr><tr><td><strong>02</strong></td><td><strong>Extended Segment Address</strong></td><td>定义扩展段地址（用于16位地址扩展）。</td></tr><tr><td><strong>04</strong></td><td><strong>Extended Linear Address</strong></td><td>定义扩展线性地址（用于32位地址空间）。</td></tr><tr><td><strong>05</strong></td><td><strong>Start Linear Address</strong></td><td>指定程序入口地址（仅某些架构支持）。</td></tr></tbody></table><hr><h3 id="_3-地址扩展机制" tabindex="-1"><a class="header-anchor" href="#_3-地址扩展机制"><span><strong>3. 地址扩展机制</strong></span></a></h3><p>由于标准地址字段（<code>AAAA</code>）仅支持16位地址（最大64KB），对于更大的地址空间（如32位），Hex文件使用<strong>扩展记录</strong>来组合地址：</p><ul><li><p><strong>Extended Linear Address (04类型)</strong><br> 定义高16位地址，后续数据记录的地址为：<br><strong>物理地址 = (高16位 &lt;&lt; 16) + 当前记录的地址（AAAA）</strong><br> 例如：<code>:020000040001F9</code> 表示高16位地址为<code>0x0001</code>。</p></li><li><p><strong>Extended Segment Address (02类型)</strong><br> 定义段地址（段地址 &lt;&lt; 4 + 偏移地址），用于旧式分段寻址。</p></li></ul><hr><h3 id="_4-校验和计算" tabindex="-1"><a class="header-anchor" href="#_4-校验和计算"><span><strong>4. 校验和计算</strong></span></a></h3><p>校验和<code>CC</code>用于验证记录的完整性，计算方法为：</p><ol><li>将记录中<code>LL</code>、<code>AAAA</code>、<code>TT</code>和所有<code>DD</code>的<strong>字节值相加</strong>。</li><li>取和的<strong>最低字节</strong>，并计算其<strong>二进制补码</strong>（即<code>0x100 - sum_byte</code>）。</li><li>结果即为校验和<code>CC</code>。</li></ol><p><strong>示例</strong>：<br> 记录 <code>:0300300002337A1E</code></p><ul><li>计算 <code>0x03 + 0x00 + 0x30 + 0x00 + 0x02 + 0x33 + 0x7A = 0xE2</code></li><li>校验和为 <code>0x100 - 0xE2 = 0x1E</code>。</li></ul><hr><h3 id="_5-hex文件示例解析" tabindex="-1"><a class="header-anchor" href="#_5-hex文件示例解析"><span><strong>5. Hex文件示例解析</strong></span></a></h3><p>以下是一个典型的Hex文件片段：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:020000040001F9        // 扩展线性地址记录（高16位地址0x0001）</span></span>
<span class="line"><span>:100000000A1B2C3D4E5F60718293A4B5C6D7E8F9FA6</span></span>
<span class="line"><span>:00000001FF            // 文件结束记录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>第一行</strong>：扩展线性地址为<code>0x0001</code>，后续数据记录的物理地址为 <code>0x00010000 + 偏移地址</code>。</li><li><strong>第二行</strong>：数据长度为<code>0x10</code>（16字节），地址为<code>0x0000</code>，类型为<code>00</code>（数据），校验和为<code>0x6</code>。</li></ul><hr><h3 id="_6-hex文件-vs-bin文件" tabindex="-1"><a class="header-anchor" href="#_6-hex文件-vs-bin文件"><span><strong>6. Hex文件 vs. Bin文件</strong></span></a></h3><table><thead><tr><th>特性</th><th>Hex文件</th><th>Bin文件</th></tr></thead><tbody><tr><td><strong>地址信息</strong></td><td>包含地址、校验和</td><td>仅包含纯二进制数据</td></tr><tr><td><strong>可读性</strong></td><td>文本格式，可人工阅读</td><td>二进制格式，不可读</td></tr><tr><td><strong>适用场景</strong></td><td>需要地址和校验的烧录场景</td><td>已知固定地址的简单场景</td></tr></tbody></table><hr><h3 id="_7-工具链中的hex文件" tabindex="-1"><a class="header-anchor" href="#_7-工具链中的hex文件"><span><strong>7. 工具链中的Hex文件</strong></span></a></h3><p>Hex文件通常由<strong>编译器/链接器</strong>生成（如Keil、IAR、GCC），并通过<strong>烧录工具</strong>（如J-Link、ST-Link）解析后写入MCU。其核心优势在于：</p><ul><li>支持分段地址和校验，确保数据准确写入目标地址。</li><li>兼容性强，广泛用于嵌入式开发。</li></ul><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><p>Hex文件通过结构化的文本记录，将二进制代码、地址和校验信息结合，为MCU提供了一种可靠的数据传输格式。理解Hex文件的结构和原理，有助于调试程序、分析烧录问题，并深入掌握嵌入式系统的底层运行机制。</p><hr><h1 id="_0400000500009575ed-怎么理解" tabindex="-1"><a class="header-anchor" href="#_0400000500009575ed-怎么理解"><span>:0400000500009575ED 怎么理解</span></a></h1><p>你提供的记录 <code>:0400000500009575ED</code> 是 <strong>Intel HEX格式</strong>中的一条特殊记录，属于**启动线性地址（Start Linear Address）**类型（类型码 <code>05</code>），用于指定程序执行的起始地址（如程序入口点）。以下是详细解析：</p><hr><h3 id="_1-记录结构拆解" tabindex="-1"><a class="header-anchor" href="#_1-记录结构拆解"><span><strong>1. 记录结构拆解</strong></span></a></h3><p>按格式 <code>:LLAAAATTDD…DDCC</code> 分解：</p><ul><li><strong><code>:</code></strong>：起始符。</li><li><strong><code>04</code></strong>：数据长度（<code>LL</code>），表示后续数据部分有 <strong>4字节</strong>（对应 <code>00009575</code>）。</li><li><strong><code>0000</code></strong>：地址字段（<code>AAAA</code>），此处固定为 <code>0000</code>（类型05记录的地址字段无实际意义）。</li><li><strong><code>05</code></strong>：记录类型（<code>TT</code>），表示 <strong>Start Linear Address</strong>。</li><li><strong><code>00009575</code></strong>：数据（<code>DD</code>），代表 <strong>32位的起始地址</strong>（大端格式，即 <code>0x00009575</code>）。</li><li><strong><code>ED</code></strong>：校验和（<code>CC</code>），用于验证数据完整性。</li></ul><hr><h3 id="_2-关键信息解析" tabindex="-1"><a class="header-anchor" href="#_2-关键信息解析"><span><strong>2. 关键信息解析</strong></span></a></h3><h4 id="_1-起始线性地址的作用" tabindex="-1"><a class="header-anchor" href="#_1-起始线性地址的作用"><span><strong>(1) 起始线性地址的作用</strong></span></a></h4><ul><li><strong>功能</strong>：该记录定义程序执行的<strong>入口地址</strong>（Entry Point），即MCU复位或启动后跳转的地址。</li><li><strong>适用场景</strong>：常见于ARM Cortex-M等架构的HEX文件，用于指定<strong>复位向量</strong>或<strong>主程序起始地址</strong>。例如，在STM32中，复位向量通常指向<code>main</code>函数或启动代码。</li></ul><h4 id="_2-地址格式" tabindex="-1"><a class="header-anchor" href="#_2-地址格式"><span><strong>(2) 地址格式</strong></span></a></h4><ul><li><strong>数据内容</strong>：<code>00009575</code> 是32位地址，按大端格式解析为 <strong>0x00009575</strong>。</li><li><strong>物理意义</strong>：可能是以下两种情况之一： <ul><li><strong>复位向量地址</strong>：MCU复位后从此地址读取第一条指令。</li><li><strong>程序入口点</strong>：由链接器指定，直接指向用户代码的起始位置（如 <code>main</code> 函数）。</li></ul></li></ul><h4 id="_3-校验和验证" tabindex="-1"><a class="header-anchor" href="#_3-校验和验证"><span><strong>(3) 校验和验证</strong></span></a></h4><p>校验和计算过程：</p><ol><li>取记录中 <code>LL</code>、<code>AAAA</code>、<code>TT</code>、<code>DD</code> 的字节值相加：<br><code>0x04 + 0x00 + 0x00 + 0x05 + 0x00 + 0x00 + 0x95 + 0x75 = 0x113</code><br> （实际计算时取低8位：<code>0x13</code>）</li><li>计算二进制补码：<br><code>0x100 - 0x13 = 0xED</code><br> 与记录中的校验和 <code>ED</code> 一致，验证通过。</li></ol><hr><h3 id="_3-实际应用场景" tabindex="-1"><a class="header-anchor" href="#_3-实际应用场景"><span><strong>3. 实际应用场景</strong></span></a></h3><h4 id="_1-arm-cortex-m中的典型用法" tabindex="-1"><a class="header-anchor" href="#_1-arm-cortex-m中的典型用法"><span><strong>(1) ARM Cortex-M中的典型用法</strong></span></a></h4><p>在ARM架构中，HEX文件的 <strong>Start Linear Address</strong> 通常对应<strong>中断向量表</strong>中的第一个条目（复位向量）。例如：</p><ul><li>向量表起始地址为 <code>0x00000000</code>，第一个4字节是栈顶指针，第二个4字节是复位向量地址。</li><li>若复位向量指向 <code>0x00009575</code>，则MCU复位后会跳转到此地址执行代码。</li></ul><h4 id="_2-编译器生成的示例" tabindex="-1"><a class="header-anchor" href="#_2-编译器生成的示例"><span><strong>(2) 编译器生成的示例</strong></span></a></h4><p>假设你使用GCC编译STM32程序，链接脚本可能定义程序入口地址为 <code>0x08000000</code>（Flash起始地址）。生成的HEX文件中会出现类似记录：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:0400000508000000F3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>表示程序入口地址为 <code>0x08000000</code>。</p><hr><h3 id="_4-与其他记录类型的区别" tabindex="-1"><a class="header-anchor" href="#_4-与其他记录类型的区别"><span><strong>4. 与其他记录类型的区别</strong></span></a></h3><ul><li><strong>vs. Extended Linear Address (04类型)</strong><ul><li><code>04</code>类型用于扩展地址空间（高16位地址），而 <code>05</code>类型直接指定32位入口地址。</li></ul></li><li><strong>vs. Data Record (00类型)</strong><ul><li><code>00</code>类型存储实际代码或数据，<code>05</code>类型仅用于定义入口地址，不包含可执行代码。</li></ul></li></ul><hr><h3 id="_5-调试与验证" tabindex="-1"><a class="header-anchor" href="#_5-调试与验证"><span><strong>5. 调试与验证</strong></span></a></h3><ul><li><strong>查看入口地址</strong>：使用反汇编工具（如<code>objdump</code>）或HEX解析工具（如<a href="https://hexed.it/" target="_blank" rel="noopener noreferrer">HexEdit</a>）可直接查看该地址对应的代码。</li><li><strong>烧录验证</strong>：若烧录后MCU未按预期运行，需检查此地址是否指向有效代码（如是否存在中断向量表或启动文件）。</li></ul><hr><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span><strong>总结</strong></span></a></h3><p>记录 <code>:0400000500009575ED</code> 表示程序的<strong>启动线性地址为 <code>0x00009575</code></strong>，通常用于指定MCU复位后的执行起点。理解此记录有助于：</p><ol><li>确认程序入口是否符合预期（如是否指向有效代码）。</li><li>调试启动失败问题（如地址错误导致MCU无法跳转）。</li><li>分析链接脚本和编译生成的地址分配。</li></ol>`,71)]))}const l=t(n,[["render",s]]),h=JSON.parse('{"path":"/advance/hex%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90.html","title":"hex文件结构解析","lang":"zh-CN","frontmatter":{"title":"hex文件结构解析","date":"2025-03-19T09:26:00.000Z","tag":["upgrade"],"category":["MCU"],"description":"嵌入式MCU的Hex文件（Intel HEX格式）是一种用于存储二进制机器码的文本文件格式，常用于将程序代码烧录到微控制器（MCU）的Flash或EEPROM中。Hex文件通过ASCII字符表示二进制数据，并包含地址、校验和等关键信息，确保数据的完整性和正确性。 以下是Hex文件的内容结构原理的详细分析： 1. Hex文件的核心结构 Hex文件由多行文...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"hex文件结构解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-19T09:26:00.000Z\\",\\"dateModified\\":\\"2025-04-29T07:17:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/advance/hex%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"hex文件结构解析"}],["meta",{"property":"og:description","content":"嵌入式MCU的Hex文件（Intel HEX格式）是一种用于存储二进制机器码的文本文件格式，常用于将程序代码烧录到微控制器（MCU）的Flash或EEPROM中。Hex文件通过ASCII字符表示二进制数据，并包含地址、校验和等关键信息，确保数据的完整性和正确性。 以下是Hex文件的内容结构原理的详细分析： 1. Hex文件的核心结构 Hex文件由多行文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T07:17:06.000Z"}],["meta",{"property":"article:tag","content":"upgrade"}],["meta",{"property":"article:published_time","content":"2025-03-19T09:26:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-29T07:17:06.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1744102850000,"updatedTime":1745911026000,"contributors":[{"name":"re-wi","username":"","email":"RejoiceWindow@yeah.com","commits":1},{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":1}]},"readingTime":{"minutes":6.35,"words":1906},"filePathRelative":"advance/hex文件结构解析.md","localizedDate":"2025年3月19日","excerpt":"<p>嵌入式MCU的<strong>Hex文件</strong>（Intel HEX格式）是一种用于存储二进制机器码的文本文件格式，常用于将程序代码烧录到微控制器（MCU）的Flash或EEPROM中。Hex文件通过ASCII字符表示二进制数据，并包含地址、校验和等关键信息，确保数据的完整性和正确性。</p>\\n<p>以下是Hex文件的内容结构原理的详细分析：</p>\\n<hr>\\n<h3><strong>1. Hex文件的核心结构</strong></h3>\\n<p>Hex文件由多行文本组成，每行称为一条<strong>记录（Record）</strong>。每条记录的结构如下：</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>:LLAAAATTDD…DDCC</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{l as comp,h as data};
