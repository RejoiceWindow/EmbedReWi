import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as a,o as r}from"./app-DIMvcjhy.js";const p={};function n(o,e){return r(),i("div",null,e[0]||(e[0]=[a('<h2 id="优先级反转" tabindex="-1"><a class="header-anchor" href="#优先级反转"><span>优先级反转</span></a></h2><div class="hint-container tip"><p class="hint-container-title">优先级反转（Priority Inversion）</p><p>优先级反转（Priority Inversion） 是实时操作系统（RTOS）中的一种现象，指高优先级任务因等待低优先级任务持有的资源而被阻塞，而此时中优先级任务抢占执行，导致高优先级任务无法及时运行，破坏系统的实时性。常见于使用互斥锁（Mutex）等同步机制时。</p></div><h3 id="典型场景" tabindex="-1"><a class="header-anchor" href="#典型场景"><span>典型场景</span></a></h3><p>任务优先级：高（T_high）、中（T_medium）、低（T_low）。</p><p>资源竞争：T_low 持有资源（如锁），T_high 请求该资源被阻塞。</p><p>抢占时机：T_medium 在 T_low 释放资源前就绪并抢占，导致 T_high 被长时间阻塞</p><h3 id="问题根源" tabindex="-1"><a class="header-anchor" href="#问题根源"><span>问题根源</span></a></h3><p>调度机制缺陷：默认调度器仅按优先级分配 CPU，未考虑资源依赖。</p><p>共享资源管理不当：低优先级任务长时间占用资源且未释放。</p><h3 id="示例分析" tabindex="-1"><a class="header-anchor" href="#示例分析"><span>示例分析</span></a></h3><p>场景复现：<br> T_low 获取锁，进入临界区。</p><p>T_high 就绪，请求同一锁，被阻塞。</p><p>T_medium 就绪，抢占 T_low 执行（因优先级高于 T_low）。</p><p>T_high 必须等待 T_medium 和 T_low 均完成后才能运行。</p><p>结果：高优先级任务实际延迟由中、低优先级任务共同决定，违背实时性要求。</p><h3 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法"><span>解决方法</span></a></h3><h4 id="方法-1-优先级继承协议-priority-inheritance-protocol" tabindex="-1"><a class="header-anchor" href="#方法-1-优先级继承协议-priority-inheritance-protocol"><span>方法 1：优先级继承协议（Priority Inheritance Protocol）</span></a></h4><p>原理：当高优先级任务因资源被低优先级任务阻塞时，临时提升低优先级任务的优先级至高优先级任务的级别，使其尽快释放资源。</p><p>操作步骤：<br> T_high 请求被 T_low 持有的锁，触发优先级继承。</p><p>T_low 的优先级被提升至与 T_high 相同。</p><p>T_low 执行完临界区后释放锁，优先级恢复原状。</p><p>T_high 立即获得锁并执行。</p><p>优势：避免中优先级任务插队，缩短阻塞时间。</p><p>实现：需操作系统支持（如 FreeRTOS 的 xSemaphoreCreateMutex() 默认启用优先级继承）。</p><h4 id="方法-2-优先级天花板协议-priority-ceiling-protocol" tabindex="-1"><a class="header-anchor" href="#方法-2-优先级天花板协议-priority-ceiling-protocol"><span>方法 2：优先级天花板协议（Priority Ceiling Protocol）</span></a></h4><p>原理：为每个资源预先定义“天花板优先级”（所有可能访问该资源的任务的最高优先级）。当任务持有资源时，其优先级自动提升至天花板优先级。</p><p>操作步骤：<br> T_low 获取锁时，优先级提升至天花板优先级（如 T_high 的优先级）。</p><p>T_low 执行期间无法被中优先级任务抢占。</p><p>T_low 释放锁后，优先级恢复原状。</p><p>优势：彻底防止优先级反转，但可能增加任务优先级切换开销。</p><p>实现：需手动配置资源的天花板优先级（如 POSIX 的 pthread_mutexattr_setprotocol()）。</p><h4 id="方法-3-禁止临界区抢占" tabindex="-1"><a class="header-anchor" href="#方法-3-禁止临界区抢占"><span>方法 3：禁止临界区抢占</span></a></h4><p>原理：在任务持有共享资源时，禁止任务切换（如关闭中断或调度器）。</p><p>适用场景：极短临界区操作（微秒级），如寄存器配置。</p><p>风险：可能增加中断延迟，需严格限制临界区代码长度。</p><h3 id="监控优先级反转" tabindex="-1"><a class="header-anchor" href="#监控优先级反转"><span>监控优先级反转</span></a></h3><p>调试工具：使用 Tracealyzer 等工具可视化任务阻塞链。</p><p>API 检测：调用 uxTaskPriorityGet() 检查任务优先级是否异常提升。</p><h3 id="设计建议" tabindex="-1"><a class="header-anchor" href="#设计建议"><span>设计建议</span></a></h3><p>最小化临界区：减少锁持有时间（如仅拷贝数据，不在临界区内处理）。</p><p>优先级规划：确保访问同一资源的任务优先级相近，或使用天花板协议。</p><p>替代方案：考虑无锁数据结构（如环形队列）或原子操作。</p>',42)]))}const c=t(p,[["render",n]]),l=JSON.parse('{"path":"/advance/%E4%BC%98%E5%85%88%E7%BA%A7.html","title":"优先级","lang":"zh-CN","frontmatter":{"title":"优先级","icon":"icon-park:link-interrupt","tag":["优先级"],"category":["MCU"],"description":"优先级反转 优先级反转（Priority Inversion） 优先级反转（Priority Inversion） 是实时操作系统（RTOS）中的一种现象，指高优先级任务因等待低优先级任务持有的资源而被阻塞，而此时中优先级任务抢占执行，导致高优先级任务无法及时运行，破坏系统的实时性。常见于使用互斥锁（Mutex）等同步机制时。 典型场景 任务优先级：高...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"优先级\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-29T07:17:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/advance/%E4%BC%98%E5%85%88%E7%BA%A7.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"优先级"}],["meta",{"property":"og:description","content":"优先级反转 优先级反转（Priority Inversion） 优先级反转（Priority Inversion） 是实时操作系统（RTOS）中的一种现象，指高优先级任务因等待低优先级任务持有的资源而被阻塞，而此时中优先级任务抢占执行，导致高优先级任务无法及时运行，破坏系统的实时性。常见于使用互斥锁（Mutex）等同步机制时。 典型场景 任务优先级：高..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T07:17:06.000Z"}],["meta",{"property":"article:tag","content":"优先级"}],["meta",{"property":"article:modified_time","content":"2025-04-29T07:17:06.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1744711098000,"updatedTime":1745911026000,"contributors":[{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":2}]},"readingTime":{"minutes":2.93,"words":878},"filePathRelative":"advance/优先级.md","localizedDate":"2025年4月15日","excerpt":"<h2>优先级反转</h2>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">优先级反转（Priority Inversion）</p>\\n<p>优先级反转（Priority Inversion） 是实时操作系统（RTOS）中的一种现象，指高优先级任务因等待低优先级任务持有的资源而被阻塞，而此时中优先级任务抢占执行，导致高优先级任务无法及时运行，破坏系统的实时性。常见于使用互斥锁（Mutex）等同步机制时。</p>\\n</div>\\n<h3>典型场景</h3>\\n<p>任务优先级：高（T_high）、中（T_medium）、低（T_low）。</p>","autoDesc":true}');export{c as comp,l as data};
