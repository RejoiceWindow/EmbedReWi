import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as n,o as e}from"./app-DIMvcjhy.js";const s={};function i(l,t){return e(),r("div",null,t[0]||(t[0]=[n('<h2 id="一、http-基础概念" tabindex="-1"><a class="header-anchor" href="#一、http-基础概念"><span><strong>一、HTTP 基础概念</strong></span></a></h2><ol><li><p><strong>定义与作用</strong><br> HTTP（Hypertext Transfer Protocol，超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的<strong>应用层协议</strong>，基于 TCP/IP，默认端口为 80。其主要功能是定义客户端与服务器之间的通信格式，支持请求-响应模式，且无状态（依赖 Cookie 扩展状态管理）。</p></li><li><p><strong>核心特点</strong></p><ul><li><strong>无连接性</strong>（HTTP/1.0 后通过 Keep-Alive 支持长连接）</li><li><strong>无状态性</strong>（需借助 Session/Cookie 维护状态）</li><li><strong>明文传输</strong>（HTTPS 通过 SSL/TLS 加密）。</li></ul></li></ol><hr><h2 id="二、http-版本演进" tabindex="-1"><a class="header-anchor" href="#二、http-版本演进"><span><strong>二、HTTP 版本演进</strong></span></a></h2><table><thead><tr><th><strong>版本</strong></th><th><strong>核心改进</strong></th><th><strong>局限性</strong></th></tr></thead><tbody><tr><td><strong>HTTP/1.0</strong></td><td>短连接（每个请求需新建 TCP 连接）、基础方法（GET/POST/HEAD）</td><td>高延迟（频繁三次握手）、资源加载效率低</td></tr><tr><td><strong>HTTP/1.1</strong></td><td>持久连接（默认复用 TCP）、管道化（请求并行但响应需按序）、分块传输、Host 头</td><td>队头阻塞（HTTP 层）、头部冗余</td></tr><tr><td><strong>HTTP/2</strong></td><td>二进制分帧、多路复用（单连接并行）、头部压缩（HPACK）、服务端推送</td><td>仍受 TCP 队头阻塞影响、需强制 TLS 加密</td></tr><tr><td><strong>HTTP/3</strong></td><td>基于 QUIC（UDP 协议）、0-RTT 握手、解决 TCP 队头阻塞、前向安全</td><td>中间设备兼容性（部分防火墙/UDP 支持不足）</td></tr></tbody></table><hr><h2 id="三、http-核心组件" tabindex="-1"><a class="header-anchor" href="#三、http-核心组件"><span><strong>三、HTTP 核心组件</strong></span></a></h2><ol><li><p><strong>请求方法</strong></p><table><thead><tr><th><strong>方法</strong></th><th><strong>作用</strong></th><th><strong>幂等性</strong></th><th><strong>安全性</strong></th></tr></thead><tbody><tr><td>GET</td><td>获取资源</td><td>是</td><td>安全</td></tr><tr><td>POST</td><td>提交数据（如表单）</td><td>否</td><td>不安全</td></tr><tr><td>PUT</td><td>替换资源</td><td>是</td><td>不安全</td></tr><tr><td>DELETE</td><td>删除资源</td><td>是</td><td>不安全</td></tr><tr><td>HEAD</td><td>获取首部（无实体）</td><td>是</td><td>安全</td></tr></tbody></table><ul><li><strong>PUT vs PATCH</strong>：PUT 全量替换，PATCH 部分更新。</li></ul></li><li><p><strong>状态码</strong></p><table><thead><tr><th><strong>类别</strong></th><th><strong>含义</strong></th><th><strong>常见状态码</strong></th></tr></thead><tbody><tr><td>2XX</td><td>成功</td><td>200 OK（成功）、204 No Content（无返回体）、206 Partial Content（范围请求）</td></tr><tr><td>3XX</td><td>重定向</td><td>301（永久重定向）、302（临时重定向）、304 Not Modified（缓存有效）</td></tr><tr><td>4XX</td><td>客户端错误</td><td>400 Bad Request（语法错误）、401 Unauthorized（未授权）、404 Not Found</td></tr><tr><td>5XX</td><td>服务器错误</td><td>500 Internal Server Error、503 Service Unavailable（服务不可用）</td></tr></tbody></table></li><li><p><strong>报文结构</strong></p><ul><li><strong>请求报文</strong>：请求行（方法 + URI + 版本）、请求头（Host/User-Agent/Accept 等）、空行、请求体（POST/PUT）</li><li><strong>响应报文</strong>：状态行（版本 + 状态码 + 描述）、响应头（Content-Type/Content-Length 等）、空行、响应体。</li></ul></li></ol><hr><h2 id="四、http-高级特性" tabindex="-1"><a class="header-anchor" href="#四、http-高级特性"><span><strong>四、HTTP 高级特性</strong></span></a></h2><ol><li><p><strong>连接管理</strong></p><ul><li><strong>短连接</strong>：HTTP/1.0 默认，每次请求新建 TCP 连接。</li><li><strong>长连接</strong>：HTTP/1.1 默认，复用 TCP 连接（减少握手开销），通过 <code>Connection: keep-alive</code> 控制。</li></ul></li><li><p><strong>缓存机制</strong></p><ul><li><strong>强缓存</strong>：<code>Cache-Control</code>（max-age）、<code>Expires</code>（绝对时间），直接使用本地缓存。</li><li><strong>协商缓存</strong>：<code>Last-Modified/If-Modified-Since</code>（时间戳）、<code>ETag/If-None-Match</code>（哈希值），需服务器验证。</li></ul></li><li><p><strong>HTTPS 与安全</strong></p><ul><li><strong>加密流程</strong>：非对称加密（RSA/ECDHE 交换密钥） + 对称加密（AES 传输数据）。</li><li><strong>证书验证</strong>：CA 机构签发证书，验证域名、有效期、吊销状态（CRL/OCSP）。</li><li><strong>TLS 1.3 优化</strong>：1-RTT 握手、移除不安全算法（如 RSA 密钥交换）。</li></ul></li></ol><hr><h2 id="五、性能优化与调试" tabindex="-1"><a class="header-anchor" href="#五、性能优化与调试"><span><strong>五、性能优化与调试</strong></span></a></h2><ol><li><p><strong>HTTP/2 优化</strong></p><ul><li><strong>多路复用</strong>：单连接并行传输，解决 HTTP 层队头阻塞。</li><li><strong>头部压缩</strong>：HPACK 算法减少冗余头部。</li></ul></li><li><p><strong>HTTP/3 优势</strong></p><ul><li><strong>基于 QUIC</strong>：UDP 协议实现可靠传输，解决 TCP 队头阻塞。</li><li><strong>0-RTT 握手</strong>：复用先前会话密钥，加速连接建立。</li></ul></li><li><p><strong>调试工具</strong></p><ul><li><strong>Chrome DevTools</strong>：分析网络请求、查看头部及性能瀑布图。</li><li><strong>Wireshark</strong>：抓包分析 TCP/UDP 流量，定位协议问题。</li></ul></li></ol><hr><h2 id="六、常见面试问题" tabindex="-1"><a class="header-anchor" href="#六、常见面试问题"><span><strong>六、常见面试问题</strong></span></a></h2><ol><li><p><strong>HTTP 与 HTTPS 区别</strong></p><ul><li>HTTP 明文传输，HTTPS 通过 SSL/TLS 加密。</li><li>HTTPS 默认端口 443，需 CA 证书，增加 CPU 开销（约 10-20%）。</li></ul></li><li><p><strong>TCP 三次握手与四次挥手</strong></p><ul><li><strong>握手</strong>：SYN → SYN-ACK → ACK（确认双方收发能力）。</li><li><strong>挥手</strong>：FIN → ACK → FIN → ACK（确保数据完整传输）。</li></ul></li><li><p><strong>队头阻塞问题</strong></p><ul><li><strong>HTTP/1.1</strong>：管道化请求需按序响应。</li><li><strong>HTTP/2</strong>：二进制帧乱序传输解决 HTTP 层阻塞，但 TCP 层丢包仍阻塞所有流。</li></ul></li></ol><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h2><p>HTTP 是 Web 通信的基石，需掌握其版本演进、核心方法、状态码及安全机制。面试中需结合场景（如性能优化、加密流程）展开论述，并关注最新技术（如 HTTP/3 的 QUIC 协议）。推荐阅读《图解 HTTP》及实际抓包分析以加深理解。</p>',20)]))}const g=o(s,[["render",i]]),T=JSON.parse('{"path":"/protocol/HTTP.html","title":"HTTP","lang":"zh-CN","frontmatter":{"title":"HTTP","description":"HTTP（Hypertext Transfer Protocol，超文本传输协议）","date":"2025-04-29T14:46:00.000Z","icon":"carbon:tcp-ip-service","tag":["HTTP"],"category":["protocol"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-29T14:46:00.000Z\\",\\"dateModified\\":\\"2025-05-03T03:29:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/protocol/HTTP.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"HTTP"}],["meta",{"property":"og:description","content":"HTTP（Hypertext Transfer Protocol，超文本传输协议）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-03T03:29:51.000Z"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:published_time","content":"2025-04-29T14:46:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-03T03:29:51.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1745911026000,"updatedTime":1746242991000,"contributors":[{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":2}]},"readingTime":{"minutes":3.58,"words":1074},"filePathRelative":"protocol/HTTP.md","localizedDate":"2025年4月29日","excerpt":"<h2><strong>一、HTTP 基础概念</strong></h2>\\n<ol>\\n<li>\\n<p><strong>定义与作用</strong><br>\\nHTTP（Hypertext Transfer Protocol，超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的<strong>应用层协议</strong>，基于 TCP/IP，默认端口为 80。其主要功能是定义客户端与服务器之间的通信格式，支持请求-响应模式，且无状态（依赖 Cookie 扩展状态管理）。</p>\\n</li>\\n<li>\\n<p><strong>核心特点</strong></p>\\n<ul>\\n<li><strong>无连接性</strong>（HTTP/1.0 后通过 Keep-Alive 支持长连接）</li>\\n<li><strong>无状态性</strong>（需借助 Session/Cookie 维护状态）</li>\\n<li><strong>明文传输</strong>（HTTPS 通过 SSL/TLS 加密）。</li>\\n</ul>\\n</li>\\n</ol>"}');export{g as comp,T as data};
