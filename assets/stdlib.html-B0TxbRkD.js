import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as l,o as a}from"./app-DIMvcjhy.js";const o={};function n(c,i){return a(),e("div",null,i[0]||(i[0]=[l(`<h2 id="stdio-h-头文件" tabindex="-1"><a class="header-anchor" href="#stdio-h-头文件"><span><code>stdio.h</code> 头文件</span></a></h2><h3 id="printf-函数" tabindex="-1"><a class="header-anchor" href="#printf-函数"><span><code>printf</code> 函数</span></a></h3><ul><li><strong>功能</strong>：将格式化的数据输出到标准输出设备（通常是显示器）。</li><li><strong>函数原型</strong>：<code>int printf(const char *format,...);</code></li><li><strong>格式化说明</strong>：<code>format</code>字符串中包含了普通字符和格式化说明符。常见的格式化说明符有<code>%d</code>用于输出十进制整数，<code>%f</code>用于输出浮点数，<code>%c</code>用于输出字符，<code>%s</code>用于输出字符串等。还可以指定字段宽度、精度等，如<code>%5d</code>表示输出的整数占5个字符宽度，<code>%.2f</code>表示输出的浮点数保留两位小数。</li></ul><h3 id="scanf-函数" tabindex="-1"><a class="header-anchor" href="#scanf-函数"><span><code>scanf</code> 函数</span></a></h3><ul><li><strong>功能</strong>：从标准输入设备（通常是键盘）读取格式化的数据，并将其存储到指定的变量中。</li><li><strong>函数原型</strong>：<code>int scanf(const char *format,...);</code></li><li><strong>格式化说明</strong>：与<code>printf</code>类似，<code>format</code>字符串中的格式化说明符用于指定输入数据的类型和格式。例如，<code>%d</code>用于读取十进制整数，<code>%f</code>用于读取浮点数，<code>%c</code>用于读取字符，<code>%s</code>用于读取字符串。在使用<code>scanf</code>时，要确保传入的参数是变量的地址，通过取地址符<code>&amp;</code>来获取变量的地址。</li></ul><p>以下是一个简单的示例代码：<br> 在这个示例中，先使用<code>scanf</code>从键盘读取用户输入的整数、浮点数和字符串，然后使用<code>printf</code>将这些数据输出到显示器上。注意<code>scanf</code>中格式化字符串的空格，它用于分隔不同类型的数据输入。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;请输入一个整数、一个浮点数和一个字符串：</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    scanf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> %f</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> %s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">num, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">f, str);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;你输入的整数是：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, num);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;你输入的浮点数是：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%.2f</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, f);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;你输入的字符串是：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, str);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stdlib-h-头文件" tabindex="-1"><a class="header-anchor" href="#stdlib-h-头文件"><span><code>stdlib.h</code> 头文件</span></a></h2><ul><li><code>abort()</code>：终止程序</li><li><code>atoi()</code>： 将字符串转换为整数</li><li><code>atof()</code>：将字符串转换为浮点数</li></ul><h3 id="malloc-函数" tabindex="-1"><a class="header-anchor" href="#malloc-函数"><span><code>malloc</code> 函数</span></a></h3><ul><li><strong>功能</strong>：在堆上分配指定大小的内存空间，并返回指向该内存空间的指针。</li><li><strong>函数原型</strong>：<code>void *malloc(size_t size);</code></li><li><strong>参数</strong>：<code>size</code>是要分配的内存空间的大小，以字节为单位。</li><li><strong>返回值</strong>：如果分配成功，返回一个指向分配内存空间的指针；如果分配失败，返回<code>NULL</code>。</li><li><strong>注意事项</strong>： <ul><li>使用<code>malloc</code>分配的内存空间需要手动释放，否则会导致内存泄漏。</li><li>分配的内存空间的初始值是不确定的，可能包含垃圾数据。</li><li><code>malloc</code>分配的内存空间是连续的，可能会导致内存碎片。</li><li><code>malloc</code>分配的内存空间的大小必须是有效的，不能为负数或零。</li><li><code>malloc</code>分配的内存空间的大小可能会受到系统的限制，例如堆的大小。</li><li><code>malloc</code>分配的内存空间的大小可能会受到编译器的优化，例如对齐。</li><li><code>malloc</code>分配的内存空间的大小可能会受到操作系统的限制，例如虚拟内存的大小。</li><li><code>malloc</code>分配的内存空间的大小可能会受到进程的限制，例如进程的可用内存。</li><li><code>malloc</code>分配的内存空间的大小可能会受到硬件的限制，例如内存的速度。</li><li><code>malloc</code>分配的内存空间的大小可能会受到进程的限制，例如进程的可用内存。</li></ul></li></ul><h3 id="calloc-函数" tabindex="-1"><a class="header-anchor" href="#calloc-函数"><span><code>calloc</code> 函数</span></a></h3><ul><li><strong>功能</strong>：在堆上分配指定大小的内存空间，并将其初始化为零。</li><li><strong>函数原型</strong>：<code>void *calloc(size_t num, size_t size);</code></li><li><strong>参数</strong>： <ul><li><code>num</code>是要分配的元素个数。</li><li><code>size</code>是每个元素的大小，以字节为单位。</li></ul></li><li><strong>返回值</strong>：如果分配成功，返回一个指向分配内存空间的指针；如果分配失败，返回<code>NULL</code>。</li><li><strong>注意事项</strong>： <ul><li>使用<code>calloc</code>分配的内存空间需要手动释放，否则会导致内存泄漏。</li><li><code>calloc</code>分配的内存空间的初始值是零。</li><li><code>calloc</code>分配的内存空间的大小是<code>num</code>乘以<code>size</code>。</li><li><code>calloc</code>分配的内存空间的大小可能会受到系统的限制，例如堆的大小。</li><li><code>calloc</code>分配的内存空间的大小可能会受到编译器的优化，例如对齐。</li><li><code>calloc</code>分配的内存空间的大小可能会受到操作系统的限制，例如虚拟内存的大小。</li><li><code>calloc</code>分配的内存空间的大小可能会受到进程的限制，例如进程的可用内存。</li><li><code>calloc</code>分配的内存空间的大小可能会受到硬件的限制，例如内存的速度。</li><li><code>calloc</code>分配的内存空间的大小可能会受到进程的限制，例如进程的可用内存。</li><li><code>calloc</code>分配的内存空间的大小可能会受到编译器的限制，例如编译器的优化。</li><li><code>calloc</code>分配的内存空间的大小可能会受到操作系统的限制，例如操作系统的内存管理。</li><li><code>calloc</code>分配的内存空间的大小可能会受到硬件的限制，例如硬件的内存管理。</li><li><code>calloc</code>分配的内存空间的初始值是零。</li></ul></li></ul><h3 id="realloc-函数" tabindex="-1"><a class="header-anchor" href="#realloc-函数"><span><code>realloc</code> 函数</span></a></h3><ul><li><strong>功能</strong>：重新分配已分配的内存空间的大小。</li><li><strong>函数原型</strong>：<code>void *realloc(void *ptr, size_t size);</code></li><li><strong>参数</strong>： <ul><li><code>ptr</code>是指向已分配内存空间的指针。</li><li><code>size</code>是重新分配后的内存空间的大小，以字节为单位。</li></ul></li><li><strong>返回值</strong>：如果重新分配成功，返回一个指向重新分配内存空间的指针；如果重新分配失败，返回<code>NULL</code>。</li><li><strong>注意事项</strong>： <ul><li>使用<code>realloc</code>重新分配的内存空间需要手动释放，否则会导致内存泄漏。</li><li><code>realloc</code>重新分配的内存空间的大小可能会受到系统的限制，例如堆的大小。</li><li><code>realloc</code>重新分配的内存空间的大小可能会受到编译器的优化，例如对齐。</li><li><code>realloc</code>重新分配的内存空间的大小可能会受到操作系统的限制，例如虚拟内存的大小。</li><li><code>realloc</code>重新分配的内存空间的大小可能会受到进程的限制，例如进程的可用内存。</li><li><code>realloc</code>重新分配的内存空间的大小可能会受到硬件的限制，例如内存的速度。</li><li><code>realloc</code>重新分配的内存空间的大小可能会受到进程的限制，例如进程的可用内存。</li><li><code>realloc</code>重新分配的内存空间的大小可能会受到编译器的限制，例如编译器的优化。</li><li><code>realloc</code>重新分配的内存空间的大小可能会受到操作系统的限制，例如操作系统的内存管理。</li><li><code>realloc</code>重新分配的内存空间的大小可能会受到硬件的限制，例如硬件的内存管理。</li><li><code>realloc</code>重新分配的内存空间的初始值是不确定的，可能包含垃圾数据。</li></ul></li></ul><h3 id="free-函数" tabindex="-1"><a class="header-anchor" href="#free-函数"><span><code>free</code> 函数</span></a></h3><ul><li><strong>功能</strong>：释放之前通过<code>malloc</code>、<code>calloc</code>或<code>realloc</code>分配的内存空间。</li><li><strong>函数原型</strong>：<code>void free(void *ptr);</code></li><li><strong>参数</strong>：<code>ptr</code>是指向要释放的内存空间的指针。</li><li><strong>注意事项</strong>： <ul><li>使用<code>free</code>释放的内存空间必须是通过<code>malloc</code>、<code>calloc</code>或<code>realloc</code>分配的，否则会导致未定义行为。</li><li>使用<code>free</code>释放的内存空间必须是之前分配的内存空间，不能是栈上的变量或全局变量。</li><li>使用<code>free</code>释放的内存空间必须是连续的，不能是分散的。</li><li>使用<code>free</code>释放的内存空间必须是之前分配的内存空间，不能是之前分配的内存空间的一部分。</li></ul></li></ul><h2 id="math-h-头文件" tabindex="-1"><a class="header-anchor" href="#math-h-头文件"><span><code>math.h</code> 头文件</span></a></h2><ul><li><code>sqrt</code> 函数</li><li><code>abs</code> 函数</li><li><code>sin</code> 函数</li></ul><h2 id="stdbool-h-头文件" tabindex="-1"><a class="header-anchor" href="#stdbool-h-头文件"><span><code>stdbool.h</code> 头文件</span></a></h2><ul><li>C 语言的布尔类型(true 与 false)</li></ul><blockquote><p><a href="https://www.runoob.com/w3cnote/c-bool-true-false.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/w3cnote/c-bool-true-false.html</a></p></blockquote><h2 id="string-h-头文件" tabindex="-1"><a class="header-anchor" href="#string-h-头文件"><span><code>string.h</code> 头文件</span></a></h2><ul><li><code>memset</code> 函数</li></ul>`,24)]))}const r=s(o,[["render",n]]),h=JSON.parse('{"path":"/C/stdlib.html","title":"stdlib","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"stdlib","description":"标准库","icon":"logos:stdlib","tag":["stdlib"],"category":["C"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"stdlib\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-25T01:18:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/C/stdlib.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"stdlib"}],["meta",{"property":"og:description","content":"标准库"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-25T01:18:33.000Z"}],["meta",{"property":"article:tag","content":"stdlib"}],["meta",{"property":"article:modified_time","content":"2025-05-25T01:18:33.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1744814343000,"updatedTime":1748135913000,"contributors":[{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":3}]},"readingTime":{"minutes":6.59,"words":1978},"filePathRelative":"C/stdlib.md","localizedDate":"2025年4月16日","excerpt":"<h2><code>stdio.h</code> 头文件</h2>\\n<h3><code>printf</code> 函数</h3>\\n<ul>\\n<li><strong>功能</strong>：将格式化的数据输出到标准输出设备（通常是显示器）。</li>\\n<li><strong>函数原型</strong>：<code>int printf(const char *format,...);</code></li>\\n<li><strong>格式化说明</strong>：<code>format</code>字符串中包含了普通字符和格式化说明符。常见的格式化说明符有<code>%d</code>用于输出十进制整数，<code>%f</code>用于输出浮点数，<code>%c</code>用于输出字符，<code>%s</code>用于输出字符串等。还可以指定字段宽度、精度等，如<code>%5d</code>表示输出的整数占5个字符宽度，<code>%.2f</code>表示输出的浮点数保留两位小数。</li>\\n</ul>"}');export{r as comp,h as data};
