import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as e,a as r,b as n,w as s,r as o,o as p,e as h}from"./app-DIMvcjhy.js";const d="/assets/SPI_select-cjDu3rwo.png",c="/assets/SPI_send_recv-CM4eG5c_.png",S="/assets/SPI_mode_table-2X6g4Bew.png",P="/assets/SPI_mode_waveform01-DgyUW2U7.png",C="/assets/SPI_mode_waveform02-B9a4YbhU.png",I="/assets/SPI_protocol-DajxFjAz.png",g={};function u(b,a){const i=o("RouteLink");return p(),t("div",null,[a[1]||(a[1]=e('<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><div class="hint-container tip"><p class="hint-container-title">SPI（Serial Peripheral Interface，串行外设接口）</p><p>SPI 是英语Serial Peripheral interface的缩写，顾名思义就是串行外围设备接口。是Motorola(摩托罗拉)首先在其MC68HCXX系列处理器上定义的。</p><p>SPI，是一种高速的，全双工，同步的通信总线，并且在芯片的管脚上只占用四根线，节约了芯片的管脚，同时为PCB的布局上节省空间，提供方便，主要应用在 EEPROM，FLASH，实时时钟，AD转换器，还有数字信号处理器和数字信号解码器之间。</p><p>SPI（Serial Peripheral Interface）是一种串行通信协议，用于连接微控制器（MCU）与外部设备，如传感器、存储器、显示器等。</p><p>SPI分为主、从两种模式，一个SPI通讯系统需要包含一个（且只能是一个）主设备，一个或多个从设备。提供时钟的为主设备（Master），接收时钟的设备为从设备（Slave），SPI接口的读写操作，都是由主设备发起。当存在多个从设备时，通过各自的片选信号进行管理。</p><p>SPI是全双工且SPI没有定义速度限制，一般的实现通常能达到甚至超过10 Mbps</p></div><h2 id="硬件电路设计" tabindex="-1"><a class="header-anchor" href="#硬件电路设计"><span>硬件电路设计</span></a></h2>',3)),r("p",null,[n(i,{to:"/hardware/SPI%E6%8E%A5%E5%8F%A3.html"},{default:s(()=>a[0]||(a[0]=[h("参考硬件部分")])),_:1})]),a[2]||(a[2]=e('<h2 id="软件时序设计" tabindex="-1"><a class="header-anchor" href="#软件时序设计"><span>软件时序设计</span></a></h2><h3 id="spi设备选择" tabindex="-1"><a class="header-anchor" href="#spi设备选择"><span>SPI设备选择</span></a></h3><p>SPI是［单主设备（ single-master ）］通信协议，这意味着总线中的只有一支中心设备能发起通信。当SPI主设备想读/写［从设备］时，它首先拉低［从设备］对应的SS线（SS是低电平有效），接着开始发送工作脉冲到时钟线上，在相应的脉冲时间上，［主设备］把信号发到MOSI实现“写”，同时可对MISO采样而实现“读”，如下图：</p><figure><img src="'+d+'" alt="SPI设备选择" tabindex="0" loading="lazy"><figcaption>SPI设备选择</figcaption></figure><h3 id="spi数据发送接收" tabindex="-1"><a class="header-anchor" href="#spi数据发送接收"><span>SPI数据发送接收</span></a></h3><p>SPI主机和从机都有一个串行移位寄存器，主机通过向它的SPI串行寄存器写入一个字节来发起一次传输。</p><ol><li>首先拉低对应SS信号线，表示与该设备进行通信</li><li>主机通过发送SCLK时钟信号，来告诉从机写数据或者读数据<br> 这里要注意，SCLK时钟信号可能是低电平有效，也可能是高电平有效，因为SPI有四种模式，这个我们在下面会介绍</li><li>主机(Master)将要发送的数据写到发送数据缓存区(Menory)，缓存区经过移位寄存器(0~7)，串行移位寄存器通过MOSI信号线将字节一位一位的移出去传送给从机，，同时MISO接口接收到的数据经过移位寄存器一位一位的移到接收缓存区。</li><li>从机(Slave)也将自己的串行移位寄存器(0~7)中的内容通过MISO信号线返回给主机。同时通过MOSI信号线接收主机发送的数据，这样，两个移位寄存器中的内容就被交换。</li></ol><figure><img src="'+c+'" alt="SPI数据发送接收" tabindex="0" loading="lazy"><figcaption>SPI数据发送接收</figcaption></figure><p>SPI只有主模式和从模式之分，没有读和写的说法，外设的写操作和读操作是同步完成的。如果只进行写操作，主机只需忽略接收到的字节；反之，若主机要读取从机的一个字节，就必须发送一个空字节来引发从机的传输。也就是说，你发一个数据必然会收到一个数据；你要收一个数据必须也要先发一个数据。</p><h3 id="spi通信的四种模式" tabindex="-1"><a class="header-anchor" href="#spi通信的四种模式"><span>SPI通信的四种模式</span></a></h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>SPI的极性Polarity和相位Phase，最常见的写法是CPOL和CPHA，不过也有一些其他写法，简单总结如下：</p><p>(1) CKPOL (Clock Polarity) = CPOL = POL = Polarity = （时钟）极性<br> (2) CKPHA (Clock Phase) = CPHA = PHA = Phase = （时钟）相位<br> (3) SCK=SCLK=SPI的时钟<br> (4) Edge=边沿，即时钟电平变化的时刻，即上升沿(rising edge)或者下降沿(falling edge)</p><p>对于一个时钟周期内，有两个edge，分别称为：</p><p>(1)Leading edge=前一个边沿=第一个边沿，对于开始电压是1，<br> 那么就是1变成0的时候，对于开始电压是0，那么就是0变成1的时候；</p><p>(2)Trailing edge=后一个边沿=第二个边沿，对于开始电压是1，<br> 那么就是0变成1的时候（即在第一次1变成0之后，才可能有后面的0变成1），<br> 对于开始电压是0，那么就是1变成0的时候；</p></div><blockquote><p>SPI的四种模式，简单地讲就是设置SCLK时钟信号线的那种信号为有效信号</p></blockquote><p>SPI通信有4种不同的操作模式，不同的从设备可能在出厂是就是配置为某种模式，这是不能改变的；但我们的通信双方必须是工作在同一模式下，所以我们可以对我们的主设备的SPI模式进行配置，通过CPOL（时钟极性）和CPHA（时钟相位）来<br> 控制我们主设备的通信模式，具体如下：</p><p>时钟极性<code>CPOL</code>(Clock Polarity)定义了时钟空闲状态电平：</p><ul><li><code>CPOL=0</code>，表示当SCLK=0时处于空闲态，所以有效状态就是SCLK处于高电平时</li><li><code>CPOL=1</code>，表示当SCLK=1时处于空闲态，所以有效状态就是SCLK处于低电平时</li></ul><p>时钟相位<code>CPHA</code>(Clock Phase)定义数据的采集时间。</p><ul><li><code>CPHA=0</code>，在时钟的第一个跳变沿（上升沿或下降沿）进行数据采样。，在第2个边沿发送数据</li><li><code>CPHA=1</code>，在时钟的第二个跳变沿（上升沿或下降沿）进行数据采样。，在第1个边沿发送数据</li></ul><p>例如：</p><ul><li><p><code>Mode0：CPOL=0，CPHA=0</code>：此时空闲态时，SCLK处于低电平，数据采样是在第1个边沿，也就是SCLK由低电平到高电平的跳变，所以数据采样是在上升沿(准备数据），（发送数据）数据发送是在下降沿。</p></li><li><p><code>Mode1：CPOL=0，CPHA=1</code>：此时空闲态时，SCLK处于低电平，数据发送是在第1个边沿，也就是SCLK由低电平到高电平的跳变，所以数据采样是在下降沿，数据发送是在上升沿。</p></li><li><p><code>Mode2：CPOL=1，CPHA=0</code>：此时空闲态时，SCLK处于高电平，数据采集是在第1个边沿，也就是SCLK由高电平到低电平的跳变，所以数据采集是在下降沿，数据发送是在上升沿。</p></li><li><p><code>Mode3：CPOL=1，CPHA=1</code>：此时空闲态时，SCLK处于高电平，数据发送是在第1个边沿，也就是SCLK由高电平到低电平的跳变，所以数据采集是在上升沿，数据发送是在下降沿。</p></li></ul><p><img src="'+S+'" alt="SPI四种模式" loading="lazy"><br><img src="'+P+'" alt="SPI四种模式" loading="lazy"><br><img src="'+C+'" alt="SPI四种模式" loading="lazy"></p><p>它们的区别是定义了在时钟脉冲的哪条边沿转换（toggles）输出信号，哪条边沿采样输入信号，还有时钟脉冲的稳定电平值（就是时钟信号无效时是高还是低）。每种模式由一对参数刻画，它们称为时钟极（clock polarity）CPOL与时钟期（clock phase）CPHA。</p><h3 id="spi的通信协议" tabindex="-1"><a class="header-anchor" href="#spi的通信协议"><span>SPI的通信协议</span></a></h3><figure><img src="'+I+'" alt="SPI通信协议" tabindex="0" loading="lazy"><figcaption>SPI通信协议</figcaption></figure><p>主从设备必须使用相同的工作模式——SCLK、CPOL 和 CPHA，才能正常工作。如果有多个从设备，并且它们使用了不同的工作模式，那么主设备必须在读写不同从设备时需要重新修改对应从设备的模式。以上SPI总线协议的主要内容。</p><p>是不是感觉，这就完了？ SPI就是如此，他没有规定最大传输速率，没有地址方案，也没规定通信应答机制，没有规定流控制规则。</p><p>只要四根信号线连接正确，SPI模式相同，将CS/SS信号线拉低，即可以直接通信，一次一个字节的传输，读写数据同时操作，这就是SPI</p><p>些通信控制都得通过SPI设备自行实现，SPI并不关心物理接口的电气特性，例如信号的标准电压。</p><p>PS:<br> 这也是SPI接口的一个缺点：没有指定的流控制，没有应答机制确认是否接收到数据。</p><p>SPI的三种模式<br> SPI工作在3中模式下，分别是运行、等待和停止。</p><p>运行模式（Run Mode）<br> 这是基本的操作模式</p><p>等待模式（Wait Mode）<br> SPI工作在等待模式是一种可配置的低功耗模式，可以通过SPICR2寄存器的SPISWAI位进行控制。在等待模式下，如果SPISWAI位清0，SPI操作类似于运行模式。如果SPISWAI位置1，SPI进入低功耗状态，并且SPI时钟将关闭。如果SPI配置为主机，所有的传输将停止，但是会在CPU进入运行模式后重新开始。如果SPI配置为从机，会继续接收和传输一个字节，这样就保证从机与主机同步。</p><p>停止模式（Stop Mode）<br> 为了降低功耗，SPI在停止模式是不活跃的。如果SPI配置为主机，正在进行的传输会停止，但是在CPU进入运行模式后会重新开始。如果SPI配置为从机，会继续接受和发送一个字节，这样就保证了从机与主机同步。</p><h2 id="配置步骤" tabindex="-1"><a class="header-anchor" href="#配置步骤"><span>配置步骤</span></a></h2><h3 id="_1-主从模式" tabindex="-1"><a class="header-anchor" href="#_1-主从模式"><span>1. 主从模式</span></a></h3><h4 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h4><ul><li>主设备（Master）控制时钟信号（SCLK），并发起通信。</li><li>从设备（Slave）响应主设备的请求。</li></ul><h4 id="详细说明" tabindex="-1"><a class="header-anchor" href="#详细说明"><span>详细说明</span></a></h4><ul><li><strong>主模式（Master）</strong>：设备生成时钟信号（SCK），并控制通信的启动。</li><li><strong>从模式（Slave）</strong>：依赖主设备的时钟信号，被动响应主设备的指令。</li><li><strong>配置方法</strong>：需在控制器中设置为主或从模式（通常主设备为微控制器）。</li></ul><hr><h3 id="_2-时钟速率-clock-rate" tabindex="-1"><a class="header-anchor" href="#_2-时钟速率-clock-rate"><span>2. 时钟速率（Clock Rate）</span></a></h3><h4 id="描述-1" tabindex="-1"><a class="header-anchor" href="#描述-1"><span>描述~</span></a></h4><p>主设备需设置 SCK 的频率，需符合从设备支持的最大速率。</p><h4 id="配置注意事项" tabindex="-1"><a class="header-anchor" href="#配置注意事项"><span>配置注意事项</span></a></h4><ul><li>必须确保主从设备之间兼容。</li><li>过高速率可能导致通信错误，需参考外设数据手册。</li><li><strong>配置方法</strong>：通过时钟分频系数调整（如 ARM Cortex-M 的 <code>SPI_CR1.BR</code>）。</li></ul><hr><h3 id="_3-数据位数-data-bits-数据位宽-data-size" tabindex="-1"><a class="header-anchor" href="#_3-数据位数-data-bits-数据位宽-data-size"><span>3. 数据位数（Data Bits） / 数据位宽（Data Size）</span></a></h3><h4 id="描述-2" tabindex="-1"><a class="header-anchor" href="#描述-2"><span>描述</span></a></h4><p>定义每次传输的数据位数，常见为 8 位，但也支持 4/16/32 位等。</p><h4 id="常见应用" tabindex="-1"><a class="header-anchor" href="#常见应用"><span>常见应用</span></a></h4><ul><li>8 位是最常用的数据位宽。</li><li>某些设备可能需要 16 位或更长的位宽。</li></ul><h4 id="配置方法" tabindex="-1"><a class="header-anchor" href="#配置方法"><span>配置方法</span></a></h4><ul><li>设置寄存器（如 <code>SPI_CR1.DFF</code>）。</li></ul><hr><h3 id="_4-时钟极性-cpol-clock-polarity" tabindex="-1"><a class="header-anchor" href="#_4-时钟极性-cpol-clock-polarity"><span>4. 时钟极性（CPOL, Clock Polarity）</span></a></h3><h4 id="功能" tabindex="-1"><a class="header-anchor" href="#功能"><span>功能</span></a></h4><p>定义时钟信号的空闲状态：</p><ul><li><strong>CPOL=0</strong>：时钟空闲时为低电平。</li><li><strong>CPOL=1</strong>：时钟空闲时为高电平。</li></ul><hr><h3 id="_5-时钟相位-cpha-clock-phase" tabindex="-1"><a class="header-anchor" href="#_5-时钟相位-cpha-clock-phase"><span>5. 时钟相位（CPHA, Clock Phase）</span></a></h3><h4 id="功能-1" tabindex="-1"><a class="header-anchor" href="#功能-1"><span>功能</span></a></h4><p>决定数据采样时刻：</p><ul><li><strong>CPHA=0</strong>：数据在时钟的第一个边沿采样。</li><li><strong>CPHA=1</strong>：数据在时钟的第二个边沿采样。</li></ul><hr><h3 id="_6-数据传输顺序-bit-order" tabindex="-1"><a class="header-anchor" href="#_6-数据传输顺序-bit-order"><span>6. 数据传输顺序（Bit Order）</span></a></h3><h4 id="支持两种方式" tabindex="-1"><a class="header-anchor" href="#支持两种方式"><span>支持两种方式</span></a></h4><ul><li><strong>MSB First（高位先传）</strong>：最常见，默认方式。</li><li><strong>LSB First（低位先传）</strong>：某些 AD/DA 芯片要求此方式。</li></ul><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项~</span></a></h4><ul><li>主从设备必须保持一致。</li></ul><hr><h3 id="_7-片选信号-chip-select-cs" tabindex="-1"><a class="header-anchor" href="#_7-片选信号-chip-select-cs"><span>7. 片选信号（Chip Select, CS）</span></a></h3><h4 id="功能-2" tabindex="-1"><a class="header-anchor" href="#功能-2"><span>功能</span></a></h4><p>控制从设备的激活与去激活。通常通过拉低 CS 引脚激活从设备。</p><h4 id="配置方式" tabindex="-1"><a class="header-anchor" href="#配置方式"><span>配置方式</span></a></h4><ul><li><strong>硬件片选（Hardware NSS）</strong>： <ul><li>SPI 控制器自动控制片选引脚。</li><li>缺点：只能连接一个从机。</li><li>片选脚为固定引脚。</li></ul></li><li><strong>软件片选（Software NSS）</strong>： <ul><li>手动控制 GPIO 引脚拉高/拉低。</li><li>优点：可连接多个从机。</li><li>可自定义任意引脚作为 CS。</li></ul></li></ul><h4 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h4><h5 id="nss-控制方式" tabindex="-1"><a class="header-anchor" href="#nss-控制方式"><span>NSS 控制方式</span></a></h5><ul><li><strong>SPI_NSS_Hard</strong>： <ul><li>自动控制 CS，发送数据时自动拉低，空闲时拉高。</li></ul></li><li><strong>SPI_NSS_Soft</strong>： <ul><li>通过 IO 口手动控制 CS，适用于多从机系统。</li></ul></li></ul><hr><h3 id="_8-其他配置" tabindex="-1"><a class="header-anchor" href="#_8-其他配置"><span>8. 其他配置</span></a></h3><h4 id="支持选项包括" tabindex="-1"><a class="header-anchor" href="#支持选项包括"><span>支持选项包括</span></a></h4><ul><li><strong>全双工/半双工</strong>： <ul><li>大多数 SPI 为全双工（同时收发）；</li><li>某些设备可能仅支持半双工。</li></ul></li><li><strong>中断/DMA</strong>： <ul><li>是否启用中断或 DMA 传输以提高效率。</li></ul></li><li><strong>CRC 校验</strong>： <ul><li>部分安全通信场景下启用 CRC 校验功能。</li></ul></li></ul><hr><h3 id="_9-通信模式-mode-0-3" tabindex="-1"><a class="header-anchor" href="#_9-通信模式-mode-0-3"><span>9. 通信模式（Mode 0~3）</span></a></h3><h4 id="决定因素" tabindex="-1"><a class="header-anchor" href="#决定因素"><span>决定因素</span></a></h4><p>由 CPOL 和 CPHA 组合决定 SPI 的通信模式：</p><table><thead><tr><th>模式</th><th>CPOL</th><th>CPHA</th></tr></thead><tbody><tr><td>Mode 0</td><td>0</td><td>0</td></tr><tr><td>Mode 1</td><td>0</td><td>1</td></tr><tr><td>Mode 2</td><td>1</td><td>0</td></tr><tr><td>Mode 3</td><td>1</td><td>1</td></tr></tbody></table><h4 id="常见使用" tabindex="-1"><a class="header-anchor" href="#常见使用"><span>常见使用</span></a></h4><ul><li><strong>Mode 0</strong>：CPOL=0，CPHA=0</li><li><strong>Mode 3</strong>：CPOL=1，CPHA=1（最常用）</li></ul><h4 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1"><span>注意事项</span></a></h4><ul><li>主从设备的通信模式必须严格匹配！</li></ul><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><h3 id="控制数据开始传输" tabindex="-1"><a class="header-anchor" href="#控制数据开始传输"><span>控制数据开始传输</span></a></h3><ol><li>片选信号（CS/SS）触发传输 <ul><li>作用：主设备通过拉低从设备的片选引脚（CS/SS），通知从设备准备接收或发送数据。</li><li>关键行为： <ul><li>主设备在传输开始前拉低目标从设备的CS引脚（电平有效，通常低电平）。</li><li>传输结束后，主设备拉高CS引脚，结束通信。</li></ul></li></ul></li><li>主设备生成时钟（SCLK） <ul><li>时钟启动：主设备在拉低CS后，主动产生时钟信号（SCLK），驱动数据传输。时钟极性（CPOL）和相位（CPHA）决定了数据采样边沿（需与从设备匹配）。</li><li>数据同步： <ul><li>主设备通过SCLK的边沿（上升沿或下降沿）同步数据位。</li><li>数据从主设备（MOSI）输出到从设备，同时从设备数据（MISO）返回主设备（全双工）。</li></ul></li></ul></li><li>数据寄存器写入触发传输 <ul><li>硬件级启动：主设备的SPI控制器通过写入**数据寄存器（DR）**自动启动传输。写入数据到DR寄存器后，硬件自动将数据移出到MOSI线，同时接收MISO数据。</li><li>状态标志： <ul><li>TXE（发送缓冲区空）：表示可以写入新数据。</li><li>RXNE（接收缓冲区非空）：表示收到数据可读取。</li></ul></li></ul></li></ol><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://blog.csdn.net/as480133937/article/details/105764119" target="_blank" rel="noopener noreferrer">SPI原理超详细讲解---值得一看</a></li><li><a href="https://blog.csdn.net/win2000_li/article/details/100053217" target="_blank" rel="noopener noreferrer">SPI中的CPHA,CPOL详解</a></li><li><a href="https://www.cnblogs.com/shangdawei/p/4752476.html" target="_blank" rel="noopener noreferrer">SPI中的极性CPOL和相位CPHA</a></li></ul>',95))])}const _=l(g,[["render",u]]),x=JSON.parse('{"path":"/protocol/SPI%E9%80%9A%E4%BF%A1.html","title":"SPI通信","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"SPI通信","description":"SPI通信","icon":"uil:circuit","tag":["SPI"],"category":["protocol"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SPI通信\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-29T07:17:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/protocol/SPI%E9%80%9A%E4%BF%A1.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"SPI通信"}],["meta",{"property":"og:description","content":"SPI通信"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T07:17:06.000Z"}],["meta",{"property":"article:tag","content":"SPI"}],["meta",{"property":"article:modified_time","content":"2025-04-29T07:17:06.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1744787494000,"updatedTime":1745911026000,"contributors":[{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":2}]},"readingTime":{"minutes":11.69,"words":3506},"filePathRelative":"protocol/SPI通信.md","localizedDate":"2025年4月16日","excerpt":"<h2>定义</h2>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">SPI（Serial Peripheral Interface，串行外设接口）</p>\\n<p>SPI 是英语Serial Peripheral interface的缩写，顾名思义就是串行外围设备接口。是Motorola(摩托罗拉)首先在其MC68HCXX系列处理器上定义的。</p>\\n<p>SPI，是一种高速的，全双工，同步的通信总线，并且在芯片的管脚上只占用四根线，节约了芯片的管脚，同时为PCB的布局上节省空间，提供方便，主要应用在 EEPROM，FLASH，实时时钟，AD转换器，还有数字信号处理器和数字信号解码器之间。</p>\\n<p>SPI（Serial Peripheral Interface）是一种串行通信协议，用于连接微控制器（MCU）与外部设备，如传感器、存储器、显示器等。</p>\\n<p>SPI分为主、从两种模式，一个SPI通讯系统需要包含一个（且只能是一个）主设备，一个或多个从设备。提供时钟的为主设备（Master），接收时钟的设备为从设备（Slave），SPI接口的读写操作，都是由主设备发起。当存在多个从设备时，通过各自的片选信号进行管理。</p>\\n<p>SPI是全双工且SPI没有定义速度限制，一般的实现通常能达到甚至超过10 Mbps</p>\\n</div>"}');export{_ as comp,x as data};
