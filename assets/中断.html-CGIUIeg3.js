import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as e,o as a}from"./app-DIMvcjhy.js";const n={};function l(h,i){return a(),s("div",null,i[0]||(i[0]=[e(`<h2 id="关中断" tabindex="-1"><a class="header-anchor" href="#关中断"><span>关中断</span></a></h2><h3 id="本质" tabindex="-1"><a class="header-anchor" href="#本质"><span>本质</span></a></h3><p>操作：通过指令（如ARM的<code>CPSID I</code>或<code>__disable_irq()</code>）关闭全局中断响应（禁止CPU响应新的中断）。</p><p>目的：保护临界区代码（如共享资源操作）不被中断打断，确保原子性。</p><h3 id="关中断期间的中断处理机制" tabindex="-1"><a class="header-anchor" href="#关中断期间的中断处理机制"><span>关中断期间的中断处理机制</span></a></h3><table><thead><tr><th>中断类型</th><th>关中断期间的行为</th><th>数据是否可能丢失</th></tr></thead><tbody><tr><td>电平触发中断</td><td>中断信号持续存在,中断标志保持有效;开中断后立即触发中断服务程序(ISR)。</td><td>否(ISR会在开中断后执行)</td></tr><tr><td>边沿触发中断</td><td>中断信号仅在边沿瞬间触发一次;若关中断时边沿已发生但未处理,中断标志可能被硬件保留。</td><td>否(ISR在开中断后执行,但多次边沿可能合并)</td></tr><tr><td>外设数据中断</td><td>外设数据可能继续接收(如UART的FIFO缓冲),但中断标志会被挂起;开中断后处理缓冲数据。</td><td>可能(若缓冲区溢出且无保护机制)</td></tr><tr><td>定时器中断</td><td>计数器继续运行,中断标志会被挂起;开中断后根据当前计数值处理。</td><td>否(中断标志保留,但可能丢失多次计数)</td></tr></tbody></table><h3 id="关键硬件行为" tabindex="-1"><a class="header-anchor" href="#关键硬件行为"><span>关键硬件行为</span></a></h3><ol><li>中断标志（Pending Flag）<br> 作用：记录中断请求是否发生（即使中断被禁用）。</li></ol><p>行为：<br> 若中断被禁用（关中断），中断标志会被硬件置位并保持，直到中断使能后触发ISR。</p><p>部分外设（如UART）会在读取数据后自动清除中断标志，未及时处理可能导致数据覆盖。</p><ol start="2"><li>外设缓冲区</li></ol><p>FIFO缓冲：部分外设（如SPI、UART）内置硬件缓冲区，可在关中断期间暂存数据。</p><p>溢出风险：若缓冲区满且无保护机制，新数据可能被丢弃，导致数据丢失。</p><h3 id="数据丢失的风险场景" tabindex="-1"><a class="header-anchor" href="#数据丢失的风险场景"><span>数据丢失的风险场景</span></a></h3><table><thead><tr><th>场景</th><th>风险原因</th><th>解决方案</th></tr></thead><tbody><tr><td>高频率中断+长关中断时间</td><td>关中断期间多次中断触发,中断标志可能被覆盖(仅记录最后一次)。</td><td>优化临界区代码,缩短关中断时间。</td></tr><tr><td>外设缓冲区过小</td><td>关中断期间外设接收数据超出缓冲区容量,导致数据溢出。</td><td>增大缓冲区或使用DMA传输。</td></tr><tr><td>中断标志未及时清除</td><td>关中断期间中断标志被置位,但开中断后未及时处理,导致后续中断误触发。</td><td>在ISR中及时清除中断标志。</td></tr></tbody></table><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><ol><li>最小化关中断时间<br> 仅对必须原子操作的代码段关中断，避免长时间禁用中断。</li></ol><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">__disable_irq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 关中断</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 仅操作共享变量或硬件寄存器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">__enable_irq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 开中断</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用外设硬件缓冲或DMA<br> 利用外设的FIFO或DMA通道减少中断频率，降低关中断期间数据丢失风险。</li></ol><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HAL_UART_Receive_DMA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">huart1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> BUFFER_SIZE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>中断标志管理<br> 在ISR中及时清除中断标志，避免重复触发。</li></ol><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> EXTI0_IRQHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">__HAL_GPIO_EXTI_GET_IT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GPIO_PIN_0) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RESET) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    __HAL_GPIO_EXTI_CLEAR_IT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GPIO_PIN_0);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 清除中断标志</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 处理中断</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>优先级与嵌套中断<br> 配置关键中断为更高优先级，确保其即使在关中断期间也能抢占（若支持嵌套中断）。</li></ol><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">NVIC_SetPriority</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">SysTick_IRQn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 最高优先级</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,24)]))}const p=t(n,[["render",l]]),k=JSON.parse('{"path":"/advance/%E4%B8%AD%E6%96%AD.html","title":"中断","lang":"zh-CN","frontmatter":{"title":"中断","icon":"icon-park:link-interrupt","tag":["中断"],"category":["MCU"],"description":"关中断 本质 操作：通过指令（如ARM的CPSID I或__disable_irq()）关闭全局中断响应（禁止CPU响应新的中断）。 目的：保护临界区代码（如共享资源操作）不被中断打断，确保原子性。 关中断期间的中断处理机制 关键硬件行为 中断标志（Pending Flag） 作用：记录中断请求是否发生（即使中断被禁用）。 行为： 若中断被禁用（关中断...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中断\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-15T09:58:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/advance/%E4%B8%AD%E6%96%AD.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"中断"}],["meta",{"property":"og:description","content":"关中断 本质 操作：通过指令（如ARM的CPSID I或__disable_irq()）关闭全局中断响应（禁止CPU响应新的中断）。 目的：保护临界区代码（如共享资源操作）不被中断打断，确保原子性。 关中断期间的中断处理机制 关键硬件行为 中断标志（Pending Flag） 作用：记录中断请求是否发生（即使中断被禁用）。 行为： 若中断被禁用（关中断..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-15T09:58:18.000Z"}],["meta",{"property":"article:tag","content":"中断"}],["meta",{"property":"article:modified_time","content":"2025-04-15T09:58:18.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1744711098000,"updatedTime":1744711098000,"contributors":[{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":1}]},"readingTime":{"minutes":2.84,"words":853},"filePathRelative":"advance/中断.md","localizedDate":"2025年4月15日","excerpt":"<h2>关中断</h2>\\n<h3>本质</h3>\\n<p>操作：通过指令（如ARM的<code>CPSID I</code>或<code>__disable_irq()</code>）关闭全局中断响应（禁止CPU响应新的中断）。</p>\\n<p>目的：保护临界区代码（如共享资源操作）不被中断打断，确保原子性。</p>\\n<h3>关中断期间的中断处理机制</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>中断类型</th>\\n<th>关中断期间的行为</th>\\n<th>数据是否可能丢失</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>电平触发中断</td>\\n<td>中断信号持续存在,中断标志保持有效;开中断后立即触发中断服务程序(ISR)。</td>\\n<td>否(ISR会在开中断后执行)</td>\\n</tr>\\n<tr>\\n<td>边沿触发中断</td>\\n<td>中断信号仅在边沿瞬间触发一次;若关中断时边沿已发生但未处理,中断标志可能被硬件保留。</td>\\n<td>否(ISR在开中断后执行,但多次边沿可能合并)</td>\\n</tr>\\n<tr>\\n<td>外设数据中断</td>\\n<td>外设数据可能继续接收(如UART的FIFO缓冲),但中断标志会被挂起;开中断后处理缓冲数据。</td>\\n<td>可能(若缓冲区溢出且无保护机制)</td>\\n</tr>\\n<tr>\\n<td>定时器中断</td>\\n<td>计数器继续运行,中断标志会被挂起;开中断后根据当前计数值处理。</td>\\n<td>否(中断标志保留,但可能丢失多次计数)</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{p as comp,k as data};
