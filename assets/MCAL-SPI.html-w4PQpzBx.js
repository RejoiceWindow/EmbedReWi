import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as n,o as p}from"./app-DIMvcjhy.js";const s="/assets/relationship-C1wtBC5W.png",t={};function r(h,e){return p(),i("div",null,e[0]||(e[0]=[n(`<div class="hint-container info"><p class="hint-container-title">相关信息</p><p>SPI（Serial Peripheral Interface） 提供对 SPI 总线的访问接口，用于与 SPI 设备通信。</p></div><h2 id="主要功能" tabindex="-1"><a class="header-anchor" href="#主要功能"><span>主要功能</span></a></h2><p>初始化：配置和初始化 SPI 控制器。<br> 数据传输：提供同步和异步的数据传输功能。<br> 配置管理：管理 SPI 总线的配置，包括主/从模式、时钟极性和相位、数据帧格式等。<br> 中断处理：处理 SPI 通信过程中产生的中断。</p><h2 id="关键函数" tabindex="-1"><a class="header-anchor" href="#关键函数"><span>关键函数</span></a></h2><p>Spi_Init：初始化 SPI 模块。<br> Spi_DeInit：去初始化 SPI 模块。<br> Spi_WriteIB：将数据写入内部缓冲区。<br> Spi_ReadIB：从内部缓冲区读取数据。<br> Spi_SyncTransmit：进行同步传输。<br> Spi_AsyncTransmit：进行异步传输。<br> Spi_GetStatus：获取 SPI 模块的状态。<br> Spi_GetJobResult：获取 SPI 作业的结果。</p><h2 id="数据传输模式" tabindex="-1"><a class="header-anchor" href="#数据传输模式"><span>数据传输模式</span></a></h2><h3 id="spi-ib-immediate-buffering" tabindex="-1"><a class="header-anchor" href="#spi-ib-immediate-buffering"><span>SPI IB（Immediate Buffering）</span></a></h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>IB 模式，也称为直接缓冲模式，是一种将数据直接缓冲到驱动内部的模式。在这种模式下，数据在传输之前会被拷贝到驱动内部的缓冲区，传输完成后再从缓冲区中读取数据。这种模式适用于数据量较小且需要快速响应的情况。</p></div><p>特点:</p><ul><li>快速响应：数据直接缓存在驱动内部，减少了外部缓冲区的访问时间。</li><li>易于管理：数据缓存在驱动内部，管理相对简单。</li><li>适合小数据量：由于驱动内部缓冲区大小有限，适用于传输数据量较小的场景。</li></ul><h3 id="spi-eb-external-buffering" tabindex="-1"><a class="header-anchor" href="#spi-eb-external-buffering"><span>SPI EB（External Buffering）</span></a></h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>EB 模式，也称为外部缓冲模式，是一种使用外部缓冲区进行数据传输的模式。在这种模式下，数据在传输过程中不拷贝到驱动内部缓冲区，而是直接从外部缓冲区进行传输。这种模式适用于数据量较大且传输速度要求较高的情况。</p></div><p>特点:</p><ul><li>高效传输：数据直接从外部缓冲区进行传输，适合大数据量的传输。</li><li>复杂管理：需要管理外部缓冲区，增加了管理复杂度。</li><li>适合大数据量：外部缓冲区没有驱动内部缓冲区大小的限制，适用于传输大量数据的场景。</li></ul><h2 id="spi配置" tabindex="-1"><a class="header-anchor" href="#spi配置"><span>SPI配置</span></a></h2><h3 id="spidriver" tabindex="-1"><a class="header-anchor" href="#spidriver"><span>SpiDriver</span></a></h3><p>SpiDriver中需要配置时钟，其他都是自动生成的</p><h3 id="spichannel-id" tabindex="-1"><a class="header-anchor" href="#spichannel-id"><span>SpiChannel ID</span></a></h3><p>autosar标准配置项，一般为自动生成。</p><h3 id="spichannel-type" tabindex="-1"><a class="header-anchor" href="#spichannel-type"><span>SpiChannel Type</span></a></h3><p>选择通道类型，IB/EB。依赖于SpiChannelBuffersAllowed参数 <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><pre><code>            SpiChannelBuffersAllowed=0，SpiChannel Type应该为IB.

            SpiChannelBuffersAllowed=1，SpiChannel Type应该为EB.

            SpiChannelBuffersAllowed=2，SpiChannel Type可能是IB或者EB.
</code></pre><h3 id="spi-data-width" tabindex="-1"><a class="header-anchor" href="#spi-data-width"><span>Spi Data Width</span></a></h3><p>该参数表示传输数据单元的宽度。需要根据实际通信需求修改。</p><h3 id="spi-deault-data" tabindex="-1"><a class="header-anchor" href="#spi-deault-data"><span>Spi Deault Data</span></a></h3><p>当(对于内部缓冲区或外部缓冲区)传递Spi_WriteIB(对于内部缓冲区)或Spi_WriteEB(对于外部缓冲区)的指针为NULL时，传输的默认数据。</p><h3 id="spi-eb-max-length" tabindex="-1"><a class="header-anchor" href="#spi-eb-max-length"><span>Spi Eb Max Length</span></a></h3><p>在选择EB为通道的情况下，此参数仅包含数据缓冲区的最大大小（数据元素数量）。</p><p>SpiNBuffers：该参数用于设置IB模式下的最大数据缓冲区数量</p><h3 id="spi-transer-start" tabindex="-1"><a class="header-anchor" href="#spi-transer-start"><span>Spi Transer Start</span></a></h3><p>此参数定义传输的第一个起始位。LSB-低位传输，MSB-高位传输，具体根据应用场景。</p><h3 id="spiexternaldevce" tabindex="-1"><a class="header-anchor" href="#spiexternaldevce"><span>SpiExternalDevce</span></a></h3><p>SpiExternalDevice:通信外部设备的设置。与SpiJob密切相关，会被SpiJob引用。</p><h3 id="spibaudrate" tabindex="-1"><a class="header-anchor" href="#spibaudrate"><span>SpiBaudrate</span></a></h3><p>配置波特率。</p><h3 id="spicspolarity" tabindex="-1"><a class="header-anchor" href="#spicspolarity"><span>SpiCsPolarity</span></a></h3><p>配置片选信号的激活时的电平。</p><h3 id="spi-chip-select-identifier" tabindex="-1"><a class="header-anchor" href="#spi-chip-select-identifier"><span>Spi Chip Select Identifier</span></a></h3><p>此参数是标识分配给该Job的Chip Select (CS)的符号名称。CS信号如果没有在spi中配置，也可以直接通过配置PORT实现。</p><h3 id="spi-chip-select-polarity" tabindex="-1"><a class="header-anchor" href="#spi-chip-select-polarity"><span>Spi Chip Select Polarity</span></a></h3><p>配置片选信号的激活时的电平。</p><h3 id="spi-cs-selection" tabindex="-1"><a class="header-anchor" href="#spi-cs-selection"><span>Spi Cs Selection</span></a></h3><p>当芯片选择处理或者被启用时（参照SpiEnableCs),那么这个参数指定芯片选择是由外设HW引擎自动处理还是通过Spi驱动程序的通用IO处理</p><pre><code>    一般都会选择CS_VIA_PERIPHERAL_ENGINE，除非对应的IO被异常占用。
</code></pre><h3 id="spi-data-shift-edge" tabindex="-1"><a class="header-anchor" href="#spi-data-shift-edge"><span>Spi Data Shift Edge</span></a></h3><p>此参数定义SPI数据移位边缘。数据可以在移位时钟的前沿或后沿上移位</p><p>对于一个时钟周期内，有两个edge,分别称为：</p><p>(1)Leading edge=前一个边沿=第一个边沿，对于开始电压是1，</p><p>那么就是1变成0的时候，对于开始电压是0，那么就是0变成1的时候；</p><p>(2)Trailing edge=后一个边沿=第二个边沿，对于开始电压是1，<br> 那么就是0变成1的时候（即在第一次1变成0之后，才可能有后面的0变成1），<br> 对于开始电压是0，那么就是1变成0的时候</p><p>在SPI协议中，有类似的定义为CPHA</p><pre><code>    CKPHA (Clock Phase) = CPHA = PHA = Phase = （时钟）相位
</code></pre><p>**不太一样的是，SpiDataShiftEdge是指的数据传输，CPHA指的是数据采样。**不过一个确定后，另外一个边沿也就跟着确定了。</p><h3 id="spi-enable-cs" tabindex="-1"><a class="header-anchor" href="#spi-enable-cs"><span>Spi Enable Cs</span></a></h3><pre><code>启用或禁用Chip Select处理功能。如果该参数被启用，那么参数SpiCsSelection进一步详细说明了芯片选择的类型。
</code></pre><h3 id="spi-shift-clock-idle-level" tabindex="-1"><a class="header-anchor" href="#spi-shift-clock-idle-level"><span>Spi Shift Clock Idle level</span></a></h3><p>此参数定义SPI移位时钟空闲电平，在spi中一般又称为极性CPOL。</p><h3 id="spi-time-clk-2-cs" tabindex="-1"><a class="header-anchor" href="#spi-time-clk-2-cs"><span>Spi Time Clk 2 Cs</span></a></h3><p>时钟与芯片选择CS之间的计时（以秒为单位），该配置需要参考具体的外设使用。</p><h3 id="spi-cs-continous" tabindex="-1"><a class="header-anchor" href="#spi-cs-continous"><span>Spi Cs Continous</span></a></h3><p>该字段决定在帧传输之间保持芯片选择Asserted,仅在Master模式下有效。</p><h3 id="spi-byte-swap" tabindex="-1"><a class="header-anchor" href="#spi-byte-swap"><span>Spi Byte Swap</span></a></h3><p>在发送和接受数据时启用每个32位字的字节交换。</p><h3 id="spi-pin-config" tabindex="-1"><a class="header-anchor" href="#spi-pin-config"><span>Spi Pin Config</span></a></h3><p>配置在1位传输期间用于输入和输出数据的引脚。如果执行2位或4位传输，引脚配置字段必须为00-SIN_INPUT_SOUT_OUTPUT：SIN用于输入数据，SOUT用于输出数据。-SIN_INPUT_OUTPUT：SIN用于输入和输出数据SOUT_INPUT_OUTPUT：SOUT用于输入和输出数据。-SOUT_INPUT_SIN_OUTPUT：SOUT用于输入数据，SIN用于输出数据。</p><h3 id="spijobendnotification" tabindex="-1"><a class="header-anchor" href="#spijobendnotification"><span>SpiJobEndNotification</span></a></h3><p>此参数是通知函数的引用。</p><pre><code>            如果配置了Notification，则在job结束后会调用对应的函数
</code></pre><h3 id="spi-job-id" tabindex="-1"><a class="header-anchor" href="#spi-job-id"><span>Spi Job Id</span></a></h3><p>一般自动生成id</p><h3 id="spi-job-priority" tabindex="-1"><a class="header-anchor" href="#spi-job-priority"><span>Spi Job Priority</span></a></h3><p>根据SPI093设置优先级:0，最低，3，最高优先级</p><h3 id="spi-device-assignment" tabindex="-1"><a class="header-anchor" href="#spi-device-assignment"><span>Spi Device Assignment</span></a></h3><pre><code>    关联对应的 external device
</code></pre><h3 id="spichannellist" tabindex="-1"><a class="header-anchor" href="#spichannellist"><span>SpiChannelList</span></a></h3><p>配置job中的channel,一个job至少有一个channel.</p><h3 id="spisequence" tabindex="-1"><a class="header-anchor" href="#spisequence"><span>SpiSequence</span></a></h3><h3 id="spi-interruptible-sequence" tabindex="-1"><a class="header-anchor" href="#spi-interruptible-sequence"><span>Spi Interruptible Sequence</span></a></h3><pre><code>    此参数允许或不允许此序列被另一个序列挂起。
</code></pre><p>依赖:这个SPI_INTERRUPTIBLE_SEQ_ALLOWED参数被配置为ON。</p><h3 id="spiseqendnotification" tabindex="-1"><a class="header-anchor" href="#spiseqendnotification"><span>SpiSeqEndNotification</span></a></h3><pre><code>    此参数是通知函数的引用。
</code></pre><h3 id="spi-sequence-id" tabindex="-1"><a class="header-anchor" href="#spi-sequence-id"><span>Spi Sequence ID</span></a></h3><p>一般自动生成此参数。</p><h3 id="spijobassignment" tabindex="-1"><a class="header-anchor" href="#spijobassignment"><span>SpiJobAssignment</span></a></h3><p>配置关联的job</p><h3 id="spigeneral" tabindex="-1"><a class="header-anchor" href="#spigeneral"><span>SPIGeneral</span></a></h3><p>SpiLevelDelivered<br> SpiLevelDelivered为0（LEVEL0）：驱动程序仅处理所有可用SPI总线（QSPIx）上的简单同步传输<br> SpiLevelDelivered为1（LEVEL1）：驱动程序仅处理所有可用SPI总线（QSPIx）上的简单异步传输<br> SpiLevelDelivered是2级（LEVEL2）：LEVEL2是驱动程序的增强行为，将处理同步和异步传输</p><p>一般都配置为2</p><p>SpiChannelBuffersAllowed</p><p>选择允许和传递的SPI处理器/驱动程序通道缓冲区使用情况<br> Spi Transmit Timeout Clock Reference*</p><p>参考CPU时钟源配置，该配置设置为MCU驱动程序配置。</p><p>此CPU时钟源用于配置SpiTransmitTimeout中的Timeout值（以微秒为单位）</p><p>用于等待TX/RX传输完成一帧。</p><h3 id="spi-transmit-timeout" tabindex="-1"><a class="header-anchor" href="#spi-transmit-timeout"><span>Spi Transmit Timeout</span></a></h3><p>用于等待TX/RX传输完成一帧的超时值（微秒）。</p><p>如果芯片在此超时期间不能完全传输一帧，则传输将不成功。</p><p>这个值的精度很低，它必须大于完全传输一帧所需的时间。</p><h3 id="spi-global-dma-enable" tabindex="-1"><a class="header-anchor" href="#spi-global-dma-enable"><span>Spi Global Dma Enable</span></a></h3><p>对于每个spi单元，可以配置一种传输方法：FIFO或DMA。</p><p>如果选中，则允许在传输过程中使用DMA模块。</p><p>如果未选中，所有spi单元将使用FIFO传输模式。</p><h3 id="spiinterruptibleseqallowed" tabindex="-1"><a class="header-anchor" href="#spiinterruptibleseqallowed"><span>SpiInterruptibleSeqAllowed</span></a></h3><p>打开或关闭可中断序列处理功能</p><p>SPI_LEVEL_DELIVERED需要配置为1或者2，sequence中也有对应的配置SpiInterruptibleSequence</p><h3 id="spihwstatusapi" tabindex="-1"><a class="header-anchor" href="#spihwstatusapi"><span>SpiHwStatusApi</span></a></h3><p>选择是否开启Spi_GetHWUnitStatus函数，此函数返回指定SPI硬件微控制器外围设备的状态</p><h3 id="spi-cancel-api" tabindex="-1"><a class="header-anchor" href="#spi-cancel-api"><span>Spi Cancel Api</span></a></h3><p>打开或关闭Spi_Cancel功能</p><h3 id="spihwunit" tabindex="-1"><a class="header-anchor" href="#spihwunit"><span>SPIHwUnit</span></a></h3><h3 id="spi-hw-unit" tabindex="-1"><a class="header-anchor" href="#spi-hw-unit"><span>Spi Hw Unit</span></a></h3><p>逻辑SpiHWunit到物理FCSPI_[0|1|2|3|4|5|6|7]的分配。这取决于芯片版本中存在的单元数量。</p><h3 id="spi-hw-unit-mode" tabindex="-1"><a class="header-anchor" href="#spi-hw-unit-mode"><span>Spi Hw Unit Mode</span></a></h3><p>在SPI_MASTER和SPI_SLAVE模式之间进行选择。</p><h3 id="spi-sync-or-async" tabindex="-1"><a class="header-anchor" href="#spi-sync-or-async"><span>Spi Sync Or Async</span></a></h3><p>特定于此HwUnit是否只能进行同步传输。</p><p>如果为true，则此硬件单元仅用于同步传输。</p><p>如果为false，则此硬件单元仅用于异步传输。</p><p>False仅在SpiGeneral/SpiLevelDelivered为1或2时适用，true仅在SpiGeneral/SpiLevel Delivered为0或2时才适用。</p><h3 id="spi-hw-unit-clock-ref" tabindex="-1"><a class="header-anchor" href="#spi-hw-unit-clock-ref"><span>Spi Hw Unit Clock Ref</span></a></h3><p>选择时钟源</p><h3 id="publishedinformation" tabindex="-1"><a class="header-anchor" href="#publishedinformation"><span>PublishedInformation</span></a></h3><p>主要适应一些autosar规范以及软件版本号</p><h2 id="专有名词" tabindex="-1"><a class="header-anchor" href="#专有名词"><span>专有名词<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></span></a></h2><ul><li><strong>SCLK</strong>（Serial Clock）：时钟信号，由主设备产生</li><li><strong>CS</strong> (Chip Select)：从设备使能信号，由主设备控制 <ul><li><strong>SS</strong>（Slave Select）：从设备选择信号，用于选择要通信的从设备。</li><li>CS: 其中CS是控制芯片是否被选中的，也就是说只有片选信号为预先规定的使能信号时（高电位或低电位），对此芯片的操作才有效，这就允许在同一总线上连接多个SPI设备成为可能。</li></ul></li><li><strong>SDO</strong>（Serial Data Output）：主设备数据输出，从设备数据输入。 <ul><li><strong>MOSI</strong>（Master Output Slave Input）：主设备输出从设备输入信号，用于主设备向从设备发送数据。</li></ul></li><li><strong>SDI</strong>（Serial Data Input）：主设备数据输入，从设备数据输出 <ul><li><strong>MISO</strong>（Master Input Slave Output）：主设备输入从设备输出信号，用于主设备接收从设备的数据。</li></ul></li><li><strong>SPI Mode</strong>：SPI 工作模式，用于配置 SPI 控制器的时钟极性和相位。</li><li><strong>SPI Clock Polarity</strong>：SPI 时钟极性，用于配置 SPI 控制器的时钟极性。</li><li><strong>Channel</strong>：SPI最小单元，其中可以配置传输长度，通道类型等。</li><li><strong>Job</strong>：一个Job是由一个或几个具有相同Chip Select(在Job处理期间不释放)的channel组成的。Job被认为是原子的，因此不能被另一个Job中断。Job具有指定的优先级。</li><li><strong>Sequence</strong>：Sequence是要传输的连续Job的数量，但可以使用优先级机制在作业之间重新调度。Sequence传输是可中断的(被另一个Sequence传输)，或者不依赖于静态配置。</li></ul><p>下图很好的说明了Channel，Job，Sequence三者之间的关系：<br><img src="`+s+'" alt="relationship" loading="lazy"><br> 一个Job可以包括多个CS相同的Channel,一个Sequence可以包含多个CS不同的Job.</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p><a href="https://blog.csdn.net/weixin_47460499/article/details/134996341" target="_blank" rel="noopener noreferrer">Autosar——MCAL SPI配置及使用学习笔记</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/594249873" target="_blank" rel="noopener noreferrer">Autosar MCAL-SPI配置及使用</a> <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>',129)]))}const c=a(t,[["render",r]]),d=JSON.parse('{"path":"/OS/AUTOSAR/MCAL-SPI.html","title":"MCAL-SPI","lang":"zh-CN","frontmatter":{"title":"MCAL-SPI","description":"SPI（Serial Peripheral Interface）","tags":["AUTOSAR","SPI"],"categories":["OS"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MCAL-SPI\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-01T10:09:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/OS/AUTOSAR/MCAL-SPI.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"MCAL-SPI"}],["meta",{"property":"og:description","content":"SPI（Serial Peripheral Interface）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-01T10:09:22.000Z"}],["meta",{"property":"article:tag","content":"SPI"}],["meta",{"property":"article:tag","content":"AUTOSAR"}],["meta",{"property":"article:modified_time","content":"2025-05-01T10:09:22.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1745911026000,"updatedTime":1746094162000,"contributors":[{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":3}]},"readingTime":{"minutes":8.91,"words":2673},"filePathRelative":"OS/AUTOSAR/MCAL-SPI.md","localizedDate":"2025年4月29日","excerpt":"<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>SPI（Serial Peripheral Interface） 提供对 SPI 总线的访问接口，用于与 SPI 设备通信。</p>\\n</div>\\n<h2>主要功能</h2>\\n<p>初始化：配置和初始化 SPI 控制器。<br>\\n数据传输：提供同步和异步的数据传输功能。<br>\\n配置管理：管理 SPI 总线的配置，包括主/从模式、时钟极性和相位、数据帧格式等。<br>\\n中断处理：处理 SPI 通信过程中产生的中断。</p>\\n<h2>关键函数</h2>"}');export{c as comp,d as data};
