import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as r,o as d}from"./app-DIMvcjhy.js";const s={};function n(i,t){return d(),o("div",null,t[0]||(t[0]=[r(`<p>嵌入式MCU的<strong>S19文件</strong>（Motorola S-Record格式）是一种用于存储二进制机器码的文本文件格式，广泛应用于微控制器（MCU）的固件烧录。与Intel HEX文件类似，S19文件通过ASCII字符表示二进制数据，但格式和结构有所不同。以下是S19文件的内容结构原理的详细分析：</p><hr><h3 id="_1-s19文件的核心结构" tabindex="-1"><a class="header-anchor" href="#_1-s19文件的核心结构"><span><strong>1. S19文件的核心结构</strong></span></a></h3><p>S19文件由多行文本组成，每行称为一条<strong>记录（Record）</strong>。每条记录的结构如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>STCCAAAA…AADDDD…DDSS</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><strong>字段说明</strong>：</p><table><thead><tr><th>字段</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td><strong><code>S</code></strong></td><td>1字符</td><td><strong>起始符</strong>，固定为字母 <code>S</code>。</td></tr><tr><td><strong><code>T</code></strong></td><td>1字符</td><td><strong>记录类型</strong>（Record Type），定义记录的作用（见下文）。</td></tr><tr><td><strong><code>CC</code></strong></td><td>2字符（1字节）</td><td><strong>字节数</strong>（Byte Count），表示后续所有字段（地址+数据+校验和）的总字节数。</td></tr><tr><td><strong><code>AAAA…AA</code></strong></td><td>2×N字符（N字节）</td><td><strong>地址</strong>（Address），数据在内存中的起始地址。地址长度由记录类型决定。</td></tr><tr><td><strong><code>DDDD…DD</code></strong></td><td>2×M字符（M字节）</td><td><strong>数据</strong>（Data），实际的二进制数据（以ASCII字符表示）。</td></tr><tr><td><strong><code>SS</code></strong></td><td>2字符（1字节）</td><td><strong>校验和</strong>（Checksum），用于验证记录完整性。</td></tr></tbody></table></li></ul><hr><h3 id="_2-记录类型-record-type" tabindex="-1"><a class="header-anchor" href="#_2-记录类型-record-type"><span><strong>2. 记录类型（Record Type）</strong></span></a></h3><p>S19文件通过<code>T</code>字段区分不同类型的记录，常见类型如下：</p><table><thead><tr><th>类型码</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><strong><code>S0</code></strong></td><td><strong>Header Record</strong></td><td>文件头记录，通常包含文件名、版本等元数据（数据部分为ASCII字符串）。</td></tr><tr><td><strong><code>S1</code></strong></td><td><strong>Data Record (16-bit Address)</strong></td><td>存储16位地址的数据记录。</td></tr><tr><td><strong><code>S2</code></strong></td><td><strong>Data Record (24-bit Address)</strong></td><td>存储24位地址的数据记录。</td></tr><tr><td><strong><code>S3</code></strong></td><td><strong>Data Record (32-bit Address)</strong></td><td>存储32位地址的数据记录。</td></tr><tr><td><strong><code>S5</code></strong></td><td><strong>Count Record</strong></td><td>可选记录，表示数据记录的数量（仅用于S1/S2/S3）。</td></tr><tr><td><strong><code>S7</code></strong>/<strong><code>S8</code></strong>/<strong><code>S9</code></strong></td><td><strong>Termination Record</strong></td><td>文件结束记录，指定程序入口地址（类型与地址长度对应）。</td></tr></tbody></table><hr><h3 id="_3-地址扩展机制" tabindex="-1"><a class="header-anchor" href="#_3-地址扩展机制"><span><strong>3. 地址扩展机制</strong></span></a></h3><p>S19文件通过不同的记录类型直接支持多种地址长度：</p><ul><li><strong>S1</strong>：16位地址（最大64KB地址空间）。</li><li><strong>S2</strong>：24位地址（最大16MB地址空间）。</li><li><strong>S3</strong>：32位地址（最大4GB地址空间）。</li></ul><p><strong>示例</strong>：</p><ul><li><code>S30400000000...</code>：使用<code>S3</code>类型，地址字段为4字节（32位）。</li><li><code>S2148000...</code>：使用<code>S2</code>类型，地址字段为3字节（24位）。</li></ul><hr><h3 id="_4-校验和计算" tabindex="-1"><a class="header-anchor" href="#_4-校验和计算"><span><strong>4. 校验和计算</strong></span></a></h3><p>校验和<code>SS</code>用于验证记录的完整性，计算方法为：</p><ol><li>将记录中<code>CC</code>、地址、数据的所有<strong>字节值相加</strong>。</li><li>取和的<strong>低8位</strong>，并计算其<strong>按位取反</strong>（即<code>0xFF - sum_byte + 1</code>）。</li><li>结果即为校验和<code>SS</code>。</li></ol><p><strong>示例</strong>：记录 <code>S1138000AABBCCDD00112233445566778899A5</code></p><ul><li>计算 <code>0x13（CC） + 0x80 + 0x00（地址） + 0xAA + 0xBB + 0xCC + 0xDD + 0x00 + 0x11 + 0x22 + 0x33 + 0x44 + 0x55 + 0x66 + 0x77 + 0x88 + 0x99 = 0x6D7</code></li><li>取低8位 <code>0xD7</code>，校验和为 <code>0xFF - 0xD7 + 1 = 0x29</code>，但实际校验和为 <code>0xA5</code>，说明示例可能存在错误（需重新核对）。</li></ul><hr><h3 id="_5-s19文件示例解析" tabindex="-1"><a class="header-anchor" href="#_5-s19文件示例解析"><span><strong>5. S19文件示例解析</strong></span></a></h3><p>以下是一个典型的S19文件片段：</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>S00600004844521B  // S0头记录（文件名&quot;HDR&quot;）</span></span>
<span class="line"><span>S31500000000AABBCCDD001122334455667788990033  // S3类型数据记录（32位地址0x00000000）</span></span>
<span class="line"><span>S70500000000FA    // S7终止记录（入口地址0x00000000）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>S0记录</strong>：</p><ul><li>字节数 <code>06</code>（表示总字节数为6，包括地址、数据、校验和）。</li><li>地址字段 <code>0000</code>（无意义）。</li><li>数据 <code>484452</code>（ASCII &quot;HDR&quot;）。</li><li>校验和 <code>1B</code>。</li></ul></li><li><p><strong>S3记录</strong>：</p><ul><li>字节数 <code>15</code>（总字节数21，包含地址4字节+数据16字节+校验和1字节）。</li><li>地址 <code>00000000</code>（32位地址）。</li><li>数据 <code>AABBCCDD00112233445566778899</code>（16字节）。</li><li>校验和 <code>33</code>。</li></ul></li><li><p><strong>S7记录</strong>：</p><ul><li>终止记录，指定程序入口地址为 <code>00000000</code>（32位地址）。</li></ul></li></ul><hr><h3 id="_6-s19文件-vs-hex文件" tabindex="-1"><a class="header-anchor" href="#_6-s19文件-vs-hex文件"><span><strong>6. S19文件 vs. Hex文件</strong></span></a></h3><table><thead><tr><th>特性</th><th>S19文件</th><th>Hex文件</th></tr></thead><tbody><tr><td><strong>地址扩展</strong></td><td>通过记录类型直接支持（S1/S2/S3）</td><td>需扩展记录（如04类型）组合地址</td></tr><tr><td><strong>校验和计算</strong></td><td>低8位和取反+1</td><td>低8位和的补码（0x100 - sum）</td></tr><tr><td><strong>文件头</strong></td><td>S0记录包含ASCII信息</td><td>无专用头记录</td></tr><tr><td><strong>终止记录</strong></td><td>S7/S8/S9指定入口地址</td><td>类型01（EOF）或05（入口地址）</td></tr><tr><td><strong>适用场景</strong></td><td>摩托罗拉系MCU、旧式工具链</td><td>通用性更强，广泛用于现代MCU</td></tr></tbody></table><hr><h3 id="_7-工具链中的s19文件" tabindex="-1"><a class="header-anchor" href="#_7-工具链中的s19文件"><span><strong>7. 工具链中的S19文件</strong></span></a></h3><ul><li><strong>生成方式</strong>：编译器/链接器（如GCC、IAR）通过指定输出格式生成（如<code>objcopy -O srec</code>）。</li><li><strong>烧录工具</strong>：需支持S19格式的编程器（如P&amp;E Micro、Lauterbach调试器）。</li><li><strong>调试用途</strong>：通过S19文件可快速定位代码在内存中的分布。</li></ul><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><p>S19文件通过简洁的文本格式和灵活的记录类型，为嵌入式MCU提供了一种可靠的数据传输方式。其核心特点包括：</p><ol><li><strong>地址直接扩展</strong>：通过S1/S2/S3记录支持不同地址长度，无需组合地址。</li><li><strong>强校验机制</strong>：校验和覆盖所有字段，确保数据完整性。</li><li><strong>明确的终止记录</strong>：S7/S8/S9直接定义程序入口地址。</li></ol><p>理解S19文件的结构原理，有助于：</p><ul><li>手动解析或调试固件内容。</li><li>适配不同MCU厂商的烧录工具。</li><li>在无标准工具时，自定义脚本处理固件数据。</li></ul>`,39)]))}const c=e(s,[["render",n]]),g=JSON.parse('{"path":"/advance/s19%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90.html","title":"s19文件结构解析","lang":"zh-CN","frontmatter":{"title":"s19文件结构解析","date":"2025-03-19T09:26:00.000Z","tags":["upgrade"],"categories":["MCU"],"description":"嵌入式MCU的S19文件（Motorola S-Record格式）是一种用于存储二进制机器码的文本文件格式，广泛应用于微控制器（MCU）的固件烧录。与Intel HEX文件类似，S19文件通过ASCII字符表示二进制数据，但格式和结构有所不同。以下是S19文件的内容结构原理的详细分析： 1. S19文件的核心结构 S19文件由多行文本组成，每行称为一条...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"s19文件结构解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-19T09:26:00.000Z\\",\\"dateModified\\":\\"2025-04-29T07:17:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/advance/s19%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"s19文件结构解析"}],["meta",{"property":"og:description","content":"嵌入式MCU的S19文件（Motorola S-Record格式）是一种用于存储二进制机器码的文本文件格式，广泛应用于微控制器（MCU）的固件烧录。与Intel HEX文件类似，S19文件通过ASCII字符表示二进制数据，但格式和结构有所不同。以下是S19文件的内容结构原理的详细分析： 1. S19文件的核心结构 S19文件由多行文本组成，每行称为一条..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T07:17:06.000Z"}],["meta",{"property":"article:tag","content":"upgrade"}],["meta",{"property":"article:published_time","content":"2025-03-19T09:26:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-29T07:17:06.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1744102850000,"updatedTime":1745911026000,"contributors":[{"name":"re-wi","username":"","email":"RejoiceWindow@yeah.com","commits":1},{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":1}]},"readingTime":{"minutes":4.2,"words":1260},"filePathRelative":"advance/s19文件结构解析.md","localizedDate":"2025年3月19日","excerpt":"<p>嵌入式MCU的<strong>S19文件</strong>（Motorola S-Record格式）是一种用于存储二进制机器码的文本文件格式，广泛应用于微控制器（MCU）的固件烧录。与Intel HEX文件类似，S19文件通过ASCII字符表示二进制数据，但格式和结构有所不同。以下是S19文件的内容结构原理的详细分析：</p>\\n<hr>\\n<h3><strong>1. S19文件的核心结构</strong></h3>\\n<p>S19文件由多行文本组成，每行称为一条<strong>记录（Record）</strong>。每条记录的结构如下：</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>STCCAAAA…AADDDD…DDSS</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,g as data};
