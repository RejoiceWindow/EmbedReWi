import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as s,o as e}from"./app-DIMvcjhy.js";const o={};function a(i,t){return e(),n("div",null,t[0]||(t[0]=[s('<p>UART（Universal Asynchronous Receiver/Transmitter，通用异步收发器）是一种<strong>异步串行通信协议</strong>，广泛用于电子设备之间的简单、可靠数据传输。它通过两根信号线（发送端 TX 和接收端 RX）实现全双工通信，无需时钟信号同步，适用于短距离、中低速场景。以下是其核心知识点详解：</p><hr><h2 id="一、核心特性与工作原理" tabindex="-1"><a class="header-anchor" href="#一、核心特性与工作原理"><span><strong>一、核心特性与工作原理</strong></span></a></h2><h3 id="_1-通信特点" tabindex="-1"><a class="header-anchor" href="#_1-通信特点"><span><strong>1. 通信特点</strong></span></a></h3><ul><li><strong>异步传输</strong>：无共用时钟信号，依赖双方预设的**波特率（Baud Rate）**同步时序。</li><li><strong>全双工模式</strong>：TX 和 RX 独立工作，支持同时收发数据。</li><li><strong>点对点连接</strong>：通常一对一通信，多设备需通过软件或硬件扩展（如 RS-485 总线）。</li><li><strong>帧结构</strong>：每帧数据包含起始位、数据位（5-9 位）、校验位（可选）和停止位（1-2 位）。</li></ul><h3 id="_2-帧格式示例" tabindex="-1"><a class="header-anchor" href="#_2-帧格式示例"><span><strong>2. 帧格式示例</strong></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[起始位 0] [数据位 D0-D7] [奇偶校验位] [停止位 1]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>起始位</strong>：低电平（0），标志数据开始。</li><li><strong>数据位</strong>：有效信息（如 ASCII 字符）。</li><li><strong>校验位</strong>：奇偶校验，检测单比特错误。</li><li><strong>停止位</strong>：高电平（1），标志数据结束。</li></ul><h3 id="_3-波特率与误差容忍" tabindex="-1"><a class="header-anchor" href="#_3-波特率与误差容忍"><span><strong>3. 波特率与误差容忍</strong></span></a></h3><ul><li><strong>常见波特率</strong>：9600、115200 等（单位：bps，每秒比特数）。</li><li><strong>误差范围</strong>：双方波特率偏差需小于 2-3%，否则可能采样错位。</li></ul><hr><h2 id="二、硬件接口与电平标准" tabindex="-1"><a class="header-anchor" href="#二、硬件接口与电平标准"><span><strong>二、硬件接口与电平标准</strong></span></a></h2><h3 id="_1-物理接线" tabindex="-1"><a class="header-anchor" href="#_1-物理接线"><span><strong>1. 物理接线</strong></span></a></h3><ul><li><strong>基础连接</strong>：设备 A 的 TX → 设备 B 的 RX，设备 A 的 RX ← 设备 B 的 TX，GND 共地。</li><li><strong>三线制</strong>：仅需 TX、RX、GND 三根线。</li></ul><h3 id="_2-电平标准" tabindex="-1"><a class="header-anchor" href="#_2-电平标准"><span><strong>2. 电平标准</strong></span></a></h3><table><thead><tr><th><strong>标准</strong></th><th><strong>电压范围</strong></th><th><strong>典型应用</strong></th></tr></thead><tbody><tr><td><strong>TTL UART</strong></td><td>0V（逻辑 0）、3.3V/5V（逻辑 1）</td><td>微控制器间通信（如 Arduino、STM32）</td></tr><tr><td><strong>RS-232</strong></td><td>±3V 至 ±15V</td><td>PC 串口、工业设备（抗干扰强）</td></tr><tr><td><strong>RS-485</strong></td><td>差分信号（±1.5V 至 ±5V）</td><td>远距离（1200 米）、多设备总线</td></tr></tbody></table><hr><h2 id="三、配置参数与通信流程" tabindex="-1"><a class="header-anchor" href="#三、配置参数与通信流程"><span><strong>三、配置参数与通信流程</strong></span></a></h2><h3 id="_1-关键参数" tabindex="-1"><a class="header-anchor" href="#_1-关键参数"><span><strong>1. 关键参数</strong></span></a></h3><ul><li><strong>波特率</strong>：双方必须一致（如 115200 bps）。</li><li><strong>数据位</strong>：通常 8 位（对应一个字节）。</li><li><strong>停止位</strong>：1 位或 2 位。</li><li><strong>校验位</strong>：无校验（None）、奇校验（Odd）、偶校验（Even）。</li></ul><h3 id="_2-通信流程" tabindex="-1"><a class="header-anchor" href="#_2-通信流程"><span><strong>2. 通信流程</strong></span></a></h3><ol><li><strong>初始化</strong>：配置双方参数（波特率、数据位等）。</li><li><strong>发送数据</strong>：发送端按帧格式逐位传输。</li><li><strong>接收数据</strong>：接收端检测起始位，按波特率采样数据位。</li><li><strong>错误检测</strong>：校验位验证数据完整性，帧错误时丢弃数据。</li></ol><hr><h2 id="四、典型应用场景" tabindex="-1"><a class="header-anchor" href="#四、典型应用场景"><span><strong>四、典型应用场景</strong></span></a></h2><h3 id="_1-微控制器通信" tabindex="-1"><a class="header-anchor" href="#_1-微控制器通信"><span><strong>1. 微控制器通信</strong></span></a></h3><ul><li><strong>示例</strong>：STM32 与 ESP8266 通过 TTL UART 传输传感器数据。</li><li><strong>优势</strong>：无需复杂协议栈，资源占用低。</li></ul><h3 id="_2-调试与日志输出" tabindex="-1"><a class="header-anchor" href="#_2-调试与日志输出"><span><strong>2. 调试与日志输出</strong></span></a></h3><ul><li><strong>示例</strong>：通过 USB 转 TTL 模块连接 PC，使用串口助手（如 PuTTY）查看日志。</li><li><strong>工具链</strong>：<code>printf</code> 重定向至 UART，实时调试嵌入式系统。</li></ul><h3 id="_3-工业控制" tabindex="-1"><a class="header-anchor" href="#_3-工业控制"><span><strong>3. 工业控制</strong></span></a></h3><ul><li><strong>示例</strong>：PLC 通过 RS-485 总线连接多个传感器（Modbus RTU 协议）。</li><li><strong>优势</strong>：抗干扰强，支持长距离通信。</li></ul><hr><h2 id="五、优缺点分析" tabindex="-1"><a class="header-anchor" href="#五、优缺点分析"><span><strong>五、优缺点分析</strong></span></a></h2><table><thead><tr><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td>硬件简单，成本低</td><td>通信速率较低（通常 ≤ 1 Mbps）</td></tr><tr><td>无需时钟线，节省引脚</td><td>点对点连接，扩展性差</td></tr><tr><td>协议简单，易于实现</td><td>无硬件流控（需软件模拟 RTS/CTS）</td></tr><tr><td>广泛兼容，通用性强</td><td>长距离需转换器（如 RS-485）</td></tr></tbody></table><hr><h2 id="六、与-spi-i2c-的对比" tabindex="-1"><a class="header-anchor" href="#六、与-spi-i2c-的对比"><span><strong>六、与 SPI/I²C 的对比</strong></span></a></h2><table><thead><tr><th><strong>特性</strong></th><th><strong>UART</strong></th><th><strong>SPI</strong></th><th><strong>I²C</strong></th></tr></thead><tbody><tr><td><strong>通信类型</strong></td><td>异步</td><td>同步（时钟信号）</td><td>同步（时钟信号）</td></tr><tr><td><strong>线路数量</strong></td><td>2 线（TX+RX）</td><td>4 线（SCK+MOSI+MISO+CS）</td><td>2 线（SDA+SCL）</td></tr><tr><td><strong>传输速率</strong></td><td>低（通常 ≤ 1 Mbps）</td><td>高（可达 100+ Mbps）</td><td>中（标准模式 100 Kbps）</td></tr><tr><td><strong>多设备支持</strong></td><td>需硬件扩展（如 RS-485）</td><td>主从模式，片选信号选择设备</td><td>地址寻址，支持多主多从</td></tr><tr><td><strong>典型应用</strong></td><td>调试接口、传感器数据</td><td>高速外设（如显示屏、存储）</td><td>低速外设（如温度传感器）</td></tr></tbody></table><hr><h2 id="七、常见问题与调试技巧" tabindex="-1"><a class="header-anchor" href="#七、常见问题与调试技巧"><span><strong>七、常见问题与调试技巧</strong></span></a></h2><ol><li><p><strong>无数据接收</strong></p><ul><li>检查接线（TX/RX 是否交叉连接）。</li><li>确认波特率、数据位等参数一致。</li><li>测量信号电平（如 TTL 是否为 3.3V/5V）。</li></ul></li><li><p><strong>数据乱码</strong></p><ul><li>降低波特率测试（排除时钟偏差）。</li><li>添加奇偶校验或软件校验（如 CRC）。</li></ul></li><li><p><strong>远距离通信不稳定</strong></p><ul><li>改用 RS-485 标准，并加终端电阻匹配阻抗。</li><li>使用屏蔽双绞线，避免电磁干扰。</li></ul></li></ol><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h2><p>UART 是嵌入式开发中最基础的通信协议，凭借<strong>简单性、低成本和通用性</strong>，广泛用于设备调试、传感器连接及短距离数据传输。尽管在速率和扩展性上不及 SPI/I²C，但其无需时钟同步的特点使其在资源受限的场景中不可替代。实际应用中需注意电平匹配、参数配置及抗干扰设计。</p>',42)]))}const g=r(o,[["render",a]]),h=JSON.parse('{"path":"/protocol/UART.html","title":"UART","lang":"zh-CN","frontmatter":{"title":"UART","date":"2025-05-03T16:06:00.000Z","icon":"carbon:tcp-ip-service","tag":["UART"],"category":["protocol"],"description":"UART（Universal Asynchronous Receiver/Transmitter，通用异步收发器）是一种异步串行通信协议，广泛用于电子设备之间的简单、可靠数据传输。它通过两根信号线（发送端 TX 和接收端 RX）实现全双工通信，无需时钟信号同步，适用于短距离、中低速场景。以下是其核心知识点详解： 一、核心特性与工作原理 1. 通信特点 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"UART\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-03T16:06:00.000Z\\",\\"dateModified\\":\\"2025-05-06T05:37:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/protocol/UART.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"UART"}],["meta",{"property":"og:description","content":"UART（Universal Asynchronous Receiver/Transmitter，通用异步收发器）是一种异步串行通信协议，广泛用于电子设备之间的简单、可靠数据传输。它通过两根信号线（发送端 TX 和接收端 RX）实现全双工通信，无需时钟信号同步，适用于短距离、中低速场景。以下是其核心知识点详解： 一、核心特性与工作原理 1. 通信特点 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-06T05:37:26.000Z"}],["meta",{"property":"article:tag","content":"UART"}],["meta",{"property":"article:published_time","content":"2025-05-03T16:06:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-06T05:37:26.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1746509846000,"updatedTime":1746509846000,"contributors":[{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":1}]},"readingTime":{"minutes":4.05,"words":1215},"filePathRelative":"protocol/UART.md","localizedDate":"2025年5月4日","excerpt":"<p>UART（Universal Asynchronous Receiver/Transmitter，通用异步收发器）是一种<strong>异步串行通信协议</strong>，广泛用于电子设备之间的简单、可靠数据传输。它通过两根信号线（发送端 TX 和接收端 RX）实现全双工通信，无需时钟信号同步，适用于短距离、中低速场景。以下是其核心知识点详解：</p>\\n<hr>\\n<h2><strong>一、核心特性与工作原理</strong></h2>\\n<h3><strong>1. 通信特点</strong></h3>\\n<ul>\\n<li><strong>异步传输</strong>：无共用时钟信号，依赖双方预设的**波特率（Baud Rate）**同步时序。</li>\\n<li><strong>全双工模式</strong>：TX 和 RX 独立工作，支持同时收发数据。</li>\\n<li><strong>点对点连接</strong>：通常一对一通信，多设备需通过软件或硬件扩展（如 RS-485 总线）。</li>\\n<li><strong>帧结构</strong>：每帧数据包含起始位、数据位（5-9 位）、校验位（可选）和停止位（1-2 位）。</li>\\n</ul>","autoDesc":true}');export{g as comp,h as data};
