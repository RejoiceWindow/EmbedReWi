import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as n}from"./app-DIMvcjhy.js";const l={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<p>在嵌入式开发领域，<strong>Shell脚本自动化</strong>是提升效率、简化重复性任务的关键技术，尤其适用于系统配置、测试流程、部署维护等场景。以下从技术要点、应用场景及简历优化角度解析其核心价值：</p><hr><h2 id="一、shell脚本自动化的技术要点" tabindex="-1"><a class="header-anchor" href="#一、shell脚本自动化的技术要点"><span><strong>一、Shell脚本自动化的技术要点</strong></span></a></h2><h3 id="_1-核心能力" tabindex="-1"><a class="header-anchor" href="#_1-核心能力"><span>1. <strong>核心能力</strong></span></a></h3><ul><li><strong>流程控制</strong>：通过 <code>if/else</code>、<code>case</code>、<code>for/while</code> 实现条件判断与循环。</li><li><strong>命令组合</strong>：调用系统工具（<code>grep</code>、<code>awk</code>、<code>sed</code>）处理文本、文件及日志。</li><li><strong>环境管理</strong>：自动化配置环境变量、挂载文件系统、启动服务。</li><li><strong>错误处理</strong>：通过 <code>set -e</code> 或 <code>trap</code> 捕获异常，确保脚本健壮性。</li></ul><h3 id="_2-嵌入式场景常用命令" tabindex="-1"><a class="header-anchor" href="#_2-嵌入式场景常用命令"><span>2. <strong>嵌入式场景常用命令</strong></span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设备操作</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shell</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;dmesg | grep -i error&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          # 安卓设备日志过滤</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">picocom</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 115200</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /dev/ttyUSB0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 串口通信</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 文件处理</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./firmware</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mnt/rootfs</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              # 固件部署</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;*.log&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -mtime</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +7</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -delete</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 清理旧日志</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 系统监控</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sys/class/thermal/thermal_zone0/temp</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 读取温度传感器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    sleep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-调试技巧" tabindex="-1"><a class="header-anchor" href="#_3-调试技巧"><span>3. <strong>调试技巧</strong></span></a></h3><ul><li><strong>日志追踪</strong>：<code>set -x</code> 显示执行过程，<code>tee</code> 同时输出到屏幕和文件。</li><li><strong>性能分析</strong>：<code>time</code> 命令统计脚本耗时，<code>strace</code> 跟踪系统调用。</li></ul><hr><h2 id="二、shell自动化的典型应用场景" tabindex="-1"><a class="header-anchor" href="#二、shell自动化的典型应用场景"><span><strong>二、Shell自动化的典型应用场景</strong></span></a></h2><h3 id="_1-固件烧录与升级" tabindex="-1"><a class="header-anchor" href="#_1-固件烧录与升级"><span>1. <strong>固件烧录与升级</strong></span></a></h3><ul><li><strong>自动化流程</strong>： <ol><li>检测设备连接状态（<code>lsusb</code> 或 <code>dmesg</code>）；</li><li>擦除Flash（<code>flash_eraseall /dev/mtd0</code>）；</li><li>写入固件（<code>nandwrite -p /dev/mtd0 firmware.bin</code>）；</li><li>重启设备并验证版本（<code>ubootenv print version</code>）。</li></ol></li></ul><h3 id="_2-自动化测试" tabindex="-1"><a class="header-anchor" href="#_2-自动化测试"><span>2. <strong>自动化测试</strong></span></a></h3><ul><li><p><strong>硬件功能验证</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 测试GPIO输出</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/sys/class/gpio/gpio17/value</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sys/class/gpio/gpio17/value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$result</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -eq</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ] || </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">exit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>批量测试脚本</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> test_case</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test_*.bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./run_test</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $test_case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">test_report.log</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-日志分析与告警" tabindex="-1"><a class="header-anchor" href="#_3-日志分析与告警"><span>3. <strong>日志分析与告警</strong></span></a></h3><ul><li><p><strong>关键错误提取</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -E</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ERROR|CRITICAL&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/log/syslog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Device Alert&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> admin@example.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>统计资源占用</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cpu_usage</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">top</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -bn1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Cpu(s)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $2}&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[ </span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cpu_usage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">%.*</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -gt</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 90</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ] &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">trigger_reboot</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-持续集成-ci-cd" tabindex="-1"><a class="header-anchor" href="#_4-持续集成-ci-cd"><span>4. <strong>持续集成（CI/CD）</strong></span></a></h3><ul><li><p><strong>编译-部署流水线</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 交叉编译内核</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ARCH=arm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CROSS_COMPILE=arm-linux-gnueabihf-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> zImage</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 生成镜像并推送到设备</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> zImage</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root@192.168.1.100:/boot</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root@192.168.1.100</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;reboot&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="三、简历优化建议" tabindex="-1"><a class="header-anchor" href="#三、简历优化建议"><span><strong>三、简历优化建议</strong></span></a></h2><h3 id="_1-避免笼统表述" tabindex="-1"><a class="header-anchor" href="#_1-避免笼统表述"><span>1. <strong>避免笼统表述</strong></span></a></h3><ul><li>❌ 原句：<br><em>“熟悉Shell脚本自动化”</em></li><li>✅ 优化后：<br><em>“设计Shell自动化工具链：实现固件批量烧录（支持100+设备并行）、测试用例自动执行（减少人工干预80%）、异常日志实时告警（响应延迟&lt;1s）”</em></li></ul><h3 id="_2-结合技术闭环" tabindex="-1"><a class="header-anchor" href="#_2-结合技术闭环"><span>2. <strong>结合技术闭环</strong></span></a></h3><ul><li><strong>示例描述</strong>： <blockquote><ul><li>开发自动化测试框架：通过Shell脚本调用Python/OpenCV视觉验证模块，完成硬件功能测试（准确率99%），集成Jenkins实现每日构建。</li><li>构建生产部署流水线：Shell脚本自动生成量产镜像、校验CRC并同步至SFTP服务器，部署效率提升3倍。</li></ul></blockquote></li></ul><h3 id="_3-关键词增强专业性" tabindex="-1"><a class="header-anchor" href="#_3-关键词增强专业性"><span>3. <strong>关键词增强专业性</strong></span></a></h3><ul><li><strong>技术栈</strong>：<code>Expect自动化交互</code>、<code>CRON定时任务</code>、<code>信号量（SIGTERM/SIGINT）处理</code></li><li><strong>工具链</strong>：<code>Jenkins集成</code>、<code>Ansible联动</code>、<code>ELK日志分析</code></li></ul><hr><h2 id="四、进阶方向" tabindex="-1"><a class="header-anchor" href="#四、进阶方向"><span><strong>四、进阶方向</strong></span></a></h2><ol><li><p><strong>性能优化</strong></p><ul><li>避免频繁文件IO，使用管道或临时变量减少磁盘操作。</li><li>多线程加速（如 <code>xargs -P</code> 或 <code>&amp;</code> 结合 <code>wait</code>）。</li></ul></li><li><p><strong>安全加固</strong></p><ul><li>禁用危险命令（<code>rm -rf /</code>），使用 <code>--preserve-root</code> 防护。</li><li>脚本权限控制（<code>chmod 750</code>），敏感信息加密存储。</li></ul></li><li><p><strong>与Python互补</strong></p><ul><li>Shell处理底层系统操作，Python实现复杂逻辑（如数据分析、API调用）。</li></ul></li></ol><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h2><p>Shell脚本自动化是嵌入式工程师的必备技能，<strong>核心价值在于将碎片化操作转化为可重复、可维护的流程</strong>。在简历中需通过具体案例（如测试效率提升、部署错误率降低）量化成果，同时体现对系统级问题的理解（如并发、资源竞争）。</p>`,33)]))}const k=s(l,[["render",t]]),p=JSON.parse('{"path":"/%E6%B5%8B%E8%AF%95/Shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E5%8C%96.html","title":"Simulink","lang":"zh-CN","frontmatter":{"title":"Simulink","date":"2025-04-29T13:40:00.000Z","icon":"material-icon-theme:simulink","tag":["Shell"],"category":["test"],"description":"在嵌入式开发领域，Shell脚本自动化是提升效率、简化重复性任务的关键技术，尤其适用于系统配置、测试流程、部署维护等场景。以下从技术要点、应用场景及简历优化角度解析其核心价值： 一、Shell脚本自动化的技术要点 1. 核心能力 流程控制：通过 if/else、case、for/while 实现条件判断与循环。 命令组合：调用系统工具（grep、awk...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Simulink\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-29T13:40:00.000Z\\",\\"dateModified\\":\\"2025-05-03T03:29:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://gitee.com/re-wi\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"ReWi\\",\\"url\\":\\"https://github.com/Re-Wi/\\",\\"email\\":\\"RejoiceWindow@yeah.net\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"RejoiceWindow\\"}]}"],["meta",{"property":"og:url","content":"https://em.rewi.xyz/%E6%B5%8B%E8%AF%95/Shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"EmbedReWi"}],["meta",{"property":"og:title","content":"Simulink"}],["meta",{"property":"og:description","content":"在嵌入式开发领域，Shell脚本自动化是提升效率、简化重复性任务的关键技术，尤其适用于系统配置、测试流程、部署维护等场景。以下从技术要点、应用场景及简历优化角度解析其核心价值： 一、Shell脚本自动化的技术要点 1. 核心能力 流程控制：通过 if/else、case、for/while 实现条件判断与循环。 命令组合：调用系统工具（grep、awk..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-03T03:29:51.000Z"}],["meta",{"property":"article:tag","content":"Shell"}],["meta",{"property":"article:published_time","content":"2025-04-29T13:40:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-03T03:29:51.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://em.rewi.xyz/rss.xml","title":"EmbedReWi RSS Feed"}]]},"git":{"createdTime":1746242991000,"updatedTime":1746242991000,"contributors":[{"name":"ReWi","username":"","email":"RejoiceWindow@yeah.net","commits":1}]},"readingTime":{"minutes":3.14,"words":943},"filePathRelative":"测试/Shell脚本自动化.md","localizedDate":"2025年4月29日","excerpt":"<p>在嵌入式开发领域，<strong>Shell脚本自动化</strong>是提升效率、简化重复性任务的关键技术，尤其适用于系统配置、测试流程、部署维护等场景。以下从技术要点、应用场景及简历优化角度解析其核心价值：</p>\\n<hr>\\n<h2><strong>一、Shell脚本自动化的技术要点</strong></h2>\\n<h3>1. <strong>核心能力</strong></h3>\\n<ul>\\n<li><strong>流程控制</strong>：通过 <code>if/else</code>、<code>case</code>、<code>for/while</code> 实现条件判断与循环。</li>\\n<li><strong>命令组合</strong>：调用系统工具（<code>grep</code>、<code>awk</code>、<code>sed</code>）处理文本、文件及日志。</li>\\n<li><strong>环境管理</strong>：自动化配置环境变量、挂载文件系统、启动服务。</li>\\n<li><strong>错误处理</strong>：通过 <code>set -e</code> 或 <code>trap</code> 捕获异常，确保脚本健壮性。</li>\\n</ul>","autoDesc":true}');export{k as comp,p as data};
